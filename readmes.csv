,Content
0,"





freeCodeCamp.org's open-source codebase and curriculum
freeCodeCamp.org is a friendly community where you can learn to code for free. It is run by a donor-supported 501(c)(3) nonprofit to help  millions of busy adults transition into tech. Our community has already helped more than 10,000 people get their first developer job.
Our full-stack web development curriculum is completely free and self-paced. We have thousands of interactive coding challenges to help you expand your skills.
Table of Contents

Certifications
The Learning Platform
Reporting Bugs and Issues
Reporting Security Issues
Contributing
Platform, Build and Deployment Status
License

Certifications
freeCodeCamp.org offers several free developer certifications. Each of these certifications involves building 5 required web app projects, along with hundreds of optional coding challenges to help you prepare for those projects. We estimate that each certification will take a beginning programmer around 300 hours to earn.
Each of these 30 projects in the freeCodeCamp.org curriculum has its own agile user stories and automated tests. These help you build up your project incrementally and ensure you've fulfilled all the user stories before you submit it.
You can pull in these test suites through freeCodeCamp's CDN. This means you can build these projects on websites like CodePen and Glitch - or even on your local computer's development environment.
Once you’ve earned a certification, you will always have it. You will always be able to link to it from your LinkedIn or résumé. And when your prospective employers or freelance clients click that link, they’ll see a verified certification specific to you.
The one exception to this is if we discover violations of our Academic Honesty Policy. When we catch people unambiguously plagiarizing (submitting other people's code or projects as their own without citation), we do what all rigorous institutions of learning should do - we revoke their certifications and ban those people.
Here are our six core certifications:
1. Responsive Web Design Certification

Basic HTML and HTML5
Basic CSS
Applied Visual Design
Applied Accessibility
Responsive Web Design Principles
CSS Flexbox
CSS Grid


Projects: Tribute Page, Survey Form, Product Landing Page, Technical Documentation Page, Personal Portfolio Webpage

2. JavaScript Algorithms and Data Structures Certification

Basic JavaScript
ES6
Regular Expressions
Debugging
Basic Data Structures
Algorithm Scripting
Object-Oriented Programming
Functional Programming
Intermediate Algorithm Scripting


Projects: Palindrome Checker, Roman Numeral Converter, Caesar's Cipher, Telephone Number Validator, Cash Register

3. Front End Libraries Certification

Bootstrap
jQuery
Sass
React
Redux
React and Redux


Projects: Random Quote Machine, Markdown Previewer, Drum Machine, JavaScript Calculator, Pomodoro Clock

4. Data Visualization Certification

Data Visualization with D3
JSON APIs and Ajax


Projects: Bar Chart, Scatterplot Graph, Heat Map, Choropleth Map, Treemap Diagram

5. APIs and Microservices Certification

Managing Packages with Npm
Basic Node and Express
MongoDB and Mongoose


Projects: Timestamp Microservice, Request Header Parser, URL Shortener, Exercise Tracker, File Metadata Microservice

6. Information Security and Quality Assurance Certification

Information Security with HelmetJS
Quality Assurance and Testing with Chai
Advanced Node and Express


Projects: Metric-Imperial Converter, Issue Tracker, Personal Library, Stock Price Checker, Anonymous Message Board

Full Stack Development Certification
Once you have earned all 6 of these certifications, you'll be able to claim your freeCodeCamp.org Full Stack Development Certification. This final distinction signifies that you’ve completed around 1,800 hours of coding with a wide range of web development tools.
Legacy Certifications
We also have 3 legacy certifications from our 2015 curriculum, which are still available. All of the required projects for these legacy certifications will remain available on freeCodeCamp.org.

Legacy Front End Development Certification
Legacy Data Visualization Certification
Legacy Back End Development Certification

The Learning Platform
This code is running live at freeCodeCamp.org.
Our community also has:

A forum where you can usually get programming help or project feedback within hours.
A YouTube channel with free courses on Python, SQL, Android, and a wide variety of other technologies.
A podcast with technology insights and inspiring stories from developers.
A Developer News publication, a free, open source, no-ads place to cross-post your blog articles.


Join our community here.

Reporting Bugs and Issues
If you think you've found a bug, first read the how to report a bug article and follow its instructions.
If you're confident it's a new bug and have confirmed that someone else is facing the same issue, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.
Reporting Security Issues
If you think you have found a vulnerability, please report responsibly. Don't create GitHub issues for security issues. Instead, please send an email to security@freecodecamp.org and we'll look into it immediately.
Contributing

Please follow these steps to contribute.

Platform, Build and Deployment Status
The general platform status for all our applications is available at status.freecodecamp.org. The build and deployment status for the code is available in our DevOps Guide.
License
Copyright © 2019 freeCodeCamp.org
The content of this repository is bound by the following licenses:

The computer software is licensed under the BSD-3-Clause license.
The learning resources in the /curriculum directory including their subdirectories thereon are licensed under the CC-BY-SA-4.0 license.


"
1,"
996.ICU
Please note that there exists NO other official account, app or merchandise except for the official domain and this repository.

中文版

The name 996.ICU refers to ""Work by '996', sick in ICU"", an ironic saying among Chinese developers, which means that by following the ""996"" work schedule, you are risking yourself getting into the ICU (Intensive Care Unit).




Related press coverage:

RadiiChina: GitHub Protest Over Chinese Tech Companies’ “996” Culture Goes Viral
Financial Times: China tech worker protest against long working hours goes viral
Wired: How github is helping overworked Chinese programmers

See a full list of press
What is 996?
A ""996"" work schedule refers to an unofficial work schedule (9 a.m.–9 p.m., 6 days per week) that has been gaining popularity. Serving a company that encourages the ""996"" work schedule usually means working for at least 60 hours per week.
Visit 996 working hour system on Wikipedia for more details.
What can I do?

Update this list with evidence to help every worker.  Third party perfect list channel
Add this badge to your project to support 996.ICU.
License your awesome projects with the Anti 996 License.
Add proposals to give advice about the development of 996.ICU.
Go home at 6 pm without feeling sorry.

Voices
State Media

The 996 shall disappear

Capitalists

Jack Ma, founder of Alibaba: It is a huge blessing to be able to '996'.
Richard Liu, founder of JD.com: We will never force our employee to work as '996'.
(However, as a result many anonymous employees claim that there is a list of departments which ranked them by overtime hours. The shortest will take punishments. And the leaders never leave evidences when asking employees to work as '996'.)
Bai Ya, founder of Youzan: This will definitely be a right decision when we look back in a few years.

Developers

Guido van Rossum, founder of Python: The '996' working schedule is inhumane.

Principles and purposes


996.ICU is an initiative initiated by IT practitioners. We welcome people from other fields and other countries to join the discussion.


This is not a political movement. We firmly uphold the labor law and request employers to respect the legitimate rights and interests of their employees.


It is great progress from closed source to open source, and it will also be great progress from open source to emphasizing labor rights at the same time. What we want is to create an open source software license that advocates workers' rights.


We are willing to hear all positive and constructive proposals and advocate mature and responsible speech.


Expanding influence
Please feel free to translate 996.ICU's contents, adjust the format, add some contents or fix grammatical errors. Please note that adding too many translations is getting off the track.
Community powers

955.WLB is a repo that maintains a whitelist of 955 work-life balanced companies.
996.LIST is a repo of a rank list of 996 companies and 955 companies.
996.law This is a manual for workers who want to conduct labor arbitration and litigation on their own.
996.YAOCL Yet Another Overtime Corps List, current another anonymous voting list.
996.Leave encourages & introduces working overseas.
996.RIP Old news never vanished.
996.Petition initiates petitions by sending open letters to relevant government departments.
996.action Supporters are encouraged to participate in public supervision.
996.avengers adds 996ICU and 955WLB tags on recruitment websites.
996.OD occupational diseases are the forewarning of ICU.
996.Q A repository to collect mocks, jokes, or gags about 996.
996.survey A survey of the status of 996.
support.996.ICU Microsoft and GitHub Workers Support 996.ICU
996.Blockchain Blockchain for the 996 evidence
996.Error Collect ""996"" exceptions written in various languages and can be used directly in the project.

Where are the issues?
Even with interaction limits on, the issues area was totally out of control.
So I personally decided to switch it off, not by GitHub or others.
License
Anti-996 License


The purpose of this license is to prevent anti-labour-law companies from using the software or codes under the license, and force those companies to weigh their way of working


See a full list of projects under Anti-996 License


This draft is adapted from the MIT license. For a more detailed explanation, please see Wiki. This license is designed to be compatible with all major open source licenses.


For law professionals or anyone who is willing to contribute to future version directly, please go to Anti-996-License-1.0. Thank you.


Contact
You can reach me by E-mail if you need.

"
2,"











Supporting Vue.js
Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers. If you'd like to join them, please consider:

Become a backer or sponsor on Patreon.
Become a backer or sponsor on Open Collective.
One-time donation via PayPal or crypto-currencies.

What's the difference between Patreon and OpenCollective?
Funds donated via Patreon go directly to support Evan You's full-time work on Vue.js. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events. Your name/logo will receive proper recognition and exposure by donating on either platform.
Special Sponsors





Platinum Sponsors


























Platinum Sponsors (China)











Gold Sponsors




































































































































































Sponsors via Open Collective
Platinum


Gold






Introduction
Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.
Browser Compatibility
Vue.js supports all browsers that are ES5-compliant (IE8 and below are not supported).
Ecosystem



Project
Status
Description




vue-router

Single-page application routing


vuex

Large-scale state management


vue-cli

Project scaffolding


vue-loader

Single File Component (*.vue file) loader for webpack


vue-server-renderer

Server-side rendering support


vue-class-component

TypeScript decorator for a class-based API


vue-rx

RxJS integration


vue-devtools

Browser DevTools extension



Documentation
To check out live examples and docs, visit vuejs.org.
Questions
For questions and support please use the official forum or community chat. The issue list of this repo is exclusively for bug reports and feature requests.
Issues
Please make sure to read the Issue Reporting Checklist before opening an issue. Issues not conforming to the guidelines may be closed immediately.
Changelog
Detailed changes for each release are documented in the release notes.
Stay In Touch

Twitter
Blog
Job Board

Contribution
Please make sure to read the Contributing Guide before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to this curated list!
Thank you to all the people who already contributed to Vue!

License
MIT
Copyright (c) 2013-present, Yuxi (Evan) You

"
3,"
React ·    
React is a JavaScript library for building user interfaces.

Declarative: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
Component-Based: Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.
Learn Once, Write Anywhere: We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.

Learn how to use React in your own project.
Installation
React has been designed for gradual adoption from the start, and you can use as little or as much React as you need:

Use Online Playgrounds to get a taste of React.
Add React to a Website as a <script> tag in one minute.
Create a New React App if you're looking for a powerful JavaScript toolchain.

You can use React as a <script> tag from a CDN, or as a react package on npm.
Documentation
You can find the React documentation on the website.
Check out the Getting Started page for a quick overview.
The documentation is divided into several sections:

Tutorial
Main Concepts
Advanced Guides
API Reference
Where to Get Support
Contributing Guide

You can improve it by sending pull requests to this repository.
Examples
We have several examples on the website. Here is the first one to get you started:
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}

ReactDOM.render(
  <HelloMessage name=""Taylor"" />,
  document.getElementById('container')
);
This example will render ""Hello Taylor"" into a container on the page.
You'll notice that we used an HTML-like syntax; we call it JSX. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. If you're using React as a <script> tag, read this section on integrating JSX; otherwise, the recommended JavaScript toolchains handle it automatically.
Contributing
The main purpose of this repository is to continue to evolve React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.
Code of Conduct
Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.
Contributing Guide
Read our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.
Good First Issues
To help you get your feet wet and get you familiar with our contribution process, we have a list of good first issues that contain bugs which have a relatively limited scope. This is a great place to get started.
License
React is MIT licensed.

"
4,"






Documentation








TensorFlow is an end-to-end open source platform
for machine learning. It has a comprehensive, flexible ecosystem of
tools,
libraries, and
community resources that lets
researchers push the state-of-the-art in ML and developers easily build and
deploy ML-powered applications.
TensorFlow was originally developed by researchers and engineers working on the
Google Brain team within Google's Machine Intelligence Research organization to
conduct machine learning and deep neural networks research. The system is
general enough to be applicable in a wide variety of other domains, as well.
TensorFlow provides stable Python
and C++ APIs, as well as
non-guaranteed backward compatible API for
other languages.
Keep up-to-date with release announcements and security updates by subscribing
to
announce@tensorflow.org.
See all the mailing lists.
Install
See the TensorFlow install guide for the
pip package, to
enable GPU support, use a
Docker container, and
build from source.
To install the current release for CPU-only:
$ pip install tensorflow

Use the GPU package for
CUDA-enabled GPU cards (Ubuntu and
Windows):
$ pip install tensorflow-gpu

Nightly binaries are available for testing using the
tf-nightly and
tf-nightly-gpu packages on PyPi.
Try your first TensorFlow program
$ python
>>> import tensorflow as tf
>>> tf.add(1, 2).numpy()
3
>>> hello = tf.constant('Hello, TensorFlow!')
>>> hello.numpy()
'Hello, TensorFlow!'
For more examples, see the
TensorFlow tutorials.
Contribution guidelines
If you want to contribute to TensorFlow, be sure to review the
contribution guidelines. This project adheres to TensorFlow's
code of conduct. By participating, you are expected to
uphold this code.
We use GitHub issues for
tracking requests and bugs, please see
TensorFlow Discuss
for general questions and discussion, and please direct specific questions to
Stack Overflow.
The TensorFlow project strives to abide by generally accepted best practices in
open-source software development:


Continuous build status
Official Builds



Build Type
Status
Artifacts




Linux CPU

PyPI


Linux GPU

PyPI


Linux XLA

TBA


macOS

PyPI


Windows CPU

PyPI


Windows GPU

PyPI


Android




Raspberry Pi 0 and 1
 
Py2 Py3


Raspberry Pi 2 and 3
 
Py2 Py3



Community Supported Builds



Build Type
Status
Artifacts




Linux AMD ROCm GPU Nightly

Nightly


Linux AMD ROCm GPU Stable Release

Release 1.15 / 2.x


Linux s390x Nightly

Nightly


Linux s390x CPU Stable Release

Release


Linux ppc64le CPU Nightly

Nightly


Linux ppc64le CPU Stable Release

Release 1.15 / 2.x


Linux ppc64le GPU Nightly

Nightly


Linux ppc64le GPU Stable Release

Release 1.15 / 2.x


Linux CPU with Intel® MKL-DNN Nightly

Nightly


Linux CPU with Intel® MKL-DNN Stable Release

Release 1.15 / 2.x


Red Hat® Enterprise Linux® 7.6 CPU & GPU  Python 2.7, 3.6

1.13.1 PyPI



Resources

TensorFlow.org
TensorFlow tutorials
TensorFlow official models
TensorFlow examples
TensorFlow in Practice from Coursera
Intro to TensorFlow for Deep Learning from Udacity
Introduction to TensorFlow Lite from Udacity
TensorFlow blog
TensorFlow Twitter
TensorFlow YouTube
TensorFlow roadmap
TensorFlow white papers
TensorBoard visualization toolkit

Learn more about the
TensorFlow community and how to
contribute.
License
Apache License 2.0

"
5,"





Bootstrap

  Sleek, intuitive, and powerful front-end framework for faster and easier web development.
  
Explore Bootstrap docs »


Report bug
  ·
  Request feature
  ·
  Themes
  ·
  Blog

Table of contents

Quick start
Status
What's included
Bugs and feature requests
Documentation
Contributing
Community
Versioning
Creators
Thanks
Copyright and license

Quick start
Several quick start options are available:

Download the latest release.
Clone the repo: git clone https://github.com/twbs/bootstrap.git
Install with npm: npm install bootstrap
Install with yarn: yarn add bootstrap@4.3.1
Install with Composer: composer require twbs/bootstrap:4.3.1
Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sass

Read the Getting started page for information on the framework contents, templates and examples, and more.
Status














What's included
Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this:
bootstrap/
└── dist/
    ├── css/
    │   ├── bootstrap-grid.css
    │   ├── bootstrap-grid.css.map
    │   ├── bootstrap-grid.min.css
    │   ├── bootstrap-grid.min.css.map
    │   ├── bootstrap-reboot.css
    │   ├── bootstrap-reboot.css.map
    │   ├── bootstrap-reboot.min.css
    │   ├── bootstrap-reboot.min.css.map
    │   ├── bootstrap-utilities.css
    │   ├── bootstrap-utilities.css.map
    │   ├── bootstrap-utilities.min.css
    │   ├── bootstrap-utilities.min.css.map
    │   ├── bootstrap.css
    │   ├── bootstrap.css.map
    │   ├── bootstrap.min.css
    │   └── bootstrap.min.css.map
    └── js/
        ├── bootstrap.bundle.js
        ├── bootstrap.bundle.js.map
        ├── bootstrap.bundle.min.js
        ├── bootstrap.bundle.min.js.map
        ├── bootstrap.esm.js
        ├── bootstrap.esm.js.map
        ├── bootstrap.esm.min.js
        ├── bootstrap.esm.min.js.map
        ├── bootstrap.js
        ├── bootstrap.js.map
        ├── bootstrap.min.js
        └── bootstrap.min.js.map

We provide compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). source maps (bootstrap.*.map) are available for use with certain browsers' developer tools. Bundled JS files (bootstrap.bundle.js and minified bootstrap.bundle.min.js) include Popper.
Bugs and feature requests
Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.
Documentation
Bootstrap's documentation, included in this repo in the root directory, is built with Hugo and publicly hosted on GitHub Pages at https://getbootstrap.com/. The docs may also be run locally.
Documentation search is powered by Algolia's DocSearch. Working on our search? Be sure to set debug: true in site/assets/js/src/search.js file.
Running documentation locally

Run npm install to install the Node.js dependencies, including Hugo (the site builder).
Run npm run test (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.
From the root /bootstrap directory, run npm run docs-serve in the command line.
Open http://localhost:9001/ in your browser, and voilà.

Learn more about using Hugo by reading its documentation.
Documentation for previous releases
You can find all our previous releases docs on https://getbootstrap.com/docs/versions/.
Previous releases and their documentation are also available for download.
Contributing
Please read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.
Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.
Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.
Community
Get updates on Bootstrap's development and chat with the project maintainers and community members.

Follow @getbootstrap on Twitter.
Read and subscribe to The Official Bootstrap Blog.
Join the official Slack room.
Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel.
Implementation help may be found at Stack Overflow (tagged bootstrap-4).
Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.

Versioning
For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines. Sometimes we screw up, but we adhere to those rules whenever possible.
See the Releases section of our GitHub project for changelogs for each release version of Bootstrap. Release announcement posts on the official Bootstrap blog contain summaries of the most noteworthy changes made in each release.
Creators
Mark Otto

https://twitter.com/mdo
https://github.com/mdo

Jacob Thornton

https://twitter.com/fat
https://github.com/fat

Thanks



Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!
Backers
Thank you to all our backers! 🙏 [Become a backer]

Sponsors
Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










Copyright and license
Code and documentation copyright 2011-2019 the Bootstrap Authors and Twitter, Inc. Code released under the MIT License. Docs released under Creative Commons.

"
6,"
This page is available as an easy-to-read website at https://ebookfoundation.github.io/.
List of Free Learning Resources 
View the English list
Intro
This list was originally a clone of stackoverflow - List of Freely Available Programming Books with contributions from Karan Bhangui and George Stocker.
The list was moved to GitHub by Victor Felder for collaborative updating and maintenance. It has grown to become one of the most popular repositories on Github, with over 100,000 stars, over 4500 commits, over 950 contributors, and over 25,000 forks.
The repo is now administered by the Free Ebook Foundation, a not-for-profit organization devoted to promoting the creation, distribution, archiving and sustainability of free ebooks. Donations to the Free Ebook Foundation are tax-deductible in the US.
How To Contribute
Please read CONTRIBUTING. If you're new to Github, welcome!
How to Share

Share on Twitter
Share on Facebook
Share on Google Plus
Share on LinkedIn
Share on Telegram

In Other Written Languages

Arabic
Azerbaijani
Bengali
Bulgarian
Burmese
Chinese
Czech
Dutch
English
French
German
Greek
Hungarian
Indonesian
Italian
Japanese
Korean
Persian/Farsi (Iran)
Polish
Portuguese (Brazil)
Portuguese (Portugal)
Romanian (Romania)
Russian
Slovak
Spanish
Swedish
Tamil
Turkish
Ukrainian

Free Online Courses

Bulgarian
English
Finnish
German
Italian
Korean
Polish
Portuguese (Brazil)
Russian
Spanish
Vietnamese

Interactive Programming Resources

English
Russian

Problem Sets and Competitive Programming

Problem Sets

Podcast - Screencast
Free Podcasts and Screencasts:

Czech
English
Portuguese (Brazil)
Russian
Swedish

Programming Playgrounds

Free Programming Playgrounds

License
Each file included in this repository is licensed under the CC BY License.

"
7,"







My open source work is supported by the community


Special thanks to:












What is an awesome list?   
	Contribution guide   
	Creating a list   
	Twitter   
	Stickers & t-shirts



Follow the Awesome Twitter account for updates on new list additions.



Just type awesome.re to go here. Check out my blog and follow me on Twitter.


Contents

Platforms
Programming Languages
Front-End Development
Back-End Development
Computer Science
Big Data
Theory
Books
Editors
Gaming
Development Environment
Entertainment
Databases
Media
Learn
Security
Content Management Systems
Hardware
Business
Work
Networking
Decentralized Systems
Higher Education
Miscellaneous
Related





Looking for a job?

			No resume needed. Just prove you can code.
			




Clicking this helps fund the Awesome project



Platforms

Node.js - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine.

Cross-Platform - Writing cross-platform code on Node.js.


Frontend Development
iOS - Mobile operating system for Apple phones and tablets.
Android - Mobile operating system developed by Google.
IoT & Hybrid Apps
Electron - Cross-platform native desktop apps using JavaScript/HTML/CSS.
Cordova - JavaScript API for hybrid apps.
React Native - JavaScript framework for writing natively rendering mobile apps for iOS and Android.
Xamarin - Mobile app development IDE, testing, and distribution.
Linux

Containers
eBPF - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems.
Arch-based Projects - Linux distributions and projects based on Arch Linux.


macOS - Operating system for Apple's Mac computers.

Command-Line
Screensavers
Apps
Open Source Apps


watchOS - Operating system for the Apple Watch.
JVM
Salesforce
Amazon Web Services
Windows
IPFS - P2P hypermedia protocol.
Fuse - Mobile development tools.
Heroku - Cloud platform as a service.
Raspberry Pi - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more.
Qt - Cross-platform GUI app framework.
WebExtensions - Cross-browser extension system.
RubyMotion - Write cross-platform native apps for iOS, Android, macOS, tvOS, and watchOS in Ruby.
Smart TV - Create apps for different TV platforms.
GNOME - Simple and distraction-free desktop environment for Linux.
KDE - A free software community dedicated to creating an open and user-friendly computing experience.
.NET

Core
Roslyn - Open-source compilers and code analysis APIs for C# and VB.NET languages.


Amazon Alexa - Virtual home assistant.
DigitalOcean - Cloud computing platform designed for developers.
Flutter - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart.
Home Assistant - Open source home automation that puts local control and privacy first.
IBM Cloud - Cloud platform for developers and companies.
Firebase - App development platform built on Google Cloud Platform.
Robot Operating System 2.0 - Set of software libraries and tools that help you build robot apps.
Adafruit IO - Visualize and store data from any device.
Cloudflare - CDN, DNS, DDoS protection, and security for your site.
Actions on Google - Developer platform for Google Assistant.

Programming Languages

JavaScript

Promises
Standard Style - Style guide and linter.
Must Watch Talks
Tips
Network Layer
Micro npm Packages
Mad Science npm Packages - Impossible sounding projects that exist.
Maintenance Modules - For npm packages.
npm - Package manager.
AVA - Test runner.
ESLint - Linter.
Functional Programming
Observables
npm scripts - Task runner.
30 Seconds of Code - Code snippets you can understand in 30 seconds.


Swift - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast.

Education
Playgrounds


Python - General-purpose programming language designed for readability.

Asyncio - Asynchronous I/O in Python 3.
Scientific Audio - Scientific research in audio/music.
CircuitPython - A version of Python for microcontrollers.
Data Science - Data analysis and machine learning.
Typing - Optional static typing for Python.


Rust
Haskell
PureScript
Go
Scala

Scala Native - Optimizing ahead-of-time compiler for Scala based on LLVM.


Ruby
Clojure
ClojureScript
Elixir
Elm
Erlang
Julia
Lua
C
C/C++ - General-purpose language with a bias toward system programming and embedded, resource-constrained software.
R
D
Common Lisp
Perl
Groovy
Dart
Java - Popular secure object-oriented language designed for flexibility to ""write once, run anywhere"".

RxJava


Kotlin
OCaml
ColdFusion
Fortran
PHP - Server-side scripting language.

Composer - Package manager.


Pascal
Assembler
AutoHotkey
AutoIt
Crystal
Frege - Haskell for the JVM.
CMake - Build, test, and package software.
ActionScript 3 - Object-oriented language targeting Adobe AIR.
Eta - Functional programming language for the JVM.
Idris - General purpose pure functional programming language with dependent types influenced by Haskell and ML.
Ada/SPARK - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential.
Q# - Domain-specific programming language used for expressing quantum algorithms.
Imba - Programming language inspired by Ruby and Python and compiles to performant JavaScript.
Vala - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code.

Front-End Development

ES6 Tools
Web Performance Optimization
Web Tools
CSS - Style sheet language that specifies how HTML elements are displayed on screen.

Critical-Path Tools
Scalability
Must-Watch Talks
Protips
Frameworks


React - App framework.

Relay - Framework for building data-driven React apps.
React Hooks - A new feature that lets you use state and other React features without writing a class.


Web Components
Polymer - JavaScript library to develop Web Components.
Angular - App framework.
Backbone - App framework.
HTML5 - Markup language used for websites & web apps.
SVG - XML-based vector image format.
Canvas
KnockoutJS - JavaScript library.
Dojo Toolkit - JavaScript toolkit.
Inspiration
Ember - App framework.
Android UI
iOS UI
Meteor
BEM
Flexbox
Web Typography
Web Accessibility
Material Design
D3 - Library for producing dynamic, interactive data visualizations.
Emails
jQuery - Easy to use JavaScript library for DOM manipulation.

Tips


Web Audio
Offline-First
Static Website Services
Cycle.js - Functional and reactive JavaScript framework.
Text Editing
Motion UI Design
Vue.js - App framework.
Marionette.js - App framework.
Aurelia - App framework.
Charting
Ionic Framework 2
Chrome DevTools
PostCSS - CSS tool.
Draft.js - Rich text editor framework for React.
Service Workers
Progressive Web Apps
choo - App framework.
Redux - State container for JavaScript apps.
webpack - Module bundler.
Browserify - Module bundler.
Sass - CSS preprocessor.
Ant Design - Enterprise-class UI design language.
Less - CSS preprocessor.
WebGL - JavaScript API for rendering 3D graphics.
Preact - App framework.
Progressive Enhancement
Next.js - Framework for server-rendered React apps.
Hyperapp - Tiny JavaScript library for building web apps.
lit-html - HTML templating library for JavaScript.
JAMstack - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup.
WordPress-Gatsby - Web development technology stack with WordPress as a back end and Gatsby as a front end.
Mobile Web Development - Creating a great mobile web experience.
Storybook - Development environment for UI components.
Blazor - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly.
Web Performance Metrics - Metrics to help understand page speed and user experience.
Tailwind CSS - Utility-first CSS framework for rapid UI development.

Back-End Development

Flask - Python framework.
Docker
Vagrant - Automation virtual machine environment.
Pyramid - Python framework.
Play1 Framework
CakePHP - PHP framework.
Symfony - PHP framework.

Education


Laravel - PHP framework.

Education


Rails - Web app framework for Ruby.

Gems - Packages.


Phalcon - PHP framework.
Useful .htaccess Snippets
nginx - Web server.
Dropwizard - Java framework.
Kubernetes - Open-source platform that automates Linux container operations.
Lumen - PHP micro-framework.
Serverless Framework - Serverless computing and serverless architectures.
Apache Wicket - Java web app framework.
Vert.x - Toolkit for building reactive apps on the JVM.
Terraform - Tool for building, changing, and versioning infrastructure.
Vapor - Server-side development in Swift.
Dash - Python web app framework.

Computer Science

University Courses
Data Science

Tutorials


Machine Learning

Tutorials
ML with Ruby - Learning, implementing, and applying Machine Learning using Ruby.
Core ML Models - Models for Apple's machine learning framework.
H2O - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala.


Speech and Natural Language Processing

Spanish
NLP with Ruby
Question Answering - The science of asking and answering in natural language with a machine.


Linguistics
Cryptography

Papers - Theory basics for using cryptography by non-cryptographers.


Computer Vision
Deep Learning - Neural networks.

TensorFlow - Library for machine intelligence.
Papers - The most cited deep learning papers.
Education


Deep Vision
Open Source Society University
Functional Programming
Empirical Software Engineering - Evidence-based research on software systems.
Static Analysis & Code Quality
Information Retrieval - Learn to develop your own search engine.
Quantum Computing - Computing which utilizes quantum mechanics and qubits on quantum computers.

Big Data

Big Data
Public Datasets
Hadoop - Framework for distributed storage and processing of very large data sets.
Data Engineering
Streaming
Apache Spark - Unified engine for large-scale data processing.
Qlik - Business intelligence platform for data visualization, analytics, and reporting apps.

Theory

Papers We Love
Talks
Algorithms

Education - Learning and practicing.


Algorithm Visualizations
Artificial Intelligence
Search Engine Optimization
Competitive Programming
Math
Recursion Schemes - Traversing nested data structures.

Books

Free Programming Books
Free Software Testing Books
Go Books
R Books
Mind Expanding Books
Book Authoring
Elixir Books

Editors

Sublime Text
Vim
Emacs
Atom - Open-source and hackable text editor.
Visual Studio Code - Cross-platform open-source text editor.

Gaming

Game Development
Game Networking - Network programming for multiplayer online games.
Game Talks
Godot - Game engine.
Open Source Games
Unity - Game engine.
Chess
LÖVE - Game engine.
PICO-8 - Fantasy console.
Game Boy Development
Construct 2 - Game engine.
Gideros - Game engine.
Minecraft - Sandbox video game.
Game Datasets - Materials and datasets for Artificial Intelligence in games.
Haxe Game Development - A high-level strongly typed programming language used to produce cross-platform native code.
libGDX - Java game framework.
PlayCanvas - Game engine.

Development Environment

Quick Look Plugins - For macOS.
Dev Env
Dotfiles
Shell
Fish - User-friendly shell.
Command-Line Apps
ZSH Plugins
GitHub - Hosting service for Git repositories.

Browser Extensions
Cheat Sheet
Pinned Gists - Dynamic pinned gists for your GitHub profile.


Git Cheat Sheet & Git Flow
Git Tips
Git Add-ons - Enhance the git CLI.
Git Hooks - Scripts for automating tasks during git workflows.
SSH
FOSS for Developers
Hyper - Cross-platform terminal app built on web technologies.
PowerShell - Cross-platform object-oriented shell.
Alfred Workflows - Productivity app for macOS.
Terminals Are Sexy

Entertainment

Science Fiction - Scifi.
Fantasy
Podcasts
Email Newsletters
IT Quotes

Databases

Database
MySQL
SQLAlchemy
InfluxDB
Neo4j
MongoDB - NoSQL database.
RethinkDB
TinkerPop - Graph computing framework.
PostgreSQL - Object-relational database.
CouchDB - Document-oriented NoSQL database.
HBase - Distributed, scalable, big data store.
NoSQL Guides - Help on using non-relational, distributed, open-source, and horizontally scalable databases.

Media

Creative Commons Media
Fonts
Codeface - Text editor fonts.
Stock Resources
GIF - Image format known for animated images.
Music
Open Source Documents
Audio Visualization
Broadcasting
Pixel Art - Pixel-level digital art.
FFmpeg - Cross-platform solution to record, convert and stream audio and video.
Icons - Downloadable SVG/PNG/font icon projects.

Learn

CLI Workshoppers - Interactive tutorials.
Learn to Program
Speaking
Tech Videos
Dive into Machine Learning
Computer History
Programming for Kids
Educational Games - Learn while playing.
JavaScript Learning
CSS Learning - Mainly about CSS – the language and the modules.
Product Management - Learn how to be a better product manager.
Roadmaps - Gives you a clear route to improve your knowledge and skills.

Security

Application Security
Security
CTF - Capture The Flag.
Malware Analysis
Android Security
Hacking
Honeypots - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization.
Incident Response
Vehicle Security and Car Hacking
Web Security - Security of web apps & services.
Lockpicking - The art of unlocking a lock by manipulating its components without the key.
Cybersecurity Blue Team - Groups of individuals who identify security flaws in information technology systems.
Fuzzing - Automated software testing technique that involves feeding pseudo-randomly generated input data.
Embedded and IoT Security
GDPR - Regulation on data protection and privacy for all individuals within EU.

Content Management Systems

Umbraco
Refinery CMS - Ruby on Rails CMS.
Wagtail - Django CMS focused on flexibility and user experience.
Textpattern - Lightweight PHP-based CMS.
Drupal - Extensible PHP-based CMS.
Craft CMS - Content-first CMS.

Hardware

Robotics
Internet of Things
Electronics - For electronic engineers and hobbyists.
Bluetooth Beacons
Electric Guitar Specifications - Checklist for building your own electric guitar.

Business

Open Companies
Places to Post Your Startup
OKR Methodology - Goal setting & communication best practices.
Leading and Managing - Leading people and being a manager in a technology company/environment.
Indie - Independent developer businesses.
Tools of the Trade - Tools used by companies on Hacker News.
Clean Tech - Fighting climate change with technology.
Wardley Maps - Provides high situational awareness to help improve strategic planning and decision making.

Work

Slack - Team collaboration.

Communities


Remote Jobs
Productivity
Niche Job Boards
Programming Interviews
Code Review - Reviewing code.

Networking

Software-Defined Networking
Network Analysis
PCAPTools

Decentralized Systems

Bitcoin - Bitcoin services and tools for software developers.
Ripple - Open source distributed settlement network.
Non-Financial Blockchain - Non-financial blockchain applications.
Mastodon - Open source decentralized microblogging network.
Ethereum - Distributed computing platform for smart contract development.
Blockchain AI - Blockchain projects for artificial intelligence and machine learning.
EOSIO - A decentralized operating system supporting industrial-scale apps.

Higher Education

Computational Neuroscience - A multidisciplinary science which uses computational approaches to study the nervous system.
Digital History - Computer-aided scientific investigation of history.

Miscellaneous

JSON - Text based data interchange format.

GeoJSON
Datasets


CSV - A text file format that stores tabular data and uses a comma to separate values.
Discounts for Student Developers
Sysadmin
Radio
Awesome - Recursion illustrated.
Analytics
REST
Selenium
Appium - Test automation tool for apps.
Continuous Integration and Continuous Delivery
Services Engineering
Free for Developers
Answers - Stack Overflow, Quora, etc.
Sketch - Design app for macOS.
Boilerplate Projects
Readme
Design and Development Guides
Software Engineering Blogs
Self Hosted
FOSS Production Apps
Gulp - Task runner.
AMA - Ask Me Anything.

Answers


Open Source Photography
OpenGL - Cross-platform API for rendering 2D and 3D graphics.
GraphQL
Transit
Research Tools
Data Visualization
Social Media Share Links
Microservices
Unicode - Unicode standards, quirks, packages and resources.

Code Points


Beginner-Friendly Projects
Katas
Tools for Activism
Citizen Science - For community-based and non-institutional scientists.
TAP - Test Anything Protocol.
MQTT - ""Internet of Things"" connectivity protocol.
Hacking Spots
For Girls
Vorpal - Node.js CLI framework.
Vulkan - Low-overhead, cross-platform 3D graphics and compute API.
LaTeX - Typesetting language.
Economics - An economist's starter kit.
Funny Markov Chains
Bioinformatics
Cheminformatics - Informatics techniques applied to problems in chemistry.
Colorful - Choose your next color scheme.
Steam - Digital distribution platform.
Bots - Building bots.
Site Reliability Engineering
Empathy in Engineering - Building and promoting more compassionate engineering cultures.
DTrace - Dynamic tracing framework.
Userscripts - Enhance your browsing experience.
Pokémon - Pokémon and Pokémon GO.
ChatOps - Managing technical and business operations through a chat.
Falsehood - Falsehoods programmers believe in.
Domain-Driven Design - Software development approach for complex needs by connecting the implementation to an evolving model.
Quantified Self - Self-tracking through technology.
SaltStack - Python-based config management system.
Web Design - For digital designers.
JMeter - Load testing and performance measurement tool.
Creative Coding - Programming something expressive instead of something functional.
No-Login Web Apps - Web apps that work without login.
Testing - Software testing.
Free Software - Free as in freedom.
Framer - Prototyping interactive UI designs.
Markdown - Markup language.
Dev Fun - Funny developer projects.
Events in Italy - Tech-related events in Italy.
Events in the Netherlands - Tech-related events in the Netherlands.
Healthcare - Open source healthcare software for facilities, providers, developers, policy experts, and researchers.
Magento 2 - Open Source eCommerce built with PHP.
TikZ - Graph drawing packages for TeX/LaTeX/ConTeXt.
Neuroscience - Study of the nervous system and brain.
Ad-Free - Ad-free alternatives.
Esolangs - Programming languages designed for experimentation or as jokes rather than actual use.
Prometheus - Open-source monitoring system.
Homematic - Smart home devices.
Ledger - Double-entry accounting on the command-line.
Uncopyright - Public domain works.
Crypto Currency Tools & Algorithms - Digital currency where encryption is used to regulate the generation of units and verify transfers.
Diversity - Creating a more inclusive and diverse tech community.
Open Source Supporters - Companies that offer their tools and services for free to open source projects.
Design Principles - Create better and more consistent designs and experiences.
Visual Regression Testing - Ensures changes did not break the functionality or style.
Theravada - Teachings from the Theravada Buddhist tradition.
inspectIT - Open source Java app performance management tool.
Open Source Maintainers - The experience of being an open source maintainer.
Calculators - Calculators for every platform.
Captcha - A type of challenge–response test used in computing to determine whether or not the user is human.
Jupyter - Create and share documents that contain code, equations, visualizations and narrative text.
FIRST Robotics Competition - International high school robotics championship.
Humane Technology - Open source projects that help improve society.
Speakers - Conference and meetup speakers in the programming and design community.
Board Games - Table-top gaming fun for all.
Software Patreons - Fund individual programmers or the development of open source projects.
Parasite - Parasites and host-pathogen interactions.
Food - Food-related projects on GitHub.
Mental Health - Mental health awareness and self-care in the software industry.
Bitcoin Payment Processors - Start accepting Bitcoin.
Scientific Computing - Solving complex scientific problems using computers.
Amazon Sellers
Agriculture - Open source technology for farming and gardening.
Plotters - Computer-controlled drawing machines and other visual art robots.
Product Design - Design a product from the initial concept to production.
Prisma - Turn your database into a GraphQL API.
Software Architecture - The discipline of designing and building software.
Connectivity Data and Reports - Better understand who has access to telecommunication and internet infrastructure and on what terms.
Stacks - Tech stacks for building different apps and features.
Cytodata - Image-based profiling of biological phenotypes for computational biologists.
IRC - Open source messaging protocol.
Advertising - Advertising and programmatic media for websites.
Earth - Find ways to resolve the climate crisis.
Naming - Naming things in computer science done right.
Biomedical Information Extraction - How to extract information from unstructured biomedical data and text.

Related

Awesome Indexed - Search the Awesome dataset.
Awesome Search - Quick search for Awesome lists.


"
8,"
You Don't Know JS Yet (book series) - 2nd Edition
This is a series of books diving deep into the core mechanisms of the JavaScript language.
To read more about the motivations and perspective behind this book series, check out the Preface.
Premier Sponsor
This edition of the YDKJS book series is exclusively sponsored by Frontend Masters.
Frontend Masters is the gold standard for top-of-the-line expert training material in frontend-oriented software development. With over 150 courses on all things frontend, this should be your first and only stop for quality video training on HTML, CSS, JS, and related technologies.

I teach all my workshops exclusively through Frontend Masters. If you like this book content, please check out my video training courses.
I want to extend a warm and deep thanks to Marc Grabanski and the entire Frontend Masters team, not only for their excellent work with the video training platform, but for their unwavering support of me and of the ""You Don't Know JS"" books!

Titles
I recommend reading the books in this order:

Get Started
Scope & Closures
Objects & Classes
Types & Grammar
Sync & Async
ES.Next & Beyond

Publishing
As always, you'll be able to read these books online here entirely for free.
This edition of the books is being self-published through GetiPub publishing. The published books will be made available for sale through normal book retail sources.
If you'd like to contribute financially towards the effort (or any of my other OSS efforts) aside from purchasing the published books, please consider these options:

Github Sponsorship
Patreon
Paypal

Contributions
Please feel free to contribute to the quality of this content by submitting PRs for improvements to code snippets, explanations, etc. While typo fixes are welcomed, they will likely be caught through normal editing/publishing processes, so please don't worry about them right now.
Any contributions you make to this effort are of course greatly appreciated.
But PLEASE read the Contributions Guidelines carefully before submitting a PR.
License & Copyright
The materials herein are all © 2019-2020 Kyle Simpson.
This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 Unported License.

"
9,"





Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.
Sounds boring. Let's try again.
Oh My Zsh will not make you a 10x developer...but you may feel like one.
Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you'll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, ""that is amazing! are you some sort of genius?""
Finally, you'll begin to get the sort of attention that you have always felt you deserved. ...or maybe you'll use the time that you're saving to start flossing more often. 😬
To learn more, visit ohmyz.sh and follow @ohmyzsh on Twitter.
Getting Started
Prerequisites

A Unix-like operating system: macOS, Linux, BSD. On Windows: WSL is preferred, but cygwin or msys also mostly work.
Zsh should be installed (v4.3.9 or more recent). If not pre-installed (run zsh --version to confirm), check the following instructions here: Installing ZSH
curl or wget should be installed
git should be installed

Basic Installation
Oh My Zsh is installed by running one of the following commands in your terminal. You can install this via the command-line with either curl or wget.
via curl
sh -c ""$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)""
via wget
sh -c ""$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)""
Manual inspection
It's a good idea to inspect the install script from projects you don't yet know. You can do
that by downloading the install script first, looking through it so everything looks normal,
then running it:
curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
sh install.sh
Using Oh My Zsh
Plugins
Oh My Zsh comes with a shitload of plugins to take advantage of. You can take a look in the plugins directory and/or the wiki to see what's currently available.
Enabling Plugins
Once you spot a plugin (or several) that you'd like to use with Oh My Zsh, you'll need to enable them in the .zshrc file. You'll find the zshrc file in your $HOME directory. Open it with your favorite text editor and you'll see a spot to list all the plugins you want to load.
vi ~/.zshrc
For example, this might begin to look like this:
plugins=(
  git
  bundler
  dotenv
  osx
  rake
  rbenv
  ruby
)
Note that the plugins are separated by whitespace. Do not use commas between them.
Using Plugins
Most plugins (should! we're working on this) include a README, which documents how to use them.
Themes
We'll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have screenshots on the wiki. Check them out!
Selecting a Theme
Robby's theme is the default one. It's not the fanciest one. It's not the simplest one. It's just the right one (for him).
Once you find a theme that you'd like to use, you will need to edit the ~/.zshrc file. You'll see an environment variable (all caps) in there that looks like:
ZSH_THEME=""robbyrussell""
To use a different theme, simply change the value to match the name of your desired theme. For example:
ZSH_THEME=""agnoster"" # (this is one of the fancy ones)
# see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster
Note: many themes require installing the Powerline Fonts in order to render properly.
Open up a new terminal window and your prompt should look something like this:

In case you did not find a suitable theme for your needs, please have a look at the wiki for more of them.
If you're feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.
ZSH_THEME=""random"" # (...please let it be pie... please be some pie..)
And if you want to pick random theme from a list of your favorite themes:
ZSH_THEME_RANDOM_CANDIDATES=(
  ""robbyrussell""
  ""agnoster""
)
FAQ
If you have some more questions or issues, you might find a solution in our FAQ.
Advanced Topics
If you're the type that likes to get their hands dirty, these sections might resonate.
Advanced Installation
Some users may want to manually install Oh My Zsh, or change the default path or other settings that
the installer accepts (these settings are also documented at the top of the install script).
Custom Directory
The default location is ~/.oh-my-zsh (hidden in your home directory)
If you'd like to change the install directory with the ZSH environment variable, either by running
export ZSH=/your/path before installing, or by setting it before the end of the install pipeline
like this:
ZSH=""$HOME/.dotfiles/oh-my-zsh"" sh install.sh
Unattended install
If you're running the Oh My Zsh install script as part of an automated install, you can pass the
flag --unattended to the install.sh script. This will have the effect of not trying to change
the default shell, and also won't run zsh when the installation has finished.
sh -c ""$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"" """" --unattended
Installing from a forked repository
The install script also accepts these variables to allow installation of a different repository:


REPO (default: ohmyzsh/ohmyzsh): this takes the form of owner/repository. If you set
this variable, the installer will look for a repository at https://github.com/{owner}/{repository}.


REMOTE (default: https://github.com/${REPO}.git): this is the full URL of the git repository
clone. You can use this setting if you want to install from a fork that is not on GitHub (GitLab,
Bitbucket...) or if you want to clone with SSH instead of HTTPS (git@github.com:user/project.git).
NOTE: it's incompatible with setting the REPO variable. This setting will take precedence.


BRANCH (default: master): you can use this setting if you want to change the default branch to be
checked out when cloning the repository. This might be useful for testing a Pull Request, or if you
want to use a branch other than master.


For example:
REPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh
Manual Installation
1. Clone the repository:
git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
2. Optionally, backup your existing ~/.zshrc file:
cp ~/.zshrc ~/.zshrc.orig
3. Create a new zsh configuration file
You can create a new zsh config file by copying the template that we have included for you.
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
4. Change your default shell
chsh -s $(which zsh)
You must log out from your user session and log back in to see this change.
5. Initialize your new zsh configuration
Once you open up a new terminal window, it should load zsh with Oh My Zsh's configuration.
Installation Problems
If you have any hiccups installing, here are a few common fixes.

You might need to modify your PATH in ~/.zshrc if you're not able to find some commands after
switching to oh-my-zsh.
If you installed manually or changed the install location, check the ZSH environment variable in
~/.zshrc.

Custom Plugins and Themes
If you want to override any of the default behaviors, just add a new file (ending in .zsh) in the custom/ directory.
If you have many functions that go well together, you can put them as a XYZ.plugin.zsh file in the custom/plugins/ directory and then enable this plugin.
If you would like to override the functionality of a plugin distributed with Oh My Zsh, create a plugin of the same name in the custom/plugins/ directory and it will be loaded instead of the one in plugins/.
Getting Updates
By default, you will be prompted to check for upgrades every few weeks. If you would like oh-my-zsh to automatically upgrade itself without prompting you, set the following in your ~/.zshrc:
DISABLE_UPDATE_PROMPT=true
To disable automatic upgrades, set the following in your ~/.zshrc:
DISABLE_AUTO_UPDATE=true
Manual Updates
If you'd like to upgrade at any point in time (maybe someone just released a new plugin and you don't want to wait a week?) you just need to run:
upgrade_oh_my_zsh
Magic! 🎉
Uninstalling Oh My Zsh
Oh My Zsh isn't for everyone. We'll miss you, but we want to make this an easy breakup.
If you want to uninstall oh-my-zsh, just run uninstall_oh_my_zsh from the command-line. It will remove itself and revert your previous bash or zsh configuration.
How do I contribute to Oh My Zsh?
Before you participate in our delightful community, please read the code of conduct.
I'm far from being a Zsh expert and suspect there are many ways to improve – if you have ideas on how to make the configuration easier to maintain (and faster), don't hesitate to fork and send pull requests!
We also need people to test out pull-requests. So take a look through the open issues and help where you can.
See Contributing for more details.
Do NOT send us themes
We have (more than) enough themes for the time being. Please add your theme to the external themes wiki page.
Contributors
Oh My Zsh has a vibrant community of happy users and delightful contributors. Without all the time and help from our contributors, it wouldn't be so awesome.
Thank you so much!
Follow Us
We're on the social media.

@ohmyzsh on Twitter. You should follow it.
Oh My Zsh on Facebook.

Merchandise
We have stickers, shirts, and coffee mugs available for you to show off your love of Oh My Zsh. Again, you will become the talk of the town!
License
Oh My Zsh is released under the MIT license.
About Planet Argon

Oh My Zsh was started by the team at Planet Argon, a Ruby on Rails development agency. Check out our other open source projects.

"
10,"
Coding Interview University

I originally created this as a short to-do list of study topics for becoming a software engineer,
but it grew to the large list you see today. After going through this study plan, I got hired
as a Software Development Engineer at Amazon!
You probably won't have to study as much as I did. Anyway, everything you need is here.
I studied about 8-12 hours a day, for several months. This is my story: Why I studied full-time for 8 months for a Google interview
The items listed here will prepare you well for an interview at just about any software company,
including the giants: Amazon, Facebook, Google or Microsoft.
Best of luck to you!


Translations:

中文版本
Tiếng Việt - Vietnamese
Español
Português Brasileiro



Translations in progress:

हिन्दी
עברית
Bahasa Indonesia
Arabic
Turkish
French
Russian
Ukrainian
Korean(한국어)
Telugu
Polish
Urdu
Thai
Greek
Italian
Malayalam
Japanese (日本語)


What is it?
This is my multi-month study plan for going from web developer (self-taught, no CS degree) to software engineer for a large company.

This is meant for new software engineers or those switching from
software/web development to software engineering (where computer science knowledge is required). If you have
many years of experience and are claiming many years of software engineering experience, expect a harder interview.
If you have many years of software/web development experience, note that large software companies like Google, Amazon,
Facebook and Microsoft view software engineering as different from software/web development, and they require computer science knowledge.
If you want to be a reliability engineer or operations engineer, study more from the optional list (networking, security).

Table of Contents

What is it?
Why use it?
How to use it
Don't feel you aren't smart enough
About Video Resources
Interview Process & General Interview Prep
Pick One Language for the Interview
Book List
Before you Get Started
What you Won't See Covered
Prerequisite Knowledge
The Daily Plan
Algorithmic complexity / Big-O / Asymptotic analysis
Data Structures

Arrays
Linked Lists
Stack
Queue
Hash table


More Knowledge

Binary search
Bitwise operations


Trees

Trees - Notes & Background
Binary search trees: BSTs
Heap / Priority Queue / Binary Heap
balanced search trees (general concept, not details)
traversals: preorder, inorder, postorder, BFS, DFS


Sorting

selection
insertion
heapsort
quicksort
merge sort


Graphs

directed
undirected
adjacency matrix
adjacency list
traversals: BFS, DFS


Even More Knowledge

Recursion
Dynamic Programming
Object-Oriented Programming
Design Patterns
Combinatorics (n choose k) & Probability
NP, NP-Complete and Approximation Algorithms
Caches
Processes and Threads
Testing
Scheduling
String searching & manipulations
Tries
Floating Point Numbers
Unicode
Endianness
Networking


System Design, Scalability, Data Handling (if you have 4+ years experience)
Final Review
Coding Question Practice
Coding exercises/challenges
Once you're closer to the interview
Your Resume
Be thinking of for when the interview comes
Have questions for the interviewer
Once You've Got The Job

---------------- Everything below this point is optional ----------------

Additional Resources

Additional Books
Additional Learning

Compilers
Emacs and vi(m)
Unix command line tools
Information theory
Parity & Hamming Code
Entropy
Cryptography
Compression
Computer Security
Garbage collection
Parallel Programming
Messaging, Serialization, and Queueing Systems
A*
Fast Fourier Transform
Bloom Filter
HyperLogLog
Locality-Sensitive Hashing
van Emde Boas Trees
Augmented Data Structures
Balanced search trees

AVL trees
Splay trees
Red/black trees
2-3 search trees
2-3-4 Trees (aka 2-4 trees)
N-ary (K-ary, M-ary) trees
B-Trees


k-D Trees
Skip lists
Network Flows
Disjoint Sets & Union Find
Math for Fast Processing
Treap
Linear Programming
Geometry, Convex hull
Discrete math
Machine Learning


Additional Detail on Some Subjects
Video Series
Computer Science Courses
Papers



Why use it?
When I started this project, I didn't know a stack from a heap, didn't know Big-O anything, anything about trees, or how to
traverse a graph. If I had to code a sorting algorithm, I can tell ya it wouldn't have been very good.
Every data structure I've ever used was built into the language, and I didn't know how they worked
under the hood at all. I've never had to manage memory unless a process I was running would give an ""out of
memory"" error, and then I'd have to find a workaround. I've used a few multidimensional arrays in my life and
thousands of associative arrays, but I've never created data structures from scratch.
It's a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.
How to use it

How to use it
Everything below is an outline, and you should tackle the items in order from top to bottom.
I'm using Github's special markdown flavor, including tasks lists to check progress.
Create a new branch so you can check items like this, just put an x in the brackets: [x]
Fork a branch and follow the commands below

git checkout -b progress
git remote add jwasham https://github.com/jwasham/coding-interview-university
git fetch --all
Mark all boxes with X after you completed your changes

git add .
git commit -m ""Marked x""
git rebase jwasham/master
git push --force
More about Github-flavored markdown

Don't feel you aren't smart enough

Successful software engineers are smart, but many have an insecurity that they aren't smart enough.
The myth of the Genius Programmer
It's Dangerous to Go Alone: Battling the Invisible Monsters in Tech
Believe you can change
Think you're not smart enough to work at Google? Well, think again

About Video Resources
Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.
Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.
I'd appreciate your help to add free and always-available public sources, such as YouTube videos to accompany the online course videos.
I like using university lectures.

Interview Process & General Interview Prep

Interview Process & General Interview Prep


 ABC: Always Be Coding


 Whiteboarding


 Effective Whiteboarding during Programming Interviews


 Demystifying Tech Recruiting


 Cracking The Coding Interview Set 1:

 Gayle L McDowell - Cracking The Coding Interview (video)
 Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)



 How to Get a Job at the Big 4:

 How to Get a Job at the Big 4 - Amazon, Facebook, Google & Microsoft (video)



 Prep Course:

 Software Engineer Interview Unleashed (paid course):

Learn how to make yourself ready for software engineer interviews from a former Google interviewer.


 Python for Data Structures, Algorithms, and Interviews! (paid course):

A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.


 Intro to Data Structures and Algorithms using Python! (Udacity free course):

A free Python centric data structures and algorithms course.


 Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree):

Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.






Pick One Language for the Interview
You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:

C++
Java
Python

You could also use these, but read around first. There may be caveats:

JavaScript
Ruby

Here is an article I wrote about choosing a language for the interview: Pick One Language for the Coding Interview
You need to be very comfortable in the language and be knowledgeable.
Read more about choices:

http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/
http://blog.codingforinterviews.com/best-programming-language-jobs/

See language resources here
You'll see some C, C++, and Python learning included below, because I'm learning. There are a few books involved, see the bottom.
Book List
This is a shorter list than what I used. This is abbreviated to save you time.
Interview Prep

 Programming Interviews Exposed: Coding Your Way Through the Interview, 4nd Edition

answers in C++ and Java
this is a good warm-up for Cracking the Coding Interview
not too difficult, most problems may be easier than what you'll see in an interview (from what I've read)


 Cracking the Coding Interview, 6th Edition

answers in Java




If you have tons of extra time:
Choose one:

 Elements of Programming Interviews (C++ version)
 Elements of Programming Interviews (Java version)

book
Companion Project - Method Stub and Test Cases for Every Problem in the Book




Computer Architecture

 Write Great Code: Volume 1: Understanding the Machine


The book was published in 2004, and is somewhat outdated, but it's a terrific resource for understanding a computer in brief.


The author invented HLA, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like.


These chapters are worth the read to give you a nice foundation:

......

Chapter 2 - Numeric Representation
Chapter 3 - Binary Arithmetic and Bit Operations
Chapter 4 - Floating-Point Representation
Chapter 5 - Character Representation
Chapter 6 - Memory Organization and Access
Chapter 7 - Composite Data Types and Memory Objects
Chapter 9 - CPU Architecture
Chapter 10 - Instruction Set Architecture
Chapter 11 - Memory Architecture and Organization






Language Specific
You need to choose a language for the interview (see above).
Here are my recommendations by language. I don't have resources for all languages. I welcome additions.
If you read through one of these, you should have all the data structures and algorithms knowledge you'll need to start doing coding problems.
You can skip all the video lectures in this project, unless you'd like a review.
Additional language-specific resources here.
C++

C++
I haven't read these two, but they are highly rated and written by Sedgewick. He's awesome.

 Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching
 Algorithms in C++ Part 5: Graph Algorithms

If you have a better recommendation for C++, please let me know. Looking for a comprehensive resource.

Java

Java

 Algorithms (Sedgewick and Wayne)

videos with book content (and Sedgewick!) on coursera:

Algorithms I
Algorithms II





OR:

 Data Structures and Algorithms in Java

by Goodrich, Tamassia, Goldwasser
used as optional text for CS intro course at UC Berkeley
see my book report on the Python version below. This book covers the same topics.




Python

Python

 Data Structures and Algorithms in Python

by Goodrich, Tamassia, Goldwasser
I loved this book. It covered everything and more.
Pythonic code
my glowing book report: https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/




Before you Get Started
This list grew over many months, and yes, it kind of got out of hand.
Here are some mistakes I made so you'll have a better experience.
1. You Won't Remember it All
I watched hours of videos and took copious notes, and months later there was much I didn't remember. I spent 3 days going
through my notes and making flashcards so I could review.
Read please so you won't make my mistakes:
Retaining Computer Science Knowledge
2. Use Flashcards
To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.
Each card has different formatting.
I made a mobile-first website so I could review on my phone and tablet, wherever I am.
Make your own for free:

Flashcards site repo
My flash cards database (old - 1200 cards):
My flash cards database (new - 1800 cards):

Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics. It's way too much for what's required.
Note on flashcards: The first time you recognize you know the answer, don't mark it as known. You have to see the
same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in
your brain.
An alternative to using my flashcard site is Anki, which has been recommended to me numerous times. It uses a repetition system to help you remember.
It's user-friendly, available on all platforms and has a cloud sync system. It costs $25 on iOS but is free on other platforms.
My flashcard database in Anki format: https://ankiweb.net/shared/info/25173560 (thanks @xiewenya)
3. Review, review, review
I keep a set of cheat sheets on ASCII, OSI stack, Big-O notations, and more. I study them when I have some spare time.
Take a break from programming problems for a half hour and go through your flashcards.
4. Focus
There are a lot of distractions that can take up valuable time. Focus and concentration are hard.
What you won't see covered
These are prevalent technologies but not part of this study plan:

SQL
Javascript
HTML, CSS, and other front-end technologies

The Daily Plan
Some subjects take one day, and some will take multiple days. Some are just learning with nothing to implement.
Each day I take one subject from the list below, watch videos about that subject, and write an implementation in:

C - using structs and functions that take a struct * and something else as args.
C++ - without using built-in types
C++ - using built-in types, like STL's std::list for a linked list
Python - using built-in types (to keep practicing Python)
and write tests to ensure I'm doing it right, sometimes just using simple assert() statements
You may do Java or something else, this is just my thing.

You don't need all these. You need only one language for the interview.
Why code in all of these?

Practice, practice, practice, until I'm sick of it, and can do it with no problem (some have many edge cases and bookkeeping details to remember)
Work within the raw constraints (allocating/freeing memory without help of garbage collection (except Python or Java))
Make use of built-in types so I have experience using the built-in tools for real-world use (not going to write my own linked list implementation in production)

I may not have time to do all of these for every subject, but I'll try.
You can see my code here:

C
C++
Python

You don't need to memorize the guts of every algorithm.
Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then test it out on a computer.
Prerequisite Knowledge

Prerequisite Knowledge


 Learn C

C is everywhere. You'll see examples in books, lectures, videos, everywhere while you're studying.
 C Programming Language, Vol 2

This is a short book, but it will give you a great handle on the C language and if you practice it a little
you'll quickly get proficient. Understanding C helps you understand how programs and memory work.
answers to questions





 How computers process a program:

 How CPU executes a program (video)
 How computers calculate - ALU (video)
 Registers and RAM (video)
 The Central Processing Unit (CPU) (video)
 Instructions and Programs (video)




Algorithmic complexity / Big-O / Asymptotic analysis

Algorithmic complexity / Big-O / Asymptotic analysis

Nothing to implement
There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.
If some of the lectures are too mathy, you can jump down to the bottom and watch the discrete mathematics videos to get the background knowledge.
 Harvard CS50 - Asymptotic Notation (video)
 Big O Notations (general quick tutorial) (video)
 Big O Notation (and Omega and Theta) - best mathematical explanation (video)
 Skiena:

video
slides


 A Gentle Introduction to Algorithm Complexity Analysis
 Orders of Growth (video)
 Asymptotics (video)
 UC Berkeley Big O (video)
 UC Berkeley Big Omega (video)
 Amortized Analysis (video)
 Illustrating ""Big O"" (video)
 TopCoder (includes recurrence relations and master theorem):

Computational Complexity: Section 1
Computational Complexity: Section 2


 Cheat sheet


Data Structures

Data Structures


Arrays

Implement an automatically resizing vector.
 Description:

Arrays (video)
UC Berkeley CS61B - Linear and Multi-Dim Arrays (video) (Start watching from 15m 32s)
Basic Arrays (video)
Multi-dim (video)
Dynamic Arrays (video)
Jagged Arrays (video)
Jagged Arrays (video)
Resizing arrays (video)


 Implement a vector (mutable array with automatic resizing):

 Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.
 new raw data array with allocated memory

can allocate int array under the hood, just not use its features
start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128


 size() - number of items
 capacity() - number of items it can hold
 is_empty()
 at(index) - returns item at given index, blows up if index out of bounds
 push(item)
 insert(index, item) - inserts item at index, shifts that index's value and trailing elements to the right
 prepend(item) - can use insert above at index 0
 pop() - remove from end, return value
 delete(index) - delete item at index, shifting all trailing elements left
 remove(item) - looks for value and removes index holding it (even if in multiple places)
 find(item) - looks for value and returns first index with that value, -1 if not found
 resize(new_capacity) // private function

when you reach capacity, resize to double the size
when popping an item, if size is 1/4 of capacity, resize to half




 Time

O(1) to add/remove at end (amortized for allocations for more space), index, or update
O(n) to insert/remove elsewhere


 Space

contiguous in memory, so proximity helps performance
space needed = (array capacity, which is >= n) * size of item, but even if 2n, still O(n)





Linked Lists

 Description:

 Singly Linked Lists (video)
 CS 61B - Linked Lists 1 (video)
 CS 61B - Linked Lists 2 (video)


 C Code (video)
- not the whole video, just portions about Node struct and memory allocation.
 Linked List vs Arrays:

Core Linked Lists Vs Arrays (video)
In The Real World Linked Lists Vs Arrays (video)


 why you should avoid linked lists (video)
 Gotcha: you need pointer to pointer knowledge:
(for when you pass a pointer to a function that may change the address where that pointer points)
This page is just to get a grasp on ptr to ptr. I don't recommend this list traversal style. Readability and maintainability suffer due to cleverness.

Pointers to Pointers


 implement (I did with tail pointer & without):

 size() - returns number of data elements in list
 empty() - bool returns true if empty
 value_at(index) - returns the value of the nth item (starting at 0 for first)
 push_front(value) - adds an item to the front of the list
 pop_front() - remove front item and return its value
 push_back(value) - adds an item at the end
 pop_back() - removes end item and returns its value
 front() - get value of front item
 back() - get value of end item
 insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index
 erase(index) - removes node at given index
 value_n_from_end(n) - returns the value of the node at nth position from the end of the list
 reverse() - reverses the list
 remove_value(value) - removes the first item in the list with this value


 Doubly-linked List

Description (video)
No need to implement





Stack

 Stacks (video)
 Using Stacks Last-In First-Out (video)
 Will not implement. Implementing with array is trivial.



Queue

 Using Queues First-In First-Out(video)
 Queue (video)
 Circular buffer/FIFO
 Priority Queues (video)
 Implement using linked-list, with tail pointer:

enqueue(value) - adds value at position at tail
dequeue() - returns value and removes least recently added element (front)
empty()


 Implement using fixed-sized array:

enqueue(value) - adds item at end of available storage
dequeue() - returns value and removes least recently added element
empty()
full()


 Cost:

a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)
because you'd need the next to last element, causing a full traversal each dequeue
enqueue: O(1) (amortized, linked list and array [probing])
dequeue: O(1) (linked list and array)
empty: O(1) (linked list and array)





Hash table


 Videos:

 Hashing with Chaining (video)
 Table Doubling, Karp-Rabin (video)
 Open Addressing, Cryptographic Hashing (video)
 PyCon 2010: The Mighty Dictionary (video)
 (Advanced) Randomization: Universal & Perfect Hashing (video)
 (Advanced) Perfect hashing (video)



 Online Courses:

 Understanding Hash Functions (video)
 Using Hash Tables (video)
 Supporting Hashing (video)
 Language Support Hash Tables (video)
 Core Hash Tables (video)
 Data Structures (video)
 Phone Book Problem (video)
 distributed hash tables:

Instant Uploads And Storage Optimization In Dropbox (video)
Distributed Hash Tables (video)





 implement with array using linear probing

hash(k, m) - m is size of hash table
add(key, value) - if key already exists, update value
exists(key)
get(key)
remove(key)






More Knowledge

More Knowledge


Binary search

 Binary Search (video)
 Binary Search (video)
 detail
 Implement:

binary search (on sorted array of integers)
binary search using recursion





Bitwise operations

 Bits cheat sheet - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)
 Get a really good understanding of manipulating bits with: &, |, ^, ~, >>, <<

 words
 Good intro:
Bit Manipulation (video)
 C Programming Tutorial 2-10: Bitwise Operators (video)
 Bit Manipulation
 Bitwise Operation
 Bithacks
 The Bit Twiddler
 The Bit Twiddler Interactive


 2s and 1s complement

Binary: Plusses & Minuses (Why We Use Two's Complement) (video)
1s Complement
2s Complement


 count set bits

4 ways to count bits in a byte (video)
Count Bits
How To Count The Number Of Set Bits In a 32 Bit Integer


 round to next power of 2:

Round Up To Next Power Of Two


 swap values:

Swap


 absolute value:

Absolute Integer






Trees

Trees


Trees - Notes & Background

 Series: Core Trees (video)
 Series: Trees (video)
basic tree construction
traversal
manipulation algorithms
 BFS(breadth-first search) and DFS(depth-first search) (video)

BFS notes:

level order (BFS, using queue)
time complexity: O(n)
space complexity: best: O(1), worst: O(n/2)=O(n)


DFS notes:

time complexity: O(n)
space complexity:
best: O(log n) - avg. height of tree
worst: O(n)
inorder (DFS: left, self, right)
postorder (DFS: left, right, self)
preorder (DFS: self, left, right)







Binary search trees: BSTs

 Binary Search Tree Review (video)
 Series (video)

starts with symbol table and goes through BST applications


 Introduction (video)
 MIT (video)
C/C++:

 Binary search tree - Implementation in C/C++ (video)
 BST implementation - memory allocation in stack and heap (video)
 Find min and max element in a binary search tree (video)
 Find height of a binary tree (video)
 Binary tree traversal - breadth-first and depth-first strategies (video)
 Binary tree: Level Order Traversal (video)
 Binary tree traversal: Preorder, Inorder, Postorder (video)
 Check if a binary tree is binary search tree or not (video)
 Delete a node from Binary Search Tree (video)
 Inorder Successor in a binary search tree (video)


 Implement:

 insert    // insert value into tree
 get_node_count // get count of values stored
 print_values // prints the values in the tree, from min to max
 delete_tree
 is_in_tree // returns true if given value exists in the tree
 get_height // returns the height in nodes (single node's height is 1)
 get_min   // returns the minimum value stored in the tree
 get_max   // returns the maximum value stored in the tree
 is_binary_search_tree
 delete_value
 get_successor // returns next-highest value in tree after given value, -1 if none





Heap / Priority Queue / Binary Heap

visualized as a tree, but is usually linear in storage (array, linked list)
 Heap
 Introduction (video)
 Naive Implementations (video)
 Binary Trees (video)
 Tree Height Remark (video)
 Basic Operations (video)
 Complete Binary Trees (video)
 Pseudocode (video)
 Heap Sort - jumps to start (video)
 Heap Sort (video)
 Building a heap (video)
 MIT: Heaps and Heap Sort (video)
 CS 61B Lecture 24: Priority Queues (video)
 Linear Time BuildHeap (max-heap)
 Implement a max-heap:

 insert
 sift_up - needed for insert
 get_max - returns the max item, without removing it
 get_size() - return number of elements stored
 is_empty() - returns true if heap contains no elements
 extract_max - returns the max item, removing it
 sift_down - needed for extract_max
 remove(i) - removes item at index x
 heapify - create a heap from an array of elements, needed for heap_sort
 heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap

note: using a min heap instead would save operations, but double the space needed (cannot do in-place).








Sorting

Sorting


 Notes:

Implement sorts & know best case/worst case, average complexity of each:

no bubble sort - it's terrible - O(n^2), except when n <= 16


 stability in sorting algorithms (""Is Quicksort stable?"")

Sorting Algorithm Stability
Stability In Sorting Algorithms
Stability In Sorting Algorithms
Sorting Algorithms - Stability


 Which algorithms can be used on linked lists? Which on arrays? Which on both?

I wouldn't recommend sorting a linked list, but merge sort is doable.
Merge Sort For Linked List





For heapsort, see Heap data structure above. Heap sort is great, but not stable.


 Sedgewick - Mergesort (5 videos)

 1. Mergesort
 2. Bottom up Mergesort
 3. Sorting Complexity
 4. Comparators
 5. Stability



 Sedgewick - Quicksort (4 videos)

 1. Quicksort
 2. Selection
 3. Duplicate Keys
 4. System Sorts



 UC Berkeley:

 CS 61B Lecture 29: Sorting I (video)
 CS 61B Lecture 30: Sorting II (video)
 CS 61B Lecture 32: Sorting III (video)
 CS 61B Lecture 33: Sorting V (video)



 Bubble Sort (video)


 Analyzing Bubble Sort (video)


 Insertion Sort, Merge Sort (video)


 Insertion Sort (video)


 Merge Sort (video)


 Quicksort (video)


 Selection Sort (video)


 Merge sort code:

 Using output array (C)
 Using output array (Python)
 In-place (C++)



 Quick sort code:

 Implementation (C)
 Implementation (C)
 Implementation (Python)



 Implement:

 Mergesort: O(n log n) average and worst case
 Quicksort O(n log n) average case
Selection sort and insertion sort are both O(n^2) average and worst case
For heapsort, see Heap data structure above.



 Not required, but I recommended them:

 Sedgewick - Radix Sorts (6 videos)

 1. Strings in Java
 2. Key Indexed Counting
 3. Least Significant Digit First String Radix Sort
 4. Most Significant Digit First String Radix Sort
 5. 3 Way Radix Quicksort
 6. Suffix Arrays


 Radix Sort
 Radix Sort (video)
 Radix Sort, Counting Sort (linear time given constraints) (video)
 Randomization: Matrix Multiply, Quicksort, Freivalds' algorithm (video)
 Sorting in Linear Time (video)



As a summary, here is a visual representation of 15 sorting algorithms.
If you need more detail on this subject, see ""Sorting"" section in Additional Detail on Some Subjects

Graphs

Graphs
Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.


Notes:

There are 4 basic ways to represent a graph in memory:

objects and pointers
adjacency matrix
adjacency list
adjacency map


Familiarize yourself with each representation and its pros & cons
BFS and DFS - know their computational complexity, their tradeoffs, and how to implement them in real code
When asked a question, look for a graph-based solution first, then move on if none.



 MIT(videos):

 Breadth-First Search
 Depth-First Search



 Skiena Lectures - great intro:

 CSE373 2012 - Lecture 11 - Graph Data Structures (video)
 CSE373 2012 - Lecture 12 - Breadth-First Search (video)
 CSE373 2012 - Lecture 13 - Graph Algorithms (video)
 CSE373 2012 - Lecture 14 - Graph Algorithms (con't) (video)
 CSE373 2012 - Lecture 15 - Graph Algorithms (con't 2) (video)
 CSE373 2012 - Lecture 16 - Graph Algorithms (con't 3) (video)



 Graphs (review and more):

 6.006 Single-Source Shortest Paths Problem (video)
 6.006 Dijkstra (video)
 6.006 Bellman-Ford (video)
 6.006 Speeding Up Dijkstra (video)
 Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim's Algorithm -  Lecture 6 (video)
 Aduni: Graph Algorithms II - DFS, BFS, Kruskal's Algorithm, Union Find Data Structure - Lecture 7 (video)
 Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)
 Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)
 CS 61B 2014 (starting at 58:09) (video)
 CS 61B 2014: Weighted graphs (video)
 Greedy Algorithms: Minimum Spanning Tree (video)
 Strongly Connected Components Kosaraju's Algorithm Graph Algorithm (video)



Full Coursera Course:

 Algorithms on Graphs (video)



I'll implement:

 DFS with adjacency list (recursive)
 DFS with adjacency list (iterative with stack)
 DFS with adjacency matrix (recursive)
 DFS with adjacency matrix (iterative with stack)
 BFS with adjacency list
 BFS with adjacency matrix
 single-source shortest path (Dijkstra)
 minimum spanning tree
DFS-based algorithms (see Aduni videos above):

 check for cycle (needed for topological sort, since we'll check for cycle before starting)
 topological sort
 count connected components in a graph
 list strongly connected components
 check for bipartite graph






Even More Knowledge

Even More Knowledge


Recursion

 Stanford lectures on recursion & backtracking:

 Lecture 8 | Programming Abstractions (video)
 Lecture 9 | Programming Abstractions (video)
 Lecture 10 | Programming Abstractions (video)
 Lecture 11 | Programming Abstractions (video)


when it is appropriate to use it
how is tail recursion better than not?

 What Is Tail Recursion Why Is It So Bad?
 Tail Recursion (video)





Dynamic Programming

You probably won't see any dynamic programming problems in your interview, but it's worth being able to recognize a problem as being a candidate for dynamic programming.
This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.
I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.
 Videos:

the Skiena videos can be hard to follow since he sometimes uses the whiteboard, which is too small to see
 Skiena: CSE373 2012 - Lecture 19 - Introduction to Dynamic Programming (video)
 Skiena: CSE373 2012 - Lecture 20 - Edit Distance (video)
 Skiena: CSE373 2012 - Lecture 21 - Dynamic Programming Examples (video)
 Skiena: CSE373 2012 - Lecture 22 - Applications of Dynamic Programming (video)
 Simonson: Dynamic Programming 0 (starts at 59:18) (video)
 Simonson: Dynamic Programming I - Lecture 11 (video)
 Simonson: Dynamic programming II - Lecture 12 (video)
 List of individual DP problems (each is short):
Dynamic Programming (video)


 Yale Lecture notes:

 Dynamic Programming


 Coursera:

 The RNA secondary structure problem (video)
 A dynamic programming algorithm (video)
 Illustrating the DP algorithm (video)
 Running time of the DP algorithm (video)
 DP vs. recursive implementation (video)
 Global pairwise sequence alignment (video)
 Local pairwise sequence alignment (video)





Object-Oriented Programming

 Optional: UML 2.0 Series (video)
 Object-Oriented Software Engineering: Software Dev Using UML and Java (21 videos):

Can skip this if you have a great grasp of OO and OO design practices.
OOSE: Software Dev Using UML and Java (video)


 SOLID OOP Principles:

 Bob Martin SOLID Principles of Object Oriented and Agile Design (video)
 SOLID Principles (video)
 S - Single Responsibility Principle | Single responsibility to each Object

more flavor


 O - Open/Closed Principal  | On production level Objects are ready for extension but not for modification

more flavor


 L - Liskov Substitution Principal | Base Class and Derived class follow ‘IS A’ principal

more flavor


 I - Interface segregation principle | clients should not be forced to implement interfaces they don't use

Interface Segregation Principle in 5 minutes (video)
more flavor


 D -Dependency Inversion principle | Reduce the dependency In composition of objects.

Why Is The Dependency Inversion Principle And Why Is It Important
more flavor







Design patterns

 Quick UML review (video)
 Learn these patterns:

 strategy
 singleton
 adapter
 prototype
 decorator
 visitor
 factory, abstract factory
 facade
 observer
 proxy
 delegate
 command
 state
 memento
 iterator
 composite
 flyweight


 Chapter 6 (Part 1) - Patterns (video)
 Chapter 6 (Part 2) - Abstraction-Occurrence, General Hierarchy, Player-Role, Singleton, Observer, Delegation (video)
 Chapter 6 (Part 3) - Adapter, Facade, Immutable, Read-Only Interface, Proxy (video)
 Series of videos (27 videos)
 Head First Design Patterns

I know the canonical book is ""Design Patterns: Elements of Reusable Object-Oriented Software"", but Head First is great for beginners to OO.


 Handy reference: 101 Design Patterns & Tips for Developers
 Design patterns for humans



Combinatorics (n choose k) & Probability

 Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)
 Make School: Probability (video)
 Make School: More Probability and Markov Chains (video)
 Khan Academy:

Course layout:

 Basic Theoretical Probability


Just the videos - 41 (each are simple and each are short):

 Probability Explained (video)







NP, NP-Complete and Approximation Algorithms

Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,
and be able to recognize them when an interviewer asks you them in disguise.
Know what NP-complete means.
 Computational Complexity (video)
 Simonson:

 Greedy Algs. II & Intro to NP Completeness (video)
 NP Completeness II & Reductions (video)
 NP Completeness III (Video)
 NP Completeness IV (video)


 Skiena:

 CSE373 2012 - Lecture 23 - Introduction to NP-Completeness (video)
 CSE373 2012 - Lecture 24 - NP-Completeness Proofs (video)
 CSE373 2012 - Lecture 25 - NP-Completeness Challenge (video)


 Complexity: P, NP, NP-completeness, Reductions (video)
 Complexity: Approximation Algorithms (video)
 Complexity: Fixed-Parameter Algorithms (video)
Peter Norvig discusses near-optimal solutions to traveling salesman problem:

Jupyter Notebook


Pages 1048 - 1140 in CLRS if you have it.



Caches

 LRU cache:

 The Magic of LRU Cache (100 Days of Google Dev) (video)
 Implementing LRU (video)
 LeetCode - 146 LRU Cache (C++) (video)


 CPU cache:

 MIT 6.004 L15: The Memory Hierarchy (video)
 MIT 6.004 L16: Cache Issues (video)





Processes and Threads

 Computer Science 162 - Operating Systems (25 videos):

for processes and threads see videos 1-11
Operating Systems and System Programming (video)


What Is The Difference Between A Process And A Thread?
Covers:

Processes, Threads, Concurrency issues

difference between processes and threads
processes
threads
locks
mutexes
semaphores
monitors
how they work
deadlock
livelock


CPU activity, interrupts, context switching
Modern concurrency constructs with multicore processors
Paging, segmentation and virtual memory (video)
Interrupts (video)
Scheduling (video)
Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o)
Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)
Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.
Context switching

How context switching is initiated by the operating system and underlying hardware




 threads in C++ (series - 10 videos)
 concurrency in Python (videos):

 Short series on threads
 Python Threads
 Understanding the Python GIL (2010)

reference


 David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015
 Keynote David Beazley - Topics of Interest (Python Asyncio)
 Mutex in Python





Testing

To cover:

how unit testing works
what are mock objects
what is integration testing
what is dependency injection


 Agile Software Testing with James Bach (video)
 Open Lecture by James Bach on Software Testing (video)
 Steve Freeman - Test-Driven Development (that’s not what we meant) (video)

slides


 TDD is dead. Long live testing.
 Is TDD dead? (video)
 Video series (152 videos) - not all are needed (video)
 Test-Driven Web Development with Python
 Dependency injection:

 video
 Tao Of Testing


 How to write tests



Scheduling

in an OS, how it works
can be gleaned from Operating System videos



String searching & manipulations

 Sedgewick - Suffix Arrays (video)
 Sedgewick - Substring Search (videos)

 1. Introduction to Substring Search
 2. Brute-Force Substring Search
 3. Knuth-Morris Pratt
 4. Boyer-Moore
 5. Rabin-Karp


 Search pattern in text (video)

If you need more detail on this subject, see ""String Matching"" section in Additional Detail on Some Subjects


Tries

Note there are different kinds of tries. Some have prefixes, some don't, and some use string instead of bits
to track the path.
I read through code, but will not implement.
 Sedgewick - Tries (3 videos)

 1. R Way Tries
 2. Ternary Search Tries
 3. Character Based Operations


 Notes on Data Structures and Programming Techniques
 Short course videos:

 Introduction To Tries (video)
 Performance Of Tries (video)
 Implementing A Trie (video)


 The Trie: A Neglected Data Structure
 TopCoder - Using Tries
 Stanford Lecture (real world use case) (video)
 MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)



Floating Point Numbers

 simple 8-bit: Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)
 32 bit: IEEE754 32-bit floating point binary (video)



Unicode

 The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets
 What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text



Endianness

 Big And Little Endian
 Big Endian Vs Little Endian (video)
 Big And Little Endian Inside/Out (video)

Very technical talk for kernel devs. Don't worry if most is over your head.
The first half is enough.





Networking

if you have networking experience or want to be a reliability engineer or operations engineer, expect questions
otherwise, this is just good to know
 Khan Academy
 UDP and TCP: Comparison of Transport Protocols (video)
 TCP/IP and the OSI Model Explained! (video)
 Packet Transmission across the Internet. Networking & TCP/IP tutorial. (video)
 HTTP (video)
 SSL and HTTPS (video)
 SSL/TLS (video)
 HTTP 2.0 (video)
 Video Series (21 videos) (video)
 Subnetting Demystified - Part 5 CIDR Notation (video)
 Sockets:

 Java - Sockets - Introduction (video)
 Socket Programming (video)






System Design, Scalability, Data Handling

System Design, Scalability, Data Handling
You can expect system design questions if you have 4+ years of experience.

Scalability and System Design are very large topics with many topics and resources, since
there is a lot to consider when designing a software/hardware system that can scale.
Expect to spend quite a bit of time on this.
Considerations:

scalability

Distill large data sets to single values
Transform one data set to another
Handling obscenely large amounts of data


system design

features sets
interfaces
class hierarchies
designing a system under certain constraints
simplicity and robustness
tradeoffs
performance analysis and optimization




 START HERE: The System Design Primer
 System Design from HiredInTech
 How Do I Prepare To Answer Design Questions In A Technical Inverview?
 8 Things You Need to Know Before a System Design Interview
 Algorithm design
 Database Normalization - 1NF, 2NF, 3NF and 4NF (video)
 System Design Interview - There are a lot of resources in this one. Look through the articles and examples. I put some of them below.
 How to ace a systems design interview
 Numbers Everyone Should Know
 How long does it take to make a context switch?
 Transactions Across Datacenters (video)
 A plain English introduction to CAP Theorem
 Consensus Algorithms:

 Paxos - Paxos Agreement - Computerphile (video)
 Raft - An Introduction to the Raft Distributed Consensus Algorithm (video)

 Easy-to-read paper
 Infographic




 Consistent Hashing
 NoSQL Patterns
 Scalability:

You don't need all of these. Just pick a few that interest you.
 Great overview (video)
 Short series:

Clones
Database
Cache
Asynchronism


 Scalable Web Architecture and Distributed Systems
 Fallacies of Distributed Computing Explained
 Pragmatic Programming Techniques

extra: Google Pregel Graph Processing


 Jeff Dean - Building Software Systems At Google and Lessons Learned (video)
 Introduction to Architecting Systems for Scale
 Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)
 How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)
 The Importance of Algorithms
 Sharding
 Scale at Facebook (2012), ""Building for a Billion Users"" (video)
 Engineering for the Long Game - Astrid Atkinson Keynote(video)
 7 Years Of YouTube Scalability Lessons In 30 Minutes

video


 How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs
 How to Remove Duplicates in Large Datasets
 A look inside Etsy's scale and engineering culture with Jon Cowie (video)
 What Led Amazon to its Own Microservices Architecture
 To Compress Or Not To Compress, That Was Uber's Question
 Asyncio Tarantool Queue, Get In The Queue
 When Should Approximate Query Processing Be Used?
 Google's Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture
 Spanner
 Machine Learning Driven Programming: A New Programming For A New World
 The Image Optimization Technology That Serves Millions Of Requests Per Day
 A Patreon Architecture Short
 Tinder: How Does One Of The Largest Recommendation Engines Decide Who You'll See Next?
 Design Of A Modern Cache
 Live Video Streaming At Facebook Scale
 A Beginner's Guide To Scaling To 11 Million+ Users On Amazon's AWS
 How Does The Use Of Docker Effect Latency?
 A 360 Degree View Of The Entire Netflix Stack
 Latency Is Everywhere And It Costs You Sales - How To Crush It
 Serverless (very long, just need the gist)
 What Powers Instagram: Hundreds of Instances, Dozens of Technologies
 Cinchcast Architecture - Producing 1,500 Hours Of Audio Every Day
 Justin.Tv's Live Video Broadcasting Architecture
 Playfish's Social Gaming Architecture - 50 Million Monthly Users And Growing
 TripAdvisor Architecture - 40M Visitors, 200M Dynamic Page Views, 30TB Data
 PlentyOfFish Architecture
 Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day
 ESPN's Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second
 See ""Messaging, Serialization, and Queueing Systems"" way below for info on some of the technologies that can glue services together
 Twitter:

O'Reilly MySQL CE 2011: Jeremy Cole, ""Big and Small Data at @Twitter"" (video)
Timelines at Scale


For even more, see ""Mining Massive Datasets"" video series in the Video Series section.


 Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:

review: The System Design Primer
System Design from HiredInTech
cheat sheet
flow:

Understand the problem and scope:

define the use cases, with interviewer's help
suggest additional features
remove items that interviewer deems out of scope
assume high availability is required, add as a use case


Think about constraints:

ask how many requests per month
ask how many requests per second (they may volunteer it or make you do the math)
estimate reads vs. writes percentage
keep 80/20 rule in mind when estimating
how much data written per second
total storage required over 5 years
how much data read per second


Abstract design:

layers (service, data, caching)
infrastructure: load balancing, messaging
rough overview of any key algorithm that drives the service
consider bottlenecks and determine solutions




Exercises:

Design a CDN network: old article
Design a random unique ID generation system
Design an online multiplayer card game
Design a key-value database
Design a picture sharing system
Design a recommendation system
Design a URL-shortener system: copied from above
Design a cache system







Final Review

Final Review
This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.
It's nice if you want a refresher often.


 Series of 2-3 minutes short subject videos (23 videos)

Videos


 Series of 2-5 minutes short subject videos - Michael Sambol (18 videos):

Videos


 Sedgewick Videos - Algorithms I
 Sedgewick Videos - Algorithms II



Coding Question Practice

Coding Question Practice
Now that you know all the computer science topics above, it's time to practice answering coding problems.
Coding question practice is not about memorizing answers to programming problems.
Why you need to practice doing programming problems:

problem recognition, and where the right data structures and algorithms fit in
gathering requirements for the problem
talking your way through the problem like you will in the interview
coding on a whiteboard or paper, not a computer
coming up with time and space complexity for your solutions
testing your solutions

There is a great intro for methodical, communicative problem solving in an interview. You'll get this from the programming
interview books, too, but I found this outstanding:
Algorithm design canvas
No whiteboard at home? That makes sense. I'm a weirdo and have a big whiteboard. Instead of a whiteboard, pick up a
large drawing pad from an art store. You can sit on the couch and practice. This is my ""sofa whiteboard"".
I added the pen in the photo for scale. If you use a pen, you'll wish you could erase. Gets messy quick.

Supplemental:

Mathematics for Topcoders
Dynamic Programming – From Novice to Advanced
MIT Interview Materials
Exercises for getting better at a given language

Read and Do Programming Problems (in this order):

 Programming Interviews Exposed: Secrets to Landing Your Next Job, 2nd Edition

answers in C, C++ and Java


 Cracking the Coding Interview, 6th Edition

answers in Java



See Book List above

Coding exercises/challenges

Coding Question Practice
Once you've learned your brains out, put those brains to work.
Take coding challenges every day, as many as you can.

 How to Find a Solution
 How to Dissect a Topcoder Problem Statement

Coding Interview Question Videos:

IDeserve (88 videos)
Tushar Roy (5 playlists)

Challenge sites:

LeetCode
TopCoder
Project Euler (math-focused)
Codewars
HackerEarth
HackerRank
Codility
InterviewCake
Geeks for Geeks
InterviewBit
Sphere Online Judge (spoj)
Codechef

Challenge repos:

Interactive Coding Interview Challenges in Python

Mock Interviews:

Gainlo.co: Mock interviewers from big companies - I used this and it helped me relax for the phone screen and on-site interview.
Pramp: Mock interviews from/with peers - peer-to-peer model of practice interviews
Refdash: Mock interviews and expedited interviews - also help candidates fast track by skipping multiple interviews with tech companies.


Once you're closer to the interview

 Cracking The Coding Interview Set 2 (videos):

Cracking The Code Interview
Cracking the Coding Interview - Fullstack Speaker Series



Your Resume

See Resume prep items in Cracking The Coding Interview and back of Programming Interviews Exposed

Be thinking of for when the interview comes
Think of about 20 interview questions you'll get, along with the lines of the items below. Have 2-3 answers for each.
Have a story, not just data, about something you accomplished.

Why do you want this job?
What's a tough problem you've solved?
Biggest challenges faced?
Best/worst designs seen?
Ideas for improving an existing product.
How do you work best, as an individual and as part of a team?
Which of your skills or experiences would be assets in the role and why?
What did you most enjoy at [job x / project y]?
What was the biggest challenge you faced at [job x / project y]?
What was the hardest bug you faced at [job x / project y]?
What did you learn at [job x / project y]?
What would you have done better at [job x / project y]?

Have questions for the interviewer
Some of mine (I already may know answer to but want their opinion or team perspective):


How large is your team?
What does your dev cycle look like? Do you do waterfall/sprints/agile?
Are rushes to deadlines common? Or is there flexibility?
How are decisions made in your team?
How many meetings do you have per week?
Do you feel your work environment helps you concentrate?
What are you working on?
What do you like about it?
What is the work life like?

Once You've Got The Job
Congratulations!
Keep learning.
You're never really done.

*****************************************************************************************************
*****************************************************************************************************

Everything below this point is optional.
By studying these, you'll get greater exposure to more CS concepts, and will be better prepared for
any software engineering job. You'll be a much more well-rounded software engineer.

*****************************************************************************************************
*****************************************************************************************************


Additional Books

Additional Books


The Unix Programming Environment

an oldie but a goodie



The Linux Command Line: A Complete Introduction

a modern option



TCP/IP Illustrated Series


Head First Design Patterns

a gentle introduction to design patterns



Design Patterns: Elements of Reusable Object-Oriente​d Software

aka the ""Gang Of Four"" book, or GOF
the canonical design patterns book



UNIX and Linux System Administration Handbook, 5th Edition


Algorithm Design Manual (Skiena)

As a review and problem recognition
The algorithm catalog portion is well beyond the scope of difficulty you'll get in an interview.
This book has 2 parts:

class textbook on data structures and algorithms

pros:

is a good review as any algorithms textbook would be
nice stories from his experiences solving problems in industry and academia
code examples in C


cons:

can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects
chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have
don't get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material.




algorithm catalog:

this is the real reason you buy this book.
about to get to this part. Will update here once I've made my way through it.




Can rent it on kindle
Answers:

Solutions
Solutions


Errata



Introduction to Algorithms

Important: Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won't teach you how to write good code. You have to be able to code a decent solution efficiently.
aka CLR, sometimes CLRS, because Stein was late to the game



Computer Architecture, Sixth Edition: A Quantitative Approach

For a richer, more up-to-date (2017), but longer treatment



Programming Pearls

The first couple of chapters present clever solutions to programming problems (some very old using data tape) but
that is just an intro. This a guidebook on program design and architecture, much like Code Complete, but much shorter.




Additional Learning

Additional Learning
These topics will likely not come up in an interview, but I added them to help you become a well-rounded
software engineer, and to be aware of certain technologies and algorithms, so you'll have a bigger toolbox.


Compilers

 How a Compiler Works in ~1 minute (video)
 Harvard CS50 - Compilers (video)
 C++ (video)
 Understanding Compiler Optimization (C++) (video)



Emacs and vi(m)

Familiarize yourself with a unix-based code editor
vi(m):

Editing With vim 01 - Installation, Setup, and The Modes (video)
VIM Adventures
set of 4 videos:

The vi/vim editor - Lesson 1
The vi/vim editor - Lesson 2
The vi/vim editor - Lesson 3
The vi/vim editor - Lesson 4


Using Vi Instead of Emacs


emacs:

Basics Emacs Tutorial (video)
set of 3 (videos):

Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands
Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes
Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages


Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)
Writing C Programs With Emacs
(maybe) Org Mode In Depth: Managing Structure (video)





Unix command line tools

I filled in the list below from good tools.
 bash
 cat
 grep
 sed
 awk
 curl or wget
 sort
 tr
 uniq
 strace
 tcpdump



Information theory (videos)

 Khan Academy
 more about Markov processes:

 Core Markov Text Generation
 Core Implementing Markov Text Generation
 Project = Markov Text Generation Walk Through


See more in MIT 6.050J Information and Entropy series below.



Parity & Hamming Code (videos)

 Intro
 Parity
 Hamming Code:

Error detection
Error correction


 Error Checking



Entropy

also see videos below
make sure to watch information theory videos first
 Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression & Bits (video)



Cryptography

also see videos below
make sure to watch information theory videos first
 Khan Academy Series
 Cryptography: Hash Functions
 Cryptography: Encryption



Compression

make sure to watch information theory videos first
 Computerphile (videos):

 Compression
 Entropy in Compression
 Upside Down Trees (Huffman Trees)
 EXTRA BITS/TRITS - Huffman Trees
 Elegant Compression in Text (The LZ 77 Method)
 Text Compression Meets Probabilities


 Compressor Head videos
 (optional) Google Developers Live: GZIP is not enough!



Computer Security

MIT (23 videos)

 Introduction, Threat Models
 Control Hijacking Attacks
 Buffer Overflow Exploits and Defenses
 Privilege Separation
 Capabilities
 Sandboxing Native Code
 Web Security Model
 Securing Web Applications
 Symbolic Execution
 Network Security
 Network Protocols
 Side-Channel Attacks





Garbage collection

 GC in Python (video)
 Deep Dive Java: Garbage Collection is Good!
 Deep Dive Python: Garbage Collection in CPython (video)



Parallel Programming

 Coursera (Scala)
 Efficient Python for High Performance Parallel Computing (video)



Messaging, Serialization, and Queueing Systems

 Thrift

Tutorial


 Protocol Buffers

Tutorials


 gRPC

gRPC 101 for Java Developers (video)


 Redis

Tutorial


 Amazon SQS (queue)
 Amazon SNS (pub-sub)
 RabbitMQ

Get Started


 Celery

First Steps With Celery


 ZeroMQ

Intro - Read The Manual


 ActiveMQ
 Kafka
 MessagePack
 Avro



A*

 A Search Algorithm
 A* Pathfinding Tutorial (video)
 A* Pathfinding (E01: algorithm explanation) (video)



Fast Fourier Transform

 An Interactive Guide To The Fourier Transform
 What is a Fourier transform? What is it used for?
 What is the Fourier Transform? (video)
 Divide & Conquer: FFT (video)
 Understanding The FFT



Bloom Filter

Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)
Bloom Filters (video)
Bloom Filters | Mining of Massive Datasets | Stanford University (video)
Tutorial
How To Write A Bloom Filter App



HyperLogLog

How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory



Locality-Sensitive Hashing

used to determine the similarity of documents
the opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same.
Simhashing (hopefully) made simple



van Emde Boas Trees

 Divide & Conquer: van Emde Boas Trees (video)
 MIT Lecture Notes



Augmented Data Structures

 CS 61B Lecture 39: Augmenting Data Structures



Balanced search trees


Know at least one type of balanced binary tree (and know how it's implemented):


""Among balanced search trees, AVL and 2/3 trees are now passé, and red-black trees seem to be more popular.
A particularly interesting self-organizing data structure is the splay tree, which uses rotations
to move any accessed key to the root."" - Skiena


Of these, I chose to implement a splay tree. From what I've read, you won't implement a
balanced search tree in your interview. But I wanted exposure to coding one up
and let's face it, splay trees are the bee's knees. I did read a lot of red-black tree code.

splay tree: insert, search, delete functions
If you end up implementing red/black tree try just these:
search and insertion functions, skipping delete



I want to learn more about B-Tree since it's used so widely with very large data sets.


 Self-balancing binary search tree


 AVL trees

In practice:
From what I can tell, these aren't used much in practice, but I could see where they would be:
The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly
balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it
attractive for data structures that may be built once and loaded without reconstruction, such as language
dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter).
 MIT AVL Trees / AVL Sort (video)
 AVL Trees (video)
 AVL Tree Implementation (video)
 Split And Merge



 Splay trees

In practice:
Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,
data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,
networking and file system code) etc.
 CS 61B: Splay Trees (video)
 MIT Lecture: Splay Trees:

Gets very mathy, but watch the last 10 minutes for sure.
Video





 Red/black trees

these are a translation of a 2-3 tree (see below)
In practice:
Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.
Not only does this make them valuable in time-sensitive applications such as real-time applications,
but it makes them valuable building blocks in other data structures which provide worst-case guarantees;
for example, many data structures used in computational geometry can be based on red–black trees, and
the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java,
the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor
hashcodes, a Red-Black tree is used.
 Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)
 Aduni - Algorithms - Lecture 5 (video)
 Red-Black Tree
 An Introduction To Binary Search And Red Black Tree



 2-3 search trees

In practice:
2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).
You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.
 23-Tree Intuition and Definition (video)
 Binary View of 23-Tree
 2-3 Trees (student recitation) (video)



 2-3-4 Trees (aka 2-4 trees)

In practice:
For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion
operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an
important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce
2-4 trees just before red–black trees, even though 2-4 trees are not often used in practice.
 CS 61B Lecture 26: Balanced Search Trees (video)
 Bottom Up 234-Trees (video)
 Top Down 234-Trees (video)



 N-ary (K-ary, M-ary) trees

note: the N or K is the branching factor (max branches)
binary trees are a 2-ary tree, with branching factor = 2
2-3 trees are 3-ary
 K-Ary Tree



 B-Trees

fun fact: it's a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor)
In Practice:
B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to
its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary
block in a particular file. The basic problem is turning the file block i address into a disk block
(or perhaps to a cylinder-head-sector) address.
 B-Tree
 B-Tree Datastructure
 Introduction to B-Trees (video)
 B-Tree Definition and Insertion (video)
 B-Tree Deletion (video)
 MIT 6.851 - Memory Hierarchy Models (video)
- covers cache-oblivious B-Trees, very interesting data structures
- the first 37 minutes are very technical, may be skipped (B is block size, cache line size)





k-D Trees

great for finding number of points in a rectangle or higher dimension object
a good fit for k-nearest neighbors
 Kd Trees (video)
 kNN K-d tree algorithm (video)



Skip lists

""These are somewhat of a cult data structure"" - Skiena
 Randomization: Skip Lists (video)
 For animations and a little more detail



Network Flows

 Ford-Fulkerson in 5 minutes — Step by step example (video)
 Ford-Fulkerson Algorithm (video)
 Network Flows (video)



Disjoint Sets & Union Find

 UCB 61B - Disjoint Sets; Sorting & selection (video)
 Sedgewick Algorithms - Union-Find (6 videos)



Math for Fast Processing

 Integer Arithmetic, Karatsuba Multiplication (video)
 The Chinese Remainder Theorem (used in cryptography) (video)



Treap

Combination of a binary search tree and a heap
 Treap
 Data Structures: Treaps explained (video)
 Applications in set operations



Linear Programming (videos)

 Linear Programming
 Finding minimum cost
 Finding maximum value
 Solve Linear Equations with Python - Simplex Algorithm



Geometry, Convex hull (videos)

 Graph Alg. IV: Intro to geometric algorithms - Lecture 9
 Geometric Algorithms: Graham & Jarvis - Lecture 10
 Divide & Conquer: Convex Hull, Median Finding



Discrete math

see videos below



Machine Learning

 Why ML?

 How Google Is Remaking Itself As A Machine Learning First Company
 Large-Scale Deep Learning for Intelligent Computer Systems (video)
 Deep Learning and Understandability versus Software Engineering and Verification by Peter Norvig


 Google's Cloud Machine learning tools (video)
 Google Developers' Machine Learning Recipes (Scikit Learn & Tensorflow) (video)
 Tensorflow (video)
 Tensorflow Tutorials
 Practical Guide to implementing Neural Networks in Python (using Theano)
Courses:

Great starter course: Machine Learning
- videos only
- see videos 12-18 for a review of linear algebra (14 and 15 are duplicates)
Neural Networks for Machine Learning
Google's Deep Learning Nanodegree
Google/Kaggle Machine Learning Engineer Nanodegree
Self-Driving Car Engineer Nanodegree
Metis Online Course ($99 for 2 months)


Resources:

Books:

Python Machine Learning
Data Science from Scratch: First Principles with Python
Introduction to Machine Learning with Python


Machine Learning for Software Engineers
Data School: http://www.dataschool.io/







Additional Detail on Some Subjects

Additional Detail on Some Subjects
I added these to reinforce some ideas already presented above, but didn't want to include them
above because it's just too much. It's easy to overdo it on a subject.
You want to get hired in this century, right?



 Union-Find

 Overview
 Naive Implementation
 Trees
 Union By Rank
 Path Compression
 Analysis Options



 More Dynamic Programming (videos)

 6.006: Dynamic Programming I: Fibonacci, Shortest Paths
 6.006: Dynamic Programming II: Text Justification, Blackjack
 6.006: DP III: Parenthesization, Edit Distance, Knapsack
 6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.
 6.046: Dynamic Programming & Advanced DP
 6.046: Dynamic Programming: All-Pairs Shortest Paths
 6.046: Dynamic Programming (student recitation)



 Advanced Graph Processing (videos)

 Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees
 Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees



 MIT Probability (mathy, and go slowly, which is good for mathy things) (videos):

 MIT 6.042J - Probability Introduction
 MIT 6.042J - Conditional Probability
 MIT 6.042J - Independence
 MIT 6.042J - Random Variables
 MIT 6.042J - Expectation I
 MIT 6.042J - Expectation II
 MIT 6.042J - Large Deviations
 MIT 6.042J - Random Walks



 Simonson: Approximation Algorithms (video)


 String Matching

 Rabin-Karp (videos):

Rabin Karps Algorithm
Precomputing
Optimization: Implementation and Analysis
Table Doubling, Karp-Rabin
Rolling Hashes, Amortized Analysis


 Knuth-Morris-Pratt (KMP):

TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm


 Boyer–Moore string search algorithm

Boyer-Moore String Search Algorithm
Advanced String Searching Boyer-Moore-Horspool Algorithms (video)


 Coursera: Algorithms on Strings

starts off great, but by the time it gets past KMP it gets more complicated than it needs to be
nice explanation of tries
can be skipped





 Sorting

 Stanford lectures on sorting:

 Lecture 15 | Programming Abstractions (video)
 Lecture 16 | Programming Abstractions (video)


 Shai Simonson, Aduni.org:

 Algorithms - Sorting - Lecture 2 (video)
 Algorithms - Sorting II - Lecture 3 (video)


 Steven Skiena lectures on sorting:

 lecture begins at 26:46 (video)
 lecture begins at 27:40 (video)
 lecture begins at 35:00 (video)
 lecture begins at 23:50 (video)






Video Series
Sit back and enjoy. ""Netflix and skill"" :P

Video Series


 List of individual Dynamic Programming problems (each is short)


 x86 Architecture, Assembly, Applications (11 videos)


 MIT 18.06 Linear Algebra, Spring 2005 (35 videos)


 Excellent - MIT Calculus Revisited: Single Variable Calculus


 Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory


 Discrete Mathematics by Shai Simonson (19 videos)


 Discrete Mathematics Part 1 by Sarada Herke (5 videos)


 CSE373 - Analysis of Algorithms (25 videos)

Skiena lectures from Algorithm Design Manual



 UC Berkeley 61B (Spring 2014): Data Structures (25 videos)


 UC Berkeley 61B (Fall 2006): Data Structures (39 videos)


 UC Berkeley 61C: Machine Structures (26 videos)


 OOSE: Software Dev Using UML and Java (21 videos)


 UC Berkeley CS 152: Computer Architecture and Engineering (20 videos)


 MIT 6.004: Computation Structures (49 videos)


 Carnegie Mellon - Computer Architecture Lectures (39 videos)


 MIT 6.006: Intro to Algorithms (47 videos)


 MIT 6.033: Computer System Engineering (22 videos)


 MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)


 MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)


 MIT 6.046: Design and Analysis of Algorithms (34 videos)


 MIT 6.050J: Information and Entropy, Spring 2008 (19 videos)


 MIT 6.851: Advanced Data Structures (22 videos)


 MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)


 Harvard COMPSCI 224: Advanced Algorithms (25 videos)


 MIT 6.858 Computer Systems Security, Fall 2014


 Stanford: Programming Paradigms (27 videos)


 Introduction to Cryptography by Christof Paar

Course Website along with Slides and Problem Sets



 Mining Massive Datasets - Stanford University (94 videos)


 Graph Theory by Sarada Herke (67 videos)



Computer Science Courses

Directory of Online CS Courses
Directory of CS Courses (many with online lectures)

Papers

Papers

Love classic papers?
 1978: Communicating Sequential Processes

implemented in Go


 2003: The Google File System

replaced by Colossus in 2012


 2004: MapReduce: Simplified Data Processing on Large Clusters

mostly replaced by Cloud Dataflow?


 2006: Bigtable: A Distributed Storage System for Structured Data

An Inside Look at Google BigQuery


 2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems
 2007: Dynamo: Amazon’s Highly Available Key-value Store

The Dynamo paper kicked off the NoSQL revolution


 2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)
 2010: Dapper, a Large-Scale Distributed Systems Tracing Infrastructure
 2010: Dremel: Interactive Analysis of Web-Scale Datasets
 2012: Google's Colossus

paper not available


 2012: AddressSanitizer: A Fast Address Sanity Checker:

paper
video


 2013: Spanner: Google’s Globally-Distributed Database:

paper
video


 2014: Machine Learning: The High-Interest Credit Card of Technical Debt
 2015: Continuous Pipelines at Google
 2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads
 2015: TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems
 2015: How Developers Search for Code: A Case Study
 2016: Borg, Omega, and Kubernetes


LICENSE
CC-BY-SA-4.0

"
11,"
A collection of .gitignore templates
This is GitHub’s collection of .gitignore file templates.
We use this list to populate the .gitignore template choosers available
in the GitHub.com interface when creating new repositories and files.
For more information about how .gitignore files work, and how to use them,
the following resources are a great place to start:

The Ignoring Files chapter of the Pro Git book.
The Ignoring Files article on the GitHub Help site.
The gitignore(5) manual page.

Folder structure
We support a collection of templates, organized in this way:

the root folder contains templates in common use, to help people get started
with popular programming languages and technologies. These define a meaningful
set of rules to help get started, and ensure you are not committing
unimportant files into your repository
Global contains templates for various editors, tools and
operating systems that can be used in different situations. It is recommended
that you either add these to your global template
or merge these rules into your project-specific templates if you want to use
them permanently.
community contains specialized templates for other popular
languages, tools and project, which don't currently belong in the mainstream
templates. These should be added to your project-specific templates when you
decide to adopt the framework or tool.

What makes a good template?
A template should contain a set of rules to help Git repositories work with a
specific programming language, framework, tool or environment.
If it's not possible to curate a small set of useful rules for this situation,
then the template is not a good fit for this collection.
If a template is mostly a list of files installed by a particular version of
some software (e.g. a PHP framework), it could live under the community
directory. See versioned templates for more details.
If you have a small set of rules, or want to support a technology that is not
widely in use, and still believe this will be helpful to others, please read the
section about specialized templates for more details.
If you believe your template is important and should be highly visible, please
add details about the impact of the technology when you open a pull request. We
may not accept it immediately, but we can promote it to the root at a later date
based on interest.
Please also understand that we can’t list every tool that ever existed.
Our aim is to curate a collection of the most common and helpful templates,
not to make sure we cover every project possible. If we choose not to
include your language, tool, or project, it’s not because it’s not awesome.
Contributing guidelines
We’d love for you to help us improve this project. To help us keep this collection
high quality, we request that contributions adhere to the following guidelines.


Provide a link to the application or project’s homepage. Unless it’s
extremely popular, there’s a chance the maintainers don’t know about or use
the language, framework, editor, app, or project your change applies to.


Provide links to documentation supporting the change you’re making.
Current, canonical documentation mentioning the files being ignored is best.
If documentation isn’t available to support your change, do the best you can
to explain what the files being ignored are for.


Explain why you’re making a change. Even if it seems self-evident, please
take a sentence or two to tell us why your change or addition should happen.
It’s especially helpful to articulate why this change applies to everyone
who works with the applicable technology, rather than just you or your team.


Please consider the scope of your change. If your change is specific to a
certain language or framework, then make sure the change is made to the
template for that language or framework, rather than to the template for an
editor, tool, or operating system.


Please only modify one template per pull request. This helps keep pull
requests and feedback focused on a specific project or technology.


In general, the more you can do to help us understand the change you’re making,
the more likely we’ll be to accept your contribution quickly.
Versioned templates
Some templates can change greatly between versions, and if you wish to contribute
to this repository we need to follow this specific flow:

the template at the root should be the current supported version
the template at the root should not have a version in the filename (i.e.
""evergreen"")
previous versions of templates should live under community/
previous versions of the template should embed the version in the filename,
for readability

This helps ensure users get the latest version (because they'll use whatever is
at the root) but helps maintainers support older versions still in the wild.
Specialized templates
If you have a template that you would like to contribute, but it isn't quite
mainstream, please consider adding this to the community directory under a
folder that best suits where it belongs.
The rules in your specialized template should be specific to the framework or
tool, and any additional templates should be mentioned in a comment in the
header of the template
For example, this template might live at community/DotNet/InforCRM.gitignore:
# gitignore template for InforCRM (formerly SalesLogix)
# website: https://www.infor.com/product-summary/cx/infor-crm/
#
# Recommended: VisualStudio.gitignore

# Ignore model files that are auto-generated
ModelIndex.xml
ExportedFiles.xml

# Ignore deployment files
[Mm]odel/[Dd]eployment

# Force include portal SupportFiles
!Model/Portal/*/SupportFiles/[Bb]in/
!Model/Portal/PortalTemplates/*/SupportFiles/[Bb]in

Contributing workflow
Here’s how we suggest you go about proposing a change to this project:

Fork this project to your account.
Create a branch for the change you intend to make.
Make your changes to your fork.
Send a pull request from your fork’s branch to our master branch.

Using the web-based interface to make changes is fine too, and will help you
by automatically forking the project and prompting to send a pull request too.
License
CC0-1.0.

"
12,"


Roadmap to becoming a web developer in 2019


Below you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a frontend, backend or a devops. I made these charts for an old professor of mine who wanted something to share with his college students to give them a perspective; sharing them here to help the community.
If you think that these can be improved in anyway, please do suggest.

 🎉 We are working on a more concise version of these roadmaps 🎉 Keep your eyes on roadmap.sh for the details!


The purpose of these roadmaps is to give you an idea about the landscape and to guide you if you are confused about what to learn next and not to encourage you to pick what is hip and trendy. You should grow some understanding of why one tool would better suited for some cases than the other and remember hip and trendy never means best suited for the job.

Introduction

Frontend Roadmap

Back-end Roadmap

DevOps Roadmap

🚦 Wrap Up
If you think any of the roadmaps can be improved, feel free to discuss it in the issues. Also, I will continue to improve this, so you might want to watch this repository or subscribe at roadmap.sh to revisit.
🙌 Contribution

Have a look at contribution docs for how to update any of the roadmaps


Open pull request with improvements
Discuss ideas in issues
Spread the word
Reach out with any feedback 

License


"
13,"
Airbnb JavaScript Style Guide() {
A mostly reasonable approach to JavaScript

Note: this guide assumes you are using Babel, and requires that you use babel-preset-airbnb or the equivalent. It also assumes you are installing shims/polyfills in your app, with airbnb-browser-shims or the equivalent.




This guide is available in other languages too. See Translation
Other Style Guides

ES5 (Deprecated)
React
CSS-in-JavaScript
CSS & Sass
Ruby

Table of Contents

Types
References
Objects
Arrays
Destructuring
Strings
Functions
Arrow Functions
Classes & Constructors
Modules
Iterators and Generators
Properties
Variables
Hoisting
Comparison Operators & Equality
Blocks
Control Statements
Comments
Whitespace
Commas
Semicolons
Type Casting & Coercion
Naming Conventions
Accessors
Events
jQuery
ECMAScript 5 Compatibility
ECMAScript 6+ (ES 2015+) Styles
Standard Library
Testing
Performance
Resources
In the Wild
Translation
The JavaScript Style Guide Guide
Chat With Us About JavaScript
Contributors
License
Amendments

Types



1.1 Primitives: When you access a primitive type you work directly on its value.

string
number
boolean
null
undefined
symbol

const foo = 1;
let bar = foo;

bar = 9;

console.log(foo, bar); // => 1, 9

Symbols cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively.






1.2 Complex: When you access a complex type you work on a reference to its value.

object
array
function

const foo = [1, 2];
const bar = foo;

bar[0] = 9;

console.log(foo[0], bar[0]); // => 9, 9


⬆ back to top
References



2.1 Use const for all of your references; avoid using var. eslint: prefer-const, no-const-assign

Why? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.

// bad
var a = 1;
var b = 2;

// good
const a = 1;
const b = 2;





2.2 If you must reassign references, use let instead of var. eslint: no-var

Why? let is block-scoped rather than function-scoped like var.

// bad
var count = 1;
if (true) {
  count += 1;
}

// good, use the let.
let count = 1;
if (true) {
  count += 1;
}





2.3 Note that both let and const are block-scoped.
// const and let only exist in the blocks they are defined in.
{
  let a = 1;
  const b = 1;
}
console.log(a); // ReferenceError
console.log(b); // ReferenceError


⬆ back to top
Objects



3.1 Use the literal syntax for object creation. eslint: no-new-object
// bad
const item = new Object();

// good
const item = {};





3.2 Use computed property names when creating objects with dynamic property names.

Why? They allow you to define all the properties of an object in one place.

function getKey(k) {
  return `a key named ${k}`;
}

// bad
const obj = {
  id: 5,
  name: 'San Francisco',
};
obj[getKey('enabled')] = true;

// good
const obj = {
  id: 5,
  name: 'San Francisco',
  [getKey('enabled')]: true,
};





3.3 Use object method shorthand. eslint: object-shorthand
// bad
const atom = {
  value: 1,

  addValue: function (value) {
    return atom.value + value;
  },
};

// good
const atom = {
  value: 1,

  addValue(value) {
    return atom.value + value;
  },
};





3.4 Use property value shorthand. eslint: object-shorthand

Why? It is shorter and descriptive.

const lukeSkywalker = 'Luke Skywalker';

// bad
const obj = {
  lukeSkywalker: lukeSkywalker,
};

// good
const obj = {
  lukeSkywalker,
};





3.5 Group your shorthand properties at the beginning of your object declaration.

Why? It’s easier to tell which properties are using the shorthand.

const anakinSkywalker = 'Anakin Skywalker';
const lukeSkywalker = 'Luke Skywalker';

// bad
const obj = {
  episodeOne: 1,
  twoJediWalkIntoACantina: 2,
  lukeSkywalker,
  episodeThree: 3,
  mayTheFourth: 4,
  anakinSkywalker,
};

// good
const obj = {
  lukeSkywalker,
  anakinSkywalker,
  episodeOne: 1,
  twoJediWalkIntoACantina: 2,
  episodeThree: 3,
  mayTheFourth: 4,
};





3.6 Only quote properties that are invalid identifiers. eslint: quote-props

Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.

// bad
const bad = {
  'foo': 3,
  'bar': 4,
  'data-blah': 5,
};

// good
const good = {
  foo: 3,
  bar: 4,
  'data-blah': 5,
};





3.7 Do not call Object.prototype methods directly, such as hasOwnProperty, propertyIsEnumerable, and isPrototypeOf. eslint: no-prototype-builtins

Why? These methods may be shadowed by properties on the object in question - consider { hasOwnProperty: false } - or, the object may be a null object (Object.create(null)).

// bad
console.log(object.hasOwnProperty(key));

// good
console.log(Object.prototype.hasOwnProperty.call(object, key));

// best
const has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.
console.log(has.call(object, key));
/* or */
import has from 'has'; // https://www.npmjs.com/package/has
console.log(has(object, key));





3.8 Prefer the object spread operator over Object.assign to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.
// very bad
const original = { a: 1, b: 2 };
const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ
delete copy.a; // so does this

// bad
const original = { a: 1, b: 2 };
const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }

// good
const original = { a: 1, b: 2 };
const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }

const { a, ...noA } = copy; // noA => { b: 2, c: 3 }


⬆ back to top
Arrays



4.1 Use the literal syntax for array creation. eslint: no-array-constructor
// bad
const items = new Array();

// good
const items = [];





4.2 Use Array#push instead of direct assignment to add items to an array.
const someStack = [];

// bad
someStack[someStack.length] = 'abracadabra';

// good
someStack.push('abracadabra');





4.3 Use array spreads ... to copy arrays.
// bad
const len = items.length;
const itemsCopy = [];
let i;

for (i = 0; i < len; i += 1) {
  itemsCopy[i] = items[i];
}

// good
const itemsCopy = [...items];






4.4 To convert an iterable object to an array, use spreads ... instead of Array.from.
const foo = document.querySelectorAll('.foo');

// good
const nodes = Array.from(foo);

// best
const nodes = [...foo];





4.5 Use Array.from for converting an array-like object to an array.
const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };

// bad
const arr = Array.prototype.slice.call(arrLike);

// good
const arr = Array.from(arrLike);





4.6 Use Array.from instead of spread ... for mapping over iterables, because it avoids creating an intermediate array.
// bad
const baz = [...foo].map(bar);

// good
const baz = Array.from(foo, bar);





4.7 Use return statements in array method callbacks. It’s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following 8.2. eslint: array-callback-return
// good
[1, 2, 3].map((x) => {
  const y = x + 1;
  return x * y;
});

// good
[1, 2, 3].map((x) => x + 1);

// bad - no returned value means `acc` becomes undefined after the first iteration
[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {
  const flatten = acc.concat(item);
});

// good
[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {
  const flatten = acc.concat(item);
  return flatten;
});

// bad
inbox.filter((msg) => {
  const { subject, author } = msg;
  if (subject === 'Mockingbird') {
    return author === 'Harper Lee';
  } else {
    return false;
  }
});

// good
inbox.filter((msg) => {
  const { subject, author } = msg;
  if (subject === 'Mockingbird') {
    return author === 'Harper Lee';
  }

  return false;
});





4.8 Use line breaks after open and before close array brackets if an array has multiple lines
// bad
const arr = [
  [0, 1], [2, 3], [4, 5],
];

const objectInArray = [{
  id: 1,
}, {
  id: 2,
}];

const numberInArray = [
  1, 2,
];

// good
const arr = [[0, 1], [2, 3], [4, 5]];

const objectInArray = [
  {
    id: 1,
  },
  {
    id: 2,
  },
];

const numberInArray = [
  1,
  2,
];


⬆ back to top
Destructuring



5.1 Use object destructuring when accessing and using multiple properties of an object. eslint: prefer-destructuring

Why? Destructuring saves you from creating temporary references for those properties.

// bad
function getFullName(user) {
  const firstName = user.firstName;
  const lastName = user.lastName;

  return `${firstName} ${lastName}`;
}

// good
function getFullName(user) {
  const { firstName, lastName } = user;
  return `${firstName} ${lastName}`;
}

// best
function getFullName({ firstName, lastName }) {
  return `${firstName} ${lastName}`;
}





5.2 Use array destructuring. eslint: prefer-destructuring
const arr = [1, 2, 3, 4];

// bad
const first = arr[0];
const second = arr[1];

// good
const [first, second] = arr;





5.3 Use object destructuring for multiple return values, not array destructuring.

Why? You can add new properties over time or change the order of things without breaking call sites.

// bad
function processInput(input) {
  // then a miracle occurs
  return [left, right, top, bottom];
}

// the caller needs to think about the order of return data
const [left, __, top] = processInput(input);

// good
function processInput(input) {
  // then a miracle occurs
  return { left, right, top, bottom };
}

// the caller selects only the data they need
const { left, top } = processInput(input);


⬆ back to top
Strings



6.1 Use single quotes '' for strings. eslint: quotes
// bad
const name = ""Capt. Janeway"";

// bad - template literals should contain interpolation or newlines
const name = `Capt. Janeway`;

// good
const name = 'Capt. Janeway';





6.2 Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.

Why? Broken strings are painful to work with and make code less searchable.

// bad
const errorMessage = 'This is a super long error that was thrown because \
of Batman. When you stop to think about how Batman had anything to do \
with this, you would get nowhere \
fast.';

// bad
const errorMessage = 'This is a super long error that was thrown because ' +
  'of Batman. When you stop to think about how Batman had anything to do ' +
  'with this, you would get nowhere fast.';

// good
const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';





6.3 When programmatically building up strings, use template strings instead of concatenation. eslint: prefer-template template-curly-spacing

Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.

// bad
function sayHi(name) {
  return 'How are you, ' + name + '?';
}

// bad
function sayHi(name) {
  return ['How are you, ', name, '?'].join();
}

// bad
function sayHi(name) {
  return `How are you, ${ name }?`;
}

// good
function sayHi(name) {
  return `How are you, ${name}?`;
}




6.4 Never use eval() on a string, it opens too many vulnerabilities. eslint: no-eval




6.5 Do not unnecessarily escape characters in strings. eslint: no-useless-escape

Why? Backslashes harm readability, thus they should only be present when necessary.

// bad
const foo = '\'this\' \i\s \""quoted\""';

// good
const foo = '\'this\' is ""quoted""';
const foo = `my name is '${name}'`;


⬆ back to top
Functions



7.1 Use named function expressions instead of function declarations. eslint: func-style

Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. (Discussion)

// bad
function foo() {
  // ...
}

// bad
const foo = function () {
  // ...
};

// good
// lexical name distinguished from the variable-referenced invocation(s)
const short = function longUniqueMoreDescriptiveLexicalFoo() {
  // ...
};





7.2 Wrap immediately invoked function expressions in parentheses. eslint: wrap-iife

Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.

// immediately-invoked function expression (IIFE)
(function () {
  console.log('Welcome to the Internet. Please follow me.');
}());




7.3 Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: no-loop-func




7.4 Note: ECMA-262 defines a block as a list of statements. A function declaration is not a statement.
// bad
if (currentUser) {
  function test() {
    console.log('Nope.');
  }
}

// good
let test;
if (currentUser) {
  test = () => {
    console.log('Yup.');
  };
}





7.5 Never name a parameter arguments. This will take precedence over the arguments object that is given to every function scope.
// bad
function foo(name, options, arguments) {
  // ...
}

// good
function foo(name, options, args) {
  // ...
}





7.6 Never use arguments, opt to use rest syntax ... instead. eslint: prefer-rest-params

Why? ... is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like arguments.

// bad
function concatenateAll() {
  const args = Array.prototype.slice.call(arguments);
  return args.join('');
}

// good
function concatenateAll(...args) {
  return args.join('');
}





7.7 Use default parameter syntax rather than mutating function arguments.
// really bad
function handleThings(opts) {
  // No! We shouldn’t mutate function arguments.
  // Double bad: if opts is falsy it'll be set to an object which may
  // be what you want but it can introduce subtle bugs.
  opts = opts || {};
  // ...
}

// still bad
function handleThings(opts) {
  if (opts === void 0) {
    opts = {};
  }
  // ...
}

// good
function handleThings(opts = {}) {
  // ...
}





7.8 Avoid side effects with default parameters.

Why? They are confusing to reason about.

var b = 1;
// bad
function count(a = b++) {
  console.log(a);
}
count();  // 1
count();  // 2
count(3); // 3
count();  // 3





7.9 Always put default parameters last.
// bad
function handleThings(opts = {}, name) {
  // ...
}

// good
function handleThings(name, opts = {}) {
  // ...
}





7.10 Never use the Function constructor to create a new function. eslint: no-new-func

Why? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.

// bad
var add = new Function('a', 'b', 'return a + b');

// still bad
var subtract = Function('a', 'b', 'return a - b');





7.11 Spacing in a function signature. eslint: space-before-function-paren space-before-blocks

Why? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.

// bad
const f = function(){};
const g = function (){};
const h = function() {};

// good
const x = function () {};
const y = function a() {};





7.12 Never mutate parameters. eslint: no-param-reassign

Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.

// bad
function f1(obj) {
  obj.key = 1;
}

// good
function f2(obj) {
  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;
}





7.13 Never reassign parameters. eslint: no-param-reassign

Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the arguments object. It can also cause optimization issues, especially in V8.

// bad
function f1(a) {
  a = 1;
  // ...
}

function f2(a) {
  if (!a) { a = 1; }
  // ...
}

// good
function f3(a) {
  const b = a || 1;
  // ...
}

function f4(a = 1) {
  // ...
}





7.14 Prefer the use of the spread operator ... to call variadic functions. eslint: prefer-spread

Why? It’s cleaner, you don’t need to supply a context, and you can not easily compose new with apply.

// bad
const x = [1, 2, 3, 4, 5];
console.log.apply(console, x);

// good
const x = [1, 2, 3, 4, 5];
console.log(...x);

// bad
new (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));

// good
new Date(...[2016, 8, 5]);





7.15 Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: function-paren-newline
// bad
function foo(bar,
             baz,
             quux) {
  // ...
}

// good
function foo(
  bar,
  baz,
  quux,
) {
  // ...
}

// bad
console.log(foo,
  bar,
  baz);

// good
console.log(
  foo,
  bar,
  baz,
);


⬆ back to top
Arrow Functions



8.1 When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: prefer-arrow-callback, arrow-spacing

Why? It creates a version of the function that executes in the context of this, which is usually what you want, and is a more concise syntax.


Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.

// bad
[1, 2, 3].map(function (x) {
  const y = x + 1;
  return x * y;
});

// good
[1, 2, 3].map((x) => {
  const y = x + 1;
  return x * y;
});





8.2 If the function body consists of a single statement returning an expression without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a return statement. eslint: arrow-parens, arrow-body-style

Why? Syntactic sugar. It reads well when multiple functions are chained together.

// bad
[1, 2, 3].map((number) => {
  const nextNumber = number + 1;
  `A string containing the ${nextNumber}.`;
});

// good
[1, 2, 3].map((number) => `A string containing the ${number + 1}.`);

// good
[1, 2, 3].map((number) => {
  const nextNumber = number + 1;
  return `A string containing the ${nextNumber}.`;
});

// good
[1, 2, 3].map((number, index) => ({
  [index]: number,
}));

// No implicit return with side effects
function foo(callback) {
  const val = callback();
  if (val === true) {
    // Do something if callback returns true
  }
}

let bool = false;

// bad
foo(() => bool = true);

// good
foo(() => {
  bool = true;
});





8.3 In case the expression spans over multiple lines, wrap it in parentheses for better readability.

Why? It shows clearly where the function starts and ends.

// bad
['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(
    httpMagicObjectWithAVeryLongName,
    httpMethod,
  )
);

// good
['get', 'post', 'put'].map((httpMethod) => (
  Object.prototype.hasOwnProperty.call(
    httpMagicObjectWithAVeryLongName,
    httpMethod,
  )
));





8.4 Always include parentheses around arguments for clarity and consistency. eslint: arrow-parens

Why? Minimizes diff churn when adding or removing arguments.

// bad
[1, 2, 3].map(x => x * x);

// good
[1, 2, 3].map((x) => x * x);

// bad
[1, 2, 3].map(number => (
  `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`
));

// good
[1, 2, 3].map((number) => (
  `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`
));

// bad
[1, 2, 3].map(x => {
  const y = x + 1;
  return x * y;
});

// good
[1, 2, 3].map((x) => {
  const y = x + 1;
  return x * y;
});





8.5 Avoid confusing arrow function syntax (=>) with comparison operators (<=, >=). eslint: no-confusing-arrow
// bad
const itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;

// bad
const itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;

// good
const itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);

// good
const itemHeight = (item) => {
  const { height, largeSize, smallSize } = item;
  return height <= 256 ? largeSize : smallSize;
};





8.6 Enforce the location of arrow function bodies with implicit returns. eslint: implicit-arrow-linebreak
// bad
(foo) =>
  bar;

(foo) =>
  (bar);

// good
(foo) => bar;
(foo) => (bar);
(foo) => (
   bar
)


⬆ back to top
Classes & Constructors



9.1 Always use class. Avoid manipulating prototype directly.

Why? class syntax is more concise and easier to reason about.

// bad
function Queue(contents = []) {
  this.queue = [...contents];
}
Queue.prototype.pop = function () {
  const value = this.queue[0];
  this.queue.splice(0, 1);
  return value;
};

// good
class Queue {
  constructor(contents = []) {
    this.queue = [...contents];
  }
  pop() {
    const value = this.queue[0];
    this.queue.splice(0, 1);
    return value;
  }
}





9.2 Use extends for inheritance.

Why? It is a built-in way to inherit prototype functionality without breaking instanceof.

// bad
const inherits = require('inherits');
function PeekableQueue(contents) {
  Queue.apply(this, contents);
}
inherits(PeekableQueue, Queue);
PeekableQueue.prototype.peek = function () {
  return this.queue[0];
};

// good
class PeekableQueue extends Queue {
  peek() {
    return this.queue[0];
  }
}





9.3 Methods can return this to help with method chaining.
// bad
Jedi.prototype.jump = function () {
  this.jumping = true;
  return true;
};

Jedi.prototype.setHeight = function (height) {
  this.height = height;
};

const luke = new Jedi();
luke.jump(); // => true
luke.setHeight(20); // => undefined

// good
class Jedi {
  jump() {
    this.jumping = true;
    return this;
  }

  setHeight(height) {
    this.height = height;
    return this;
  }
}

const luke = new Jedi();

luke.jump()
  .setHeight(20);





9.4 It’s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.
class Jedi {
  constructor(options = {}) {
    this.name = options.name || 'no name';
  }

  getName() {
    return this.name;
  }

  toString() {
    return `Jedi - ${this.getName()}`;
  }
}





9.5 Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: no-useless-constructor
// bad
class Jedi {
  constructor() {}

  getName() {
    return this.name;
  }
}

// bad
class Rey extends Jedi {
  constructor(...args) {
    super(...args);
  }
}

// good
class Rey extends Jedi {
  constructor(...args) {
    super(...args);
    this.name = 'Rey';
  }
}





9.6 Avoid duplicate class members. eslint: no-dupe-class-members

Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.

// bad
class Foo {
  bar() { return 1; }
  bar() { return 2; }
}

// good
class Foo {
  bar() { return 1; }
}

// good
class Foo {
  bar() { return 2; }
}





9.7 Class methods should use this or be made into a static method unless an external library or framework requires to use specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: class-methods-use-this
// bad
class Foo {
  bar() {
    console.log('bar');
  }
}

// good - this is used
class Foo {
  bar() {
    console.log(this.bar);
  }
}

// good - constructor is exempt
class Foo {
  constructor() {
    // ...
  }
}

// good - static methods aren't expected to use this
class Foo {
  static bar() {
    console.log('bar');
  }
}


⬆ back to top
Modules



10.1 Always use modules (import/export) over a non-standard module system. You can always transpile to your preferred module system.

Why? Modules are the future, let’s start using the future now.

// bad
const AirbnbStyleGuide = require('./AirbnbStyleGuide');
module.exports = AirbnbStyleGuide.es6;

// ok
import AirbnbStyleGuide from './AirbnbStyleGuide';
export default AirbnbStyleGuide.es6;

// best
import { es6 } from './AirbnbStyleGuide';
export default es6;





10.2 Do not use wildcard imports.

Why? This makes sure you have a single default export.

// bad
import * as AirbnbStyleGuide from './AirbnbStyleGuide';

// good
import AirbnbStyleGuide from './AirbnbStyleGuide';





10.3 And do not export directly from an import.

Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.

// bad
// filename es6.js
export { es6 as default } from './AirbnbStyleGuide';

// good
// filename es6.js
import { es6 } from './AirbnbStyleGuide';
export default es6;





10.4 Only import from a path in one place.
eslint: no-duplicate-imports

Why? Having multiple lines that import from the same path can make code harder to maintain.

// bad
import foo from 'foo';
// … some other imports … //
import { named1, named2 } from 'foo';

// good
import foo, { named1, named2 } from 'foo';

// good
import foo, {
  named1,
  named2,
} from 'foo';





10.5 Do not export mutable bindings.
eslint: import/no-mutable-exports

Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.

// bad
let foo = 3;
export { foo };

// good
const foo = 3;
export { foo };





10.6 In modules with a single export, prefer default export over named export.
eslint: import/prefer-default-export

Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.

// bad
export function foo() {}

// good
export default function foo() {}





10.7 Put all imports above non-import statements.
eslint: import/first

Why? Since imports are hoisted, keeping them all at the top prevents surprising behavior.

// bad
import foo from 'foo';
foo.init();

import bar from 'bar';

// good
import foo from 'foo';
import bar from 'bar';

foo.init();





10.8 Multiline imports should be indented just like multiline array and object literals.

Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.

// bad
import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';

// good
import {
  longNameA,
  longNameB,
  longNameC,
  longNameD,
  longNameE,
} from 'path';





10.9 Disallow Webpack loader syntax in module import statements.
eslint: import/no-webpack-loader-syntax

Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in webpack.config.js.

// bad
import fooSass from 'css!sass!foo.scss';
import barCss from 'style!css!bar.css';

// good
import fooSass from 'foo.scss';
import barCss from 'bar.css';


⬆ back to top
Iterators and Generators



11.1 Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like for-in or for-of. eslint: no-iterator no-restricted-syntax

Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.


Use map() / every() / filter() / find() / findIndex() / reduce() / some() / ... to iterate over arrays, and Object.keys() / Object.values() / Object.entries() to produce arrays so you can iterate over objects.

const numbers = [1, 2, 3, 4, 5];

// bad
let sum = 0;
for (let num of numbers) {
  sum += num;
}
sum === 15;

// good
let sum = 0;
numbers.forEach((num) => {
  sum += num;
});
sum === 15;

// best (use the functional force)
const sum = numbers.reduce((total, num) => total + num, 0);
sum === 15;

// bad
const increasedByOne = [];
for (let i = 0; i < numbers.length; i++) {
  increasedByOne.push(numbers[i] + 1);
}

// good
const increasedByOne = [];
numbers.forEach((num) => {
  increasedByOne.push(num + 1);
});

// best (keeping it functional)
const increasedByOne = numbers.map((num) => num + 1);





11.2 Don’t use generators for now.

Why? They don’t transpile well to ES5.






11.3 If you must use generators, or if you disregard our advice, make sure their function signature is spaced properly. eslint: generator-star-spacing

Why? function and * are part of the same conceptual keyword - * is not a modifier for function, function* is a unique construct, different from function.

// bad
function * foo() {
  // ...
}

// bad
const bar = function * () {
  // ...
};

// bad
const baz = function *() {
  // ...
};

// bad
const quux = function*() {
  // ...
};

// bad
function*foo() {
  // ...
}

// bad
function *foo() {
  // ...
}

// very bad
function
*
foo() {
  // ...
}

// very bad
const wat = function
*
() {
  // ...
};

// good
function* foo() {
  // ...
}

// good
const foo = function* () {
  // ...
};


⬆ back to top
Properties



12.1 Use dot notation when accessing properties. eslint: dot-notation
const luke = {
  jedi: true,
  age: 28,
};

// bad
const isJedi = luke['jedi'];

// good
const isJedi = luke.jedi;





12.2 Use bracket notation [] when accessing properties with a variable.
const luke = {
  jedi: true,
  age: 28,
};

function getProp(prop) {
  return luke[prop];
}

const isJedi = getProp('jedi');





12.3 Use exponentiation operator ** when calculating exponentiations. eslint: no-restricted-properties.
// bad
const binary = Math.pow(2, 10);

// good
const binary = 2 ** 10;


⬆ back to top
Variables



13.1 Always use const or let to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: no-undef prefer-const
// bad
superPower = new SuperPower();

// good
const superPower = new SuperPower();





13.2 Use one const or let declaration per variable or assignment. eslint: one-var

Why? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.

// bad
const items = getItems(),
    goSportsTeam = true,
    dragonball = 'z';

// bad
// (compare to above, and try to spot the mistake)
const items = getItems(),
    goSportsTeam = true;
    dragonball = 'z';

// good
const items = getItems();
const goSportsTeam = true;
const dragonball = 'z';





13.3 Group all your consts and then group all your lets.

Why? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.

// bad
let i, len, dragonball,
    items = getItems(),
    goSportsTeam = true;

// bad
let i;
const items = getItems();
let dragonball;
const goSportsTeam = true;
let len;

// good
const goSportsTeam = true;
const items = getItems();
let dragonball;
let i;
let length;





13.4 Assign variables where you need them, but place them in a reasonable place.

Why? let and const are block scoped and not function scoped.

// bad - unnecessary function call
function checkName(hasName) {
  const name = getName();

  if (hasName === 'test') {
    return false;
  }

  if (name === 'test') {
    this.setName('');
    return false;
  }

  return name;
}

// good
function checkName(hasName) {
  if (hasName === 'test') {
    return false;
  }

  const name = getName();

  if (name === 'test') {
    this.setName('');
    return false;
  }

  return name;
}





13.5 Don’t chain variable assignments. eslint: no-multi-assign

Why? Chaining variable assignments creates implicit global variables.

// bad
(function example() {
  // JavaScript interprets this as
  // let a = ( b = ( c = 1 ) );
  // The let keyword only applies to variable a; variables b and c become
  // global variables.
  let a = b = c = 1;
}());

console.log(a); // throws ReferenceError
console.log(b); // 1
console.log(c); // 1

// good
(function example() {
  let a = 1;
  let b = a;
  let c = a;
}());

console.log(a); // throws ReferenceError
console.log(b); // throws ReferenceError
console.log(c); // throws ReferenceError

// the same applies for `const`





13.6 Avoid using unary increments and decrements (++, --). eslint no-plusplus

Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like num += 1 instead of num++ or num ++. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.

// bad

const array = [1, 2, 3];
let num = 1;
num++;
--num;

let sum = 0;
let truthyCount = 0;
for (let i = 0; i < array.length; i++) {
  let value = array[i];
  sum += value;
  if (value) {
    truthyCount++;
  }
}

// good

const array = [1, 2, 3];
let num = 1;
num += 1;
num -= 1;

const sum = array.reduce((a, b) => a + b, 0);
const truthyCount = array.filter(Boolean).length;





13.7 Avoid linebreaks before or after = in an assignment. If your assignment violates max-len, surround the value in parens. eslint operator-linebreak.

Why? Linebreaks surrounding = can obfuscate the value of an assignment.

// bad
const foo =
  superLongLongLongLongLongLongLongLongFunctionName();

// bad
const foo
  = 'superLongLongLongLongLongLongLongLongString';

// good
const foo = (
  superLongLongLongLongLongLongLongLongFunctionName()
);

// good
const foo = 'superLongLongLongLongLongLongLongLongString';





13.8 Disallow unused variables. eslint: no-unused-vars

Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.

// bad

var some_unused_var = 42;

// Write-only variables are not considered as used.
var y = 10;
y = 5;

// A read for a modification of itself is not considered as used.
var z = 0;
z = z + 1;

// Unused function arguments.
function getX(x, y) {
    return x;
}

// good

function getXPlusY(x, y) {
  return x + y;
}

var x = 1;
var y = a + 2;

alert(getXPlusY(x, y));

// 'type' is ignored even if unused because it has a rest property sibling.
// This is a form of extracting an object that omits the specified keys.
var { type, ...coords } = data;
// 'coords' is now the 'data' object without its 'type' property.


⬆ back to top
Hoisting



14.1 var declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. const and let declarations are blessed with a new concept called Temporal Dead Zones (TDZ). It’s important to know why typeof is no longer safe.
// we know this wouldn’t work (assuming there
// is no notDefined global variable)
function example() {
  console.log(notDefined); // => throws a ReferenceError
}

// creating a variable declaration after you
// reference the variable will work due to
// variable hoisting. Note: the assignment
// value of `true` is not hoisted.
function example() {
  console.log(declaredButNotAssigned); // => undefined
  var declaredButNotAssigned = true;
}

// the interpreter is hoisting the variable
// declaration to the top of the scope,
// which means our example could be rewritten as:
function example() {
  let declaredButNotAssigned;
  console.log(declaredButNotAssigned); // => undefined
  declaredButNotAssigned = true;
}

// using const and let
function example() {
  console.log(declaredButNotAssigned); // => throws a ReferenceError
  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError
  const declaredButNotAssigned = true;
}





14.2 Anonymous function expressions hoist their variable name, but not the function assignment.
function example() {
  console.log(anonymous); // => undefined

  anonymous(); // => TypeError anonymous is not a function

  var anonymous = function () {
    console.log('anonymous function expression');
  };
}





14.3 Named function expressions hoist the variable name, not the function name or the function body.
function example() {
  console.log(named); // => undefined

  named(); // => TypeError named is not a function

  superPower(); // => ReferenceError superPower is not defined

  var named = function superPower() {
    console.log('Flying');
  };
}

// the same is true when the function name
// is the same as the variable name.
function example() {
  console.log(named); // => undefined

  named(); // => TypeError named is not a function

  var named = function named() {
    console.log('named');
  };
}





14.4 Function declarations hoist their name and the function body.
function example() {
  superPower(); // => Flying

  function superPower() {
    console.log('Flying');
  }
}


For more information refer to JavaScript Scoping & Hoisting by Ben Cherry.


⬆ back to top
Comparison Operators & Equality


15.1 Use === and !== over == and !=. eslint: eqeqeq




15.2 Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules:

Objects evaluate to true
Undefined evaluates to false
Null evaluates to false
Booleans evaluate to the value of the boolean
Numbers evaluate to false if +0, -0, or NaN, otherwise true
Strings evaluate to false if an empty string '', otherwise true

if ([0] && []) {
  // true
  // an array (even an empty one) is an object, objects will evaluate to true
}





15.3 Use shortcuts for booleans, but explicit comparisons for strings and numbers.
// bad
if (isValid === true) {
  // ...
}

// good
if (isValid) {
  // ...
}

// bad
if (name) {
  // ...
}

// good
if (name !== '') {
  // ...
}

// bad
if (collection.length) {
  // ...
}

// good
if (collection.length > 0) {
  // ...
}




15.4 For more information see Truth Equality and JavaScript by Angus Croll.




15.5 Use braces to create blocks in case and default clauses that contain lexical declarations (e.g. let, const, function, and class). eslint: no-case-declarations

Why? Lexical declarations are visible in the entire switch block but only get initialized when assigned, which only happens when its case is reached. This causes problems when multiple case clauses attempt to define the same thing.

// bad
switch (foo) {
  case 1:
    let x = 1;
    break;
  case 2:
    const y = 2;
    break;
  case 3:
    function f() {
      // ...
    }
    break;
  default:
    class C {}
}

// good
switch (foo) {
  case 1: {
    let x = 1;
    break;
  }
  case 2: {
    const y = 2;
    break;
  }
  case 3: {
    function f() {
      // ...
    }
    break;
  }
  case 4:
    bar();
    break;
  default: {
    class C {}
  }
}





15.6 Ternaries should not be nested and generally be single line expressions. eslint: no-nested-ternary
// bad
const foo = maybe1 > maybe2
  ? ""bar""
  : value1 > value2 ? ""baz"" : null;

// split into 2 separated ternary expressions
const maybeNull = value1 > value2 ? 'baz' : null;

// better
const foo = maybe1 > maybe2
  ? 'bar'
  : maybeNull;

// best
const foo = maybe1 > maybe2 ? 'bar' : maybeNull;





15.7 Avoid unneeded ternary statements. eslint: no-unneeded-ternary
// bad
const foo = a ? a : b;
const bar = c ? true : false;
const baz = c ? false : true;

// good
const foo = a || b;
const bar = !!c;
const baz = !c;





15.8 When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: +, -, and ** since their precedence is broadly understood. We recommend enclosing / and * in parentheses because their precedence can be ambiguous when they are mixed.
eslint: no-mixed-operators

Why? This improves readability and clarifies the developer’s intention.

// bad
const foo = a && b < 0 || c > 0 || d + 1 === 0;

// bad
const bar = a ** b - 5 % d;

// bad
// one may be confused into thinking (a || b) && c
if (a || b && c) {
  return d;
}

// bad
const bar = a + b / c * d;

// good
const foo = (a && b < 0) || c > 0 || (d + 1 === 0);

// good
const bar = a ** b - (5 % d);

// good
if (a || (b && c)) {
  return d;
}

// good
const bar = a + (b / c) * d;


⬆ back to top
Blocks



16.1 Use braces with all multi-line blocks. eslint: nonblock-statement-body-position
// bad
if (test)
  return false;

// good
if (test) return false;

// good
if (test) {
  return false;
}

// bad
function foo() { return false; }

// good
function bar() {
  return false;
}





16.2 If you’re using multi-line blocks with if and else, put else on the same line as your if block’s closing brace. eslint: brace-style
// bad
if (test) {
  thing1();
  thing2();
}
else {
  thing3();
}

// good
if (test) {
  thing1();
  thing2();
} else {
  thing3();
}





16.3 If an if block always executes a return statement, the subsequent else block is unnecessary. A return in an else if block following an if block that contains a return can be separated into multiple if blocks. eslint: no-else-return
// bad
function foo() {
  if (x) {
    return x;
  } else {
    return y;
  }
}

// bad
function cats() {
  if (x) {
    return x;
  } else if (y) {
    return y;
  }
}

// bad
function dogs() {
  if (x) {
    return x;
  } else {
    if (y) {
      return y;
    }
  }
}

// good
function foo() {
  if (x) {
    return x;
  }

  return y;
}

// good
function cats() {
  if (x) {
    return x;
  }

  if (y) {
    return y;
  }
}

// good
function dogs(x) {
  if (x) {
    if (z) {
      return y;
    }
  } else {
    return z;
  }
}


⬆ back to top
Control Statements



17.1 In case your control statement (if, while etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.

Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.

// bad
if ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {
  thing1();
}

// bad
if (foo === 123 &&
  bar === 'abc') {
  thing1();
}

// bad
if (foo === 123
  && bar === 'abc') {
  thing1();
}

// bad
if (
  foo === 123 &&
  bar === 'abc'
) {
  thing1();
}

// good
if (
  foo === 123
  && bar === 'abc'
) {
  thing1();
}

// good
if (
  (foo === 123 || bar === 'abc')
  && doesItLookGoodWhenItBecomesThatLong()
  && isThisReallyHappening()
) {
  thing1();
}

// good
if (foo === 123 && bar === 'abc') {
  thing1();
}





17.2 Don't use selection operators in place of control statements.
// bad
!isRunning && startRunning();

// good
if (!isRunning) {
  startRunning();
}


⬆ back to top
Comments



18.1 Use /** ... */ for multi-line comments.
// bad
// make() returns a new element
// based on the passed in tag name
//
// @param {String} tag
// @return {Element} element
function make(tag) {

  // ...

  return element;
}

// good
/**
 * make() returns a new element
 * based on the passed-in tag name
 */
function make(tag) {

  // ...

  return element;
}





18.2 Use // for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.
// bad
const active = true;  // is current tab

// good
// is current tab
const active = true;

// bad
function getType() {
  console.log('fetching type...');
  // set the default type to 'no type'
  const type = this.type || 'no type';

  return type;
}

// good
function getType() {
  console.log('fetching type...');

  // set the default type to 'no type'
  const type = this.type || 'no type';

  return type;
}

// also good
function getType() {
  // set the default type to 'no type'
  const type = this.type || 'no type';

  return type;
}





18.3 Start all comments with a space to make it easier to read. eslint: spaced-comment
// bad
//is current tab
const active = true;

// good
// is current tab
const active = true;

// bad
/**
 *make() returns a new element
 *based on the passed-in tag name
 */
function make(tag) {

  // ...

  return element;
}

// good
/**
 * make() returns a new element
 * based on the passed-in tag name
 */
function make(tag) {

  // ...

  return element;
}




18.4 Prefixing your comments with FIXME or TODO helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are FIXME: -- need to figure this out or TODO: -- need to implement.




18.5 Use // FIXME: to annotate problems.
class Calculator extends Abacus {
  constructor() {
    super();

    // FIXME: shouldn’t use a global here
    total = 0;
  }
}





18.6 Use // TODO: to annotate solutions to problems.
class Calculator extends Abacus {
  constructor() {
    super();

    // TODO: total should be configurable by an options param
    this.total = 0;
  }
}


⬆ back to top
Whitespace



19.1 Use soft tabs (space character) set to 2 spaces. eslint: indent
// bad
function foo() {
∙∙∙∙let name;
}

// bad
function bar() {
∙let name;
}

// good
function baz() {
∙∙let name;
}





19.2 Place 1 space before the leading brace. eslint: space-before-blocks
// bad
function test(){
  console.log('test');
}

// good
function test() {
  console.log('test');
}

// bad
dog.set('attr',{
  age: '1 year',
  breed: 'Bernese Mountain Dog',
});

// good
dog.set('attr', {
  age: '1 year',
  breed: 'Bernese Mountain Dog',
});





19.3 Place 1 space before the opening parenthesis in control statements (if, while etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: keyword-spacing
// bad
if(isJedi) {
  fight ();
}

// good
if (isJedi) {
  fight();
}

// bad
function fight () {
  console.log ('Swooosh!');
}

// good
function fight() {
  console.log('Swooosh!');
}





19.4 Set off operators with spaces. eslint: space-infix-ops
// bad
const x=y+5;

// good
const x = y + 5;





19.5 End files with a single newline character. eslint: eol-last
// bad
import { es6 } from './AirbnbStyleGuide';
  // ...
export default es6;
// bad
import { es6 } from './AirbnbStyleGuide';
  // ...
export default es6;↵
↵
// good
import { es6 } from './AirbnbStyleGuide';
  // ...
export default es6;↵





19.6 Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which
emphasizes that the line is a method call, not a new statement. eslint: newline-per-chained-call no-whitespace-before-property
// bad
$('#items').find('.selected').highlight().end().find('.open').updateCount();

// bad
$('#items').
  find('.selected').
    highlight().
    end().
  find('.open').
    updateCount();

// good
$('#items')
  .find('.selected')
    .highlight()
    .end()
  .find('.open')
    .updateCount();

// bad
const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)
    .attr('width', (radius + margin) * 2).append('svg:g')
    .attr('transform', `translate(${radius + margin},${radius + margin})`)
    .call(tron.led);

// good
const leds = stage.selectAll('.led')
    .data(data)
  .enter().append('svg:svg')
    .classed('led', true)
    .attr('width', (radius + margin) * 2)
  .append('svg:g')
    .attr('transform', `translate(${radius + margin},${radius + margin})`)
    .call(tron.led);

// good
const leds = stage.selectAll('.led').data(data);





19.7 Leave a blank line after blocks and before the next statement.
// bad
if (foo) {
  return bar;
}
return baz;

// good
if (foo) {
  return bar;
}

return baz;

// bad
const obj = {
  foo() {
  },
  bar() {
  },
};
return obj;

// good
const obj = {
  foo() {
  },

  bar() {
  },
};

return obj;

// bad
const arr = [
  function foo() {
  },
  function bar() {
  },
];
return arr;

// good
const arr = [
  function foo() {
  },

  function bar() {
  },
];

return arr;





19.8 Do not pad your blocks with blank lines. eslint: padded-blocks
// bad
function bar() {

  console.log(foo);

}

// bad
if (baz) {

  console.log(qux);
} else {
  console.log(foo);

}

// bad
class Foo {

  constructor(bar) {
    this.bar = bar;
  }
}

// good
function bar() {
  console.log(foo);
}

// good
if (baz) {
  console.log(qux);
} else {
  console.log(foo);
}





19.9 Do not use multiple blank lines to pad your code. eslint: no-multiple-empty-lines
// bad
class Person {
  constructor(fullName, email, birthday) {
    this.fullName = fullName;


    this.email = email;


    this.setAge(birthday);
  }


  setAge(birthday) {
    const today = new Date();


    const age = this.getAge(today, birthday);


    this.age = age;
  }


  getAge(today, birthday) {
    // ..
  }
}

// good
class Person {
  constructor(fullName, email, birthday) {
    this.fullName = fullName;
    this.email = email;
    this.setAge(birthday);
  }

  setAge(birthday) {
    const today = new Date();
    const age = getAge(today, birthday);
    this.age = age;
  }

  getAge(today, birthday) {
    // ..
  }
}





19.10 Do not add spaces inside parentheses. eslint: space-in-parens
// bad
function bar( foo ) {
  return foo;
}

// good
function bar(foo) {
  return foo;
}

// bad
if ( foo ) {
  console.log(foo);
}

// good
if (foo) {
  console.log(foo);
}





19.11 Do not add spaces inside brackets. eslint: array-bracket-spacing
// bad
const foo = [ 1, 2, 3 ];
console.log(foo[ 0 ]);

// good
const foo = [1, 2, 3];
console.log(foo[0]);





19.12 Add spaces inside curly braces. eslint: object-curly-spacing
// bad
const foo = {clark: 'kent'};

// good
const foo = { clark: 'kent' };





19.13 Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per above, long strings are exempt from this rule, and should not be broken up. eslint: max-len

Why? This ensures readability and maintainability.

// bad
const foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;

// bad
$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));

// good
const foo = jsonData
  && jsonData.foo
  && jsonData.foo.bar
  && jsonData.foo.bar.baz
  && jsonData.foo.bar.baz.quux
  && jsonData.foo.bar.baz.quux.xyzzy;

// good
$.ajax({
  method: 'POST',
  url: 'https://airbnb.com/',
  data: { name: 'John' },
})
  .done(() => console.log('Congratulations!'))
  .fail(() => console.log('You have failed this city.'));





19.14 Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: block-spacing
// bad
function foo() {return true;}
if (foo) { bar = 0;}

// good
function foo() { return true; }
if (foo) { bar = 0; }





19.15 Avoid spaces before commas and require a space after commas. eslint: comma-spacing
// bad
var foo = 1,bar = 2;
var arr = [1 , 2];

// good
var foo = 1, bar = 2;
var arr = [1, 2];





19.16 Enforce spacing inside of computed property brackets. eslint: computed-property-spacing
// bad
obj[foo ]
obj[ 'foo']
var x = {[ b ]: a}
obj[foo[ bar ]]

// good
obj[foo]
obj['foo']
var x = { [b]: a }
obj[foo[bar]]





19.17 Avoid spaces between functions and their invocations. eslint: func-call-spacing
// bad
func ();

func
();

// good
func();





19.18 Enforce spacing between keys and values in object literal properties. eslint: key-spacing
// bad
var obj = { ""foo"" : 42 };
var obj2 = { ""foo"":42 };

// good
var obj = { ""foo"": 42 };




19.19 Avoid trailing spaces at the end of lines. eslint: no-trailing-spaces




19.20 Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: no-multiple-empty-lines
// bad - multiple empty lines
var x = 1;


var y = 2;

// bad - 2+ newlines at end of file
var x = 1;
var y = 2;


// bad - 1+ newline(s) at beginning of file

var x = 1;
var y = 2;

// good
var x = 1;
var y = 2;



⬆ back to top
Commas



20.1 Leading commas: Nope. eslint: comma-style
// bad
const story = [
    once
  , upon
  , aTime
];

// good
const story = [
  once,
  upon,
  aTime,
];

// bad
const hero = {
    firstName: 'Ada'
  , lastName: 'Lovelace'
  , birthYear: 1815
  , superPower: 'computers'
};

// good
const hero = {
  firstName: 'Ada',
  lastName: 'Lovelace',
  birthYear: 1815,
  superPower: 'computers',
};





20.2 Additional trailing comma: Yup. eslint: comma-dangle

Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the trailing comma problem in legacy browsers.

// bad - git diff without trailing comma
const hero = {
     firstName: 'Florence',
-    lastName: 'Nightingale'
+    lastName: 'Nightingale',
+    inventorOf: ['coxcomb chart', 'modern nursing']
};

// good - git diff with trailing comma
const hero = {
     firstName: 'Florence',
     lastName: 'Nightingale',
+    inventorOf: ['coxcomb chart', 'modern nursing'],
};
// bad
const hero = {
  firstName: 'Dana',
  lastName: 'Scully'
};

const heroes = [
  'Batman',
  'Superman'
];

// good
const hero = {
  firstName: 'Dana',
  lastName: 'Scully',
};

const heroes = [
  'Batman',
  'Superman',
];

// bad
function createHero(
  firstName,
  lastName,
  inventorOf
) {
  // does nothing
}

// good
function createHero(
  firstName,
  lastName,
  inventorOf,
) {
  // does nothing
}

// good (note that a comma must not appear after a ""rest"" element)
function createHero(
  firstName,
  lastName,
  inventorOf,
  ...heroArgs
) {
  // does nothing
}

// bad
createHero(
  firstName,
  lastName,
  inventorOf
);

// good
createHero(
  firstName,
  lastName,
  inventorOf,
);

// good (note that a comma must not appear after a ""rest"" element)
createHero(
  firstName,
  lastName,
  inventorOf,
  ...heroArgs
);


⬆ back to top
Semicolons



21.1 Yup. eslint: semi

Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called Automatic Semicolon Insertion to determine whether or not it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.

// bad - raises exception
const luke = {}
const leia = {}
[luke, leia].forEach((jedi) => jedi.father = 'vader')

// bad - raises exception
const reaction = ""No! That’s impossible!""
(async function meanwhileOnTheFalcon() {
  // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`
  // ...
}())

// bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!
function foo() {
  return
    'search your feelings, you know it to be foo'
}

// good
const luke = {};
const leia = {};
[luke, leia].forEach((jedi) => {
  jedi.father = 'vader';
});

// good
const reaction = ""No! That’s impossible!"";
(async function meanwhileOnTheFalcon() {
  // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`
  // ...
}());

// good
function foo() {
  return 'search your feelings, you know it to be foo';
}
Read more.


⬆ back to top
Type Casting & Coercion


22.1 Perform type coercion at the beginning of the statement.




22.2 Strings: eslint: no-new-wrappers
// => this.reviewScore = 9;

// bad
const totalScore = new String(this.reviewScore); // typeof totalScore is ""object"" not ""string""

// bad
const totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()

// bad
const totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string

// good
const totalScore = String(this.reviewScore);





22.3 Numbers: Use Number for type casting and parseInt always with a radix for parsing strings. eslint: radix no-new-wrappers
const inputValue = '4';

// bad
const val = new Number(inputValue);

// bad
const val = +inputValue;

// bad
const val = inputValue >> 0;

// bad
const val = parseInt(inputValue);

// good
const val = Number(inputValue);

// good
const val = parseInt(inputValue, 10);





22.4 If for whatever reason you are doing something wild and parseInt is your bottleneck and need to use Bitshift for performance reasons, leave a comment explaining why and what you’re doing.
// good
/**
 * parseInt was the reason my code was slow.
 * Bitshifting the String to coerce it to a
 * Number made it a lot faster.
 */
const val = inputValue >> 0;





22.5 Note: Be careful when using bitshift operations. Numbers are represented as 64-bit values, but bitshift operations always return a 32-bit integer (source). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. Discussion. Largest signed 32-bit Int is 2,147,483,647:
2147483647 >> 0; // => 2147483647
2147483648 >> 0; // => -2147483648
2147483649 >> 0; // => -2147483647





22.6 Booleans: eslint: no-new-wrappers
const age = 0;

// bad
const hasAge = new Boolean(age);

// good
const hasAge = Boolean(age);

// best
const hasAge = !!age;


⬆ back to top
Naming Conventions



23.1 Avoid single letter names. Be descriptive with your naming. eslint: id-length
// bad
function q() {
  // ...
}

// good
function query() {
  // ...
}





23.2 Use camelCase when naming objects, functions, and instances. eslint: camelcase
// bad
const OBJEcttsssss = {};
const this_is_my_object = {};
function c() {}

// good
const thisIsMyObject = {};
function thisIsMyFunction() {}





23.3 Use PascalCase only when naming constructors or classes. eslint: new-cap
// bad
function user(options) {
  this.name = options.name;
}

const bad = new user({
  name: 'nope',
});

// good
class User {
  constructor(options) {
    this.name = options.name;
  }
}

const good = new User({
  name: 'yup',
});





23.4 Do not use trailing or leading underscores. eslint: no-underscore-dangle

Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.

// bad
this.__firstName__ = 'Panda';
this.firstName_ = 'Panda';
this._firstName = 'Panda';

// good
this.firstName = 'Panda';

// good, in environments where WeakMaps are available
// see https://kangax.github.io/compat-table/es6/#test-WeakMap
const firstNames = new WeakMap();
firstNames.set(this, 'Panda');





23.5 Don’t save references to this. Use arrow functions or Function#bind.
// bad
function foo() {
  const self = this;
  return function () {
    console.log(self);
  };
}

// bad
function foo() {
  const that = this;
  return function () {
    console.log(that);
  };
}

// good
function foo() {
  return () => {
    console.log(this);
  };
}





23.6 A base filename should exactly match the name of its default export.
// file 1 contents
class CheckBox {
  // ...
}
export default CheckBox;

// file 2 contents
export default function fortyTwo() { return 42; }

// file 3 contents
export default function insideDirectory() {}

// in some other file
// bad
import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename
import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export
import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export

// bad
import CheckBox from './check_box'; // PascalCase import/export, snake_case filename
import forty_two from './forty_two'; // snake_case import/filename, camelCase export
import inside_directory from './inside_directory'; // snake_case import, camelCase export
import index from './inside_directory/index'; // requiring the index file explicitly
import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly

// good
import CheckBox from './CheckBox'; // PascalCase export/import/filename
import fortyTwo from './fortyTwo'; // camelCase export/import/filename
import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit ""index""
// ^ supports both insideDirectory.js and insideDirectory/index.js





23.7 Use camelCase when you export-default a function. Your filename should be identical to your function’s name.
function makeStyleGuide() {
  // ...
}

export default makeStyleGuide;





23.8 Use PascalCase when you export a constructor / class / singleton / function library / bare object.
const AirbnbStyleGuide = {
  es6: {
  },
};

export default AirbnbStyleGuide;





23.9 Acronyms and initialisms should always be all uppercased, or all lowercased.

Why? Names are for readability, not to appease a computer algorithm.

// bad
import SmsContainer from './containers/SmsContainer';

// bad
const HttpRequests = [
  // ...
];

// good
import SMSContainer from './containers/SMSContainer';

// good
const HTTPRequests = [
  // ...
];

// also good
const httpRequests = [
  // ...
];

// best
import TextMessageContainer from './containers/TextMessageContainer';

// best
const requests = [
  // ...
];





23.10 You may optionally uppercase a constant only if it (1) is exported, (2) is a const (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.

Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.


What about all const variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.
What about exported objects? - Uppercase at the top level of export (e.g. EXPORTED_OBJECT.key) and maintain that all nested properties do not change.

// bad
const PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';

// bad
export const THING_TO_BE_CHANGED = 'should obviously not be uppercased';

// bad
export let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';

// ---

// allowed but does not supply semantic value
export const apiKey = 'SOMEKEY';

// better in most cases
export const API_KEY = 'SOMEKEY';

// ---

// bad - unnecessarily uppercases key while adding no semantic value
export const MAPPING = {
  KEY: 'value'
};

// good
export const MAPPING = {
  key: 'value'
};


⬆ back to top
Accessors


24.1 Accessor functions for properties are not required.




24.2 Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello').
// bad
class Dragon {
  get age() {
    // ...
  }

  set age(value) {
    // ...
  }
}

// good
class Dragon {
  getAge() {
    // ...
  }

  setAge(value) {
    // ...
  }
}





24.3 If the property/method is a boolean, use isVal() or hasVal().
// bad
if (!dragon.age()) {
  return false;
}

// good
if (!dragon.hasAge()) {
  return false;
}





24.4 It’s okay to create get() and set() functions, but be consistent.
class Jedi {
  constructor(options = {}) {
    const lightsaber = options.lightsaber || 'blue';
    this.set('lightsaber', lightsaber);
  }

  set(key, val) {
    this[key] = val;
  }

  get(key) {
    return this[key];
  }
}


⬆ back to top
Events



25.1 When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a ""hash"") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:
// bad
$(this).trigger('listingUpdated', listing.id);

// ...

$(this).on('listingUpdated', (e, listingID) => {
  // do something with listingID
});
prefer:
// good
$(this).trigger('listingUpdated', { listingID: listing.id });

// ...

$(this).on('listingUpdated', (e, data) => {
  // do something with data.listingID
});


⬆ back to top
jQuery



26.1 Prefix jQuery object variables with a $.
// bad
const sidebar = $('.sidebar');

// good
const $sidebar = $('.sidebar');

// good
const $sidebarBtn = $('.sidebar-btn');





26.2 Cache jQuery lookups.
// bad
function setSidebar() {
  $('.sidebar').hide();

  // ...

  $('.sidebar').css({
    'background-color': 'pink',
  });
}

// good
function setSidebar() {
  const $sidebar = $('.sidebar');
  $sidebar.hide();

  // ...

  $sidebar.css({
    'background-color': 'pink',
  });
}




26.3 For DOM queries use Cascading $('.sidebar ul') or parent > child $('.sidebar > ul'). jsPerf




26.4 Use find with scoped jQuery object queries.
// bad
$('ul', '.sidebar').hide();

// bad
$('.sidebar').find('ul').hide();

// good
$('.sidebar ul').hide();

// good
$('.sidebar > ul').hide();

// good
$sidebar.find('ul').hide();


⬆ back to top
ECMAScript 5 Compatibility


27.1 Refer to Kangax’s ES5 compatibility table.

⬆ back to top

ECMAScript 6+ (ES 2015+) Styles


28.1 This is a collection of links to the various ES6+ features.


Arrow Functions
Classes
Object Shorthand
Object Concise
Object Computed Properties
Template Strings
Destructuring
Default Parameters
Rest
Array Spreads
Let and Const
Exponentiation Operator
Iterators and Generators
Modules




28.2 Do not use TC39 proposals that have not reached stage 3.

Why? They are not finalized, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.



⬆ back to top
Standard Library
The Standard Library
contains utilities that are functionally broken but remain for legacy reasons.



29.1 Use Number.isNaN instead of global isNaN.
eslint: no-restricted-globals

Why? The global isNaN coerces non-numbers to numbers, returning true for anything that coerces to NaN.
If this behavior is desired, make it explicit.

// bad
isNaN('1.2'); // false
isNaN('1.2.3'); // true

// good
Number.isNaN('1.2.3'); // false
Number.isNaN(Number('1.2.3')); // true





29.2 Use Number.isFinite instead of global isFinite.
eslint: no-restricted-globals

Why? The global isFinite coerces non-numbers to numbers, returning true for anything that coerces to a finite number.
If this behavior is desired, make it explicit.

// bad
isFinite('2e3'); // true

// good
Number.isFinite('2e3'); // false
Number.isFinite(parseInt('2e3', 10)); // true


⬆ back to top
Testing



30.1 Yup.
function foo() {
  return true;
}




30.2 No, but seriously:

Whichever testing framework you use, you should be writing tests!
Strive to write many small pure functions, and minimize where mutations occur.
Be cautious about stubs and mocks - they can make your tests more brittle.
We primarily use mocha and jest at Airbnb. tape is also used occasionally for small, separate modules.
100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.
Whenever you fix a bug, write a regression test. A bug fixed without a regression test is almost certainly going to break again in the future.



⬆ back to top
Performance

On Layout & Web Performance
String vs Array Concat
Try/Catch Cost In a Loop
Bang Function
jQuery Find vs Context, Selector
innerHTML vs textContent for script text
Long String Concatenation
Are JavaScript functions like map(), reduce(), and filter() optimized for traversing arrays?
Loading...

⬆ back to top
Resources
Learning ES6+

Latest ECMA spec
ExploringJS
ES6 Compatibility Table
Comprehensive Overview of ES6 Features

Read This

Standard ECMA-262

Tools

Code Style Linters

ESlint - Airbnb Style .eslintrc
JSHint - Airbnb Style .jshintrc


Neutrino Preset - @neutrinojs/airbnb

Other Style Guides

Google JavaScript Style Guide
Google JavaScript Style Guide (Old)
jQuery Core Style Guidelines
Principles of Writing Consistent, Idiomatic JavaScript
StandardJS

Other Styles

Naming this in nested functions - Christian Johansen
Conditional Callbacks - Ross Allen
Popular JavaScript Coding Conventions on GitHub - JeongHoon Byun
Multiple var statements in JavaScript, not superfluous - Ben Alman

Further Reading

Understanding JavaScript Closures - Angus Croll
Basic JavaScript for the impatient programmer - Dr. Axel Rauschmayer
You Might Not Need jQuery - Zack Bloom & Adam Schwartz
ES6 Features - Luke Hoban
Frontend Guidelines - Benjamin De Cock

Books

JavaScript: The Good Parts - Douglas Crockford
JavaScript Patterns - Stoyan Stefanov
Pro JavaScript Design Patterns - Ross Harmes and Dustin Diaz
High Performance Web Sites: Essential Knowledge for Front-End Engineers - Steve Souders
Maintainable JavaScript - Nicholas C. Zakas
JavaScript Web Applications - Alex MacCaw
Pro JavaScript Techniques - John Resig
Smashing Node.js: JavaScript Everywhere - Guillermo Rauch
Secrets of the JavaScript Ninja - John Resig and Bear Bibeault
Human JavaScript - Henrik Joreteg
Superhero.js - Kim Joar Bekkelund, Mads Mobæk, & Olav Bjorkoy
JSBooks - Julien Bouquillon
Third Party JavaScript - Ben Vinegar and Anton Kovalyov
Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript - David Herman
Eloquent JavaScript - Marijn Haverbeke
You Don’t Know JS: ES6 & Beyond - Kyle Simpson

Blogs

JavaScript Weekly
JavaScript, JavaScript...
Bocoup Weblog
Adequately Good
NCZOnline
Perfection Kills
Ben Alman
Dmitry Baranovskiy
nettuts

Podcasts

JavaScript Air
JavaScript Jabber

⬆ back to top
In the Wild
This is a list of organizations that are using this style guide. Send us a pull request and we'll add you to the list.

123erfasst: 123erfasst/javascript
3blades: 3Blades
4Catalyzer: 4Catalyzer/javascript
Aan Zee: AanZee/javascript
Adult Swim: adult-swim/javascript
Airbnb: airbnb/javascript
AltSchool: AltSchool/javascript
Apartmint: apartmint/javascript
Ascribe: ascribe/javascript
Avalara: avalara/javascript
Avant: avantcredit/javascript
Axept: axept/javascript
BashPros: BashPros/javascript
Billabong: billabong/javascript
Bisk: bisk
Bonhomme: bonhommeparis/javascript
Brainshark: brainshark/javascript
CaseNine: CaseNine/javascript
Cerner: Cerner
Chartboost: ChartBoost/javascript-style-guide
Coeur d'Alene Tribe: www.cdatribe-nsn.gov
ComparaOnline: comparaonline/javascript
Compass Learning: compasslearning/javascript-style-guide
DailyMotion: dailymotion/javascript
DoSomething: DoSomething/eslint-config
Digitpaint digitpaint/javascript
Drupal: www.drupal.org
Ecosia: ecosia/javascript
Evernote: evernote/javascript-style-guide
Evolution Gaming: evolution-gaming/javascript
EvozonJs: evozonjs/javascript
ExactTarget: ExactTarget/javascript
Expensify Expensify/Style-Guide
Flexberry: Flexberry/javascript-style-guide
Gawker Media: gawkermedia
General Electric: GeneralElectric/javascript
Generation Tux: GenerationTux/javascript
GoodData: gooddata/gdc-js-style
GreenChef: greenchef/javascript
Grooveshark: grooveshark/javascript
Grupo-Abraxas: Grupo-Abraxas/javascript
Happeo: happeo/javascript
Honey: honeyscience/javascript
How About We: howaboutwe/javascript
Huballin: huballin
HubSpot: HubSpot/javascript
Hyper: hyperoslo/javascript-playbook
InterCity Group: intercitygroup/javascript-style-guide
Jam3: Jam3/Javascript-Code-Conventions
JeopardyBot: kesne/jeopardy-bot
JSSolutions: JSSolutions/javascript
Kaplan Komputing: kaplankomputing/javascript
KickorStick: kickorstick
Kinetica Solutions: kinetica/javascript
LEINWAND: LEINWAND/javascript
Lonely Planet: lonelyplanet/javascript
M2GEN: M2GEN/javascript
Mighty Spring: mightyspring/javascript
MinnPost: MinnPost/javascript
MitocGroup: MitocGroup/javascript
ModCloth: modcloth/javascript
Money Advice Service: moneyadviceservice/javascript
Muber: muber
National Geographic: natgeo
Nimbl3: nimbl3/javascript
NullDev: NullDevCo/JavaScript-Styleguide
Nulogy: nulogy/javascript
Orange Hill Development: orangehill/javascript
Orion Health: orionhealth/javascript
OutBoxSoft: OutBoxSoft/javascript
Peerby: Peerby/javascript
Pier 1: Pier1/javascript
Qotto: Qotto/javascript-style-guide
Razorfish: razorfish/javascript-style-guide
reddit: reddit/styleguide/javascript
React: facebook.github.io/react/contributing/how-to-contribute.html#style-guide
REI: reidev/js-style-guide
Ripple: ripple/javascript-style-guide
Sainsbury’s Supermarkets: jsainsburyplc
SeekingAlpha: seekingalpha/javascript-style-guide
Shutterfly: shutterfly/javascript
Sourcetoad: sourcetoad/javascript
Springload: springload
StratoDem Analytics: stratodem/javascript
SteelKiwi Development: steelkiwi/javascript
StudentSphere: studentsphere/javascript
SwoopApp: swoopapp/javascript
SysGarage: sysgarage/javascript-style-guide
Syzygy Warsaw: syzygypl/javascript
Target: target/javascript
Terra: terra
TheLadders: TheLadders/javascript
The Nerdery: thenerdery/javascript-standards
Tomify: tomprats
Traitify: traitify/eslint-config-traitify
T4R Technology: T4R-Technology/javascript
UrbanSim: urbansim
VoxFeed: VoxFeed/javascript-style-guide
WeBox Studio: weboxstudio/javascript
Weggo: Weggo/javascript
Zillow: zillow/javascript
ZocDoc: ZocDoc/javascript

⬆ back to top
Translation
This style guide is also available in other languages:

 Brazilian Portuguese: armoucar/javascript-style-guide
 Bulgarian: borislavvv/javascript
 Catalan: fpmweb/javascript-style-guide
 Chinese (Simplified): lin-123/javascript
 Chinese (Traditional): jigsawye/javascript
 French: nmussy/javascript-style-guide
 German: timofurrer/javascript-style-guide
 Italian: sinkswim/javascript-style-guide
 Japanese: mitsuruog/javascript-style-guide
 Korean: ParkSB/javascript-style-guide
 Russian: leonidlebedev/javascript-airbnb
 Spanish: paolocarrasco/javascript-style-guide
 Thai: lvarayut/javascript-style-guide
 Turkish: eraycetinay/javascript
 Ukrainian: ivanzusko/javascript
 Vietnam: dangkyokhoang/javascript-style-guide

The JavaScript Style Guide Guide

Reference

Chat With Us About JavaScript

Find us on gitter.

Contributors

View Contributors

License
(The MIT License)
Copyright (c) 2012 Airbnb
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
⬆ back to top
Amendments
We encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.
};

"
14,"
D3: Data-Driven Documents

D3 (or D3.js) is a JavaScript library for visualizing data using web standards. D3 helps you bring data to life using SVG, Canvas and HTML. D3 combines powerful visualization and interaction techniques with a data-driven approach to DOM manipulation, giving you the full capabilities of modern browsers and the freedom to design the right visual interface for your data.
Resources

API Reference
Release Notes
Gallery
Examples
Wiki

Installing
If you use npm, npm install d3. Otherwise, download the latest release. The released bundle supports anonymous AMD, CommonJS, and vanilla environments. You can load directly from d3js.org, CDNJS, or unpkg. For example:
<script src=""https://d3js.org/d3.v5.js""></script>
For the minified version:
<script src=""https://d3js.org/d3.v5.min.js""></script>
You can also use the standalone D3 microlibraries. For example, d3-selection:
<script src=""https://d3js.org/d3-selection.v1.js""></script>
D3 is written using ES2015 modules. Create a custom bundle using Rollup, Webpack, or your preferred bundler. To import D3 into an ES2015 application, either import specific symbols from specific D3 modules:
import {scaleLinear} from ""d3-scale"";
Or import everything into a namespace (here, d3):
import * as d3 from ""d3"";
In Node:
var d3 = require(""d3"");
You can also require individual modules and combine them into a d3 object using Object.assign:
var d3 = Object.assign({}, require(""d3-format""), require(""d3-geo""), require(""d3-geo-projection""));

"
15,"
Visual Studio Code - Open Source (""Code - OSS"")




The Repository
This repository (""Code - OSS"") is where we (Microsoft) develop the Visual Studio Code product. Not only do we work on code and issues here, we also publish our roadmap, monthly iteration plans, and our endgame plans. This source code is available to everyone under the standard MIT license.
Visual Studio Code



Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customizations released under a traditional Microsoft product license.
Visual Studio Code combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. It provides comprehensive code editing, navigation, and understanding support along with lightweight debugging, a rich extensibility model, and lightweight integration with existing tools.
Visual Studio Code is updated monthly with new features and bug fixes. You can download it for Windows, macOS, and Linux on Visual Studio Code's website. To get the latest releases every day, install the Insiders build.
Contributing
There are many ways in which you can participate in the project, for example:

Submit bugs and feature requests, and help us verify as they are checked in
Review source code changes
Review the documentation and make pull requests for anything from typos to new content

If you are interested in fixing issues and contributing directly to the code base,
please see the document How to Contribute, which covers the following:

How to build and run from source
The development workflow, including debugging and running tests
Coding guidelines
Submitting pull requests
Finding an issue to work on
Contributing to translations

Feedback

Ask a question on Stack Overflow
Request a new feature
Up vote popular feature requests
File an issue
Follow @code and let us know what you think!

Related Projects
Many of the core components and extensions to VS Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter have their own repositories. For a complete list, please visit the Related Projects page on our wiki.
Bundled Extensions
VS Code includes a set of built-in extensions located in the extensions folder, including grammars and snippets for many languages. Extensions that provide rich language support (code completion, Go to Definition) for a language have the suffix language-features. For example, the json extension provides coloring for JSON and the json-language-features provides rich language support for JSON.
Code of Conduct
This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.
License
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT license.

"
16,"

 
 
 
 





 算法 
操作系统
 网络 
面向对象
  数据库  
   Java   
系统设计
   工具   
编码实践
   后记   




✏️
💻
☁️
🎨
💾
☕️
💡
🔧
🍉
📝








✏️ 算法

剑指 Offer 题解
Leetcode 题解
算法
笔试面试题库

💻 操作系统

计算机操作系统
Linux

☁️ 网络

计算机网络
HTTP
Socket

🎨 面向对象

面向对象思想
设计模式

💾 数据库

数据库系统原理
SQL
Leetcode-Database 题解
MySQL
Redis

☕️ Java

Java 基础
Java 容器
Java 并发
Java 虚拟机
Java I/O

💡 系统设计

系统设计基础
分布式
集群
攻击技术
缓存
消息队列

🔧 工具

Git
Docker
构建工具
正则表达式

🍉 编码实践

代码可读性
代码风格规范

📝 后记

 我的面经  /  我的简历  /  简历模版  /  内推  /  专栏  /  QQ 群



排版
笔记内容按照 中文文案排版指北 进行排版，以保证内容的可读性。
不使用 ![]() 这种方式来引用图片，而是用 <img> 标签。一方面是为了能够控制图片以合适的大小显示，另一方面是因为 GFM 不支持 <center> ![]() </center> 这种方法让图片居中显示，只能使用 <div align=""center""> <img src=""""/> </div> 达到居中的效果。
在线排版工具：Text-Typesetting。
License
本仓库的内容不是将网上的资料随意拼凑而来，除了少部分引用书上和技术文档的原文（这部分内容都在末尾的参考链接中加了出处），其余都是我的原创。在您引用本仓库内容或者对内容进行修改演绎时，请署名并以相同方式共享，谢谢。
转载文章请在开头明显处标明该页面地址，公众号等其它转载请联系 zhengyc101@163.com。
Logo：logomakr

致谢
感谢以下人员对本仓库做出的贡献，当然不仅仅只有这些贡献者，这里就不一一列举了。如果你希望被添加到这个名单中，并且提交过 Issue 或者 PR，请与我联系。





































"
17,"
Linux kernel
============

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    https://www.kernel.org/doc/html/latest/

There are various text files in the Documentation/ subdirectory,
several of them using the Restructured Text markup notation.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.

"
18,"


    React Native
  


Learn once, write anywhere:
  Build mobile apps with React.






















Getting Started
 · 
Learn the Basics
 · 
Showcase
 · 
Contribute
 · 
Community
 · 
Support

React Native brings React's declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.

Declarative. React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.
Component-Based. Build encapsulated components that manage their state, then compose them to make complex UIs.
Developer Velocity. See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.
Portability. Reuse code across iOS, Android, and other platforms.

React Native is developed and supported by many companies and individual core contributors. Find out more in our ecosystem overview.
Contents

Requirements
Building your first React Native app
Documentation
Upgrading
How to Contribute
Code of Conduct
License

📋 Requirements
React Native apps may target iOS 9.0 and Android 4.1 (API 16) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like Expo can be used to work around this.
🎉 Building your first React Native app
Follow the Getting Started guide. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:

Trying out React Native
Creating a New Application
Adding React Native to an Existing Application

📖 Documentation
The full documentation for React Native can be found on our website.
The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the React documentation.
The source for the React Native documentation and website is hosted on a separate repo, @facebook/react-native-website.
🚀 Upgrading
Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the Upgrading Guide for instructions.
React Native releases are discussed in the React Native Community, @react-native-community/react-native-releases.
👏 How to Contribute
The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.
Code of Conduct
Facebook has adopted a Code of Conduct that we expect project participants to adhere to.
Please read the full text so that you can understand what actions will and will not be tolerated.
Contributing Guide
Read our Contributing Guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.
Open Source Roadmap
You can learn more about our vision for React Native in the Roadmap.
Good First Issues
We have a list of good first issues that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.
Discussions
Larger discussions and proposals are discussed in @react-native-community/discussions-and-proposals.
📄 License
React Native is MIT licensed, as found in the LICENSE file.
React Native documentation is Creative Commons licensed, as found in the LICENSE-docs file.

"
19,"




Flutter is Google's SDK for crafting beautiful, fast user experiences for
mobile, web and desktop from a single codebase. Flutter works with existing
code, is used by developers and organizations around the world, and is free
and open source.
Documentation

Install Flutter
Flutter documentation
Development wiki
Contributing to Flutter

For announcements about new releases and breaking changes, follow the
flutter-announce@googlegroups.com
mailing list.
About Flutter
We think Flutter will help you create beautiful, fast apps, with a productive,
extensible and open development model.
Beautiful user experiences
We want to enable designers to deliver their full creative vision without being
forced to water it down due to limitations of the underlying framework.
Flutter's layered architecture gives you control over every pixel on the
screen, and its powerful compositing capabilities let you overlay and animate
graphics, video, text and controls without limitation. Flutter includes a full
set of widgets that deliver pixel-perfect experiences on both
iOS and Android.

Fast results
Flutter is fast. It's powered by the same hardware-accelerated Skia 2D
graphics library that underpins Chrome and Android. We architected Flutter to
support glitch-free, jank-free graphics at the native speed of your device.
Flutter code is powered by the world-class Dart platform, which enables
compilation to 32-bit and 64-bit ARM machine code for iOS and Android, as well
as JavaScript for the web and Intel x64 for desktop devices.

Productive development
Flutter offers stateful hot reload, allowing you to make changes to your code
and see the results instantly without restarting your app or losing its state.

Extensible and open model
Flutter works with any development tool (or none at all), but includes editor
plug-ins for both Visual Studio Code and IntelliJ / Android Studio. Flutter
provides thousands of packages to speed your development,
regardless of your target platform. And accessing other native code is easy,
with support for both FFI and platform-specific APIs.
Flutter is a fully open source project, and we welcome contributions.
Information on how to get started can be found at our
contributor guide.

"
20,"




📝 Available Translations: 🇨🇳 🇹🇼 🇧🇷 🇪🇸 🇰🇷 🇯🇵 🇷🇺 🇫🇷 🇹🇭 🇳🇱 🇹🇷 🇮🇩 🇺🇦 🇨🇿 🇮🇹 🇵🇱.
View these docs in other languages at electron/i18n.
The Electron framework lets you write cross-platform desktop applications
using JavaScript, HTML and CSS. It is based on Node.js and
Chromium and is used by the Atom
editor and many other apps.
Follow @ElectronJS on Twitter for important
announcements.
This project adheres to the Contributor Covenant
code of conduct.
By participating, you are expected to uphold this code. Please report unacceptable
behavior to coc@electronjs.org.
Installation
To install prebuilt Electron binaries, use npm.
The preferred method is to install Electron as a development dependency in your
app:
npm install electron --save-dev [--save-exact]
The --save-exact flag is recommended for Electron prior to version 2, as it does not follow semantic
versioning. As of version 2.0.0, Electron follows semver, so you don't need --save-exact flag. For info on how to manage Electron versions in your apps, see
Electron versioning.
For more installation options and troubleshooting tips, see
installation.
Quick start & Electron Fiddle
Use Electron Fiddle
to build, run, and package small Electron experiments, to see code examples for all of Electron's APIs, and
to try out different versions of Electron. It's designed to make the start of your journey with
Electron easier.
Alternatively, clone and run the
electron/electron-quick-start
repository to see a minimal Electron app in action:
git clone https://github.com/electron/electron-quick-start
cd electron-quick-start
npm install
npm start
Resources for learning Electron

electronjs.org/docs - All of Electron's documentation
electron/fiddle - A tool to build, run, and package small Electron experiments
electron/electron-quick-start - A very basic starter Electron app
electronjs.org/community#boilerplates - Sample starter apps created by the community
electron/simple-samples - Small applications with ideas for taking them further
electron/electron-api-demos - An Electron app that teaches you how to use Electron
hokein/electron-sample-apps - Small demo apps for the various Electron APIs

Programmatic usage
Most people use Electron from the command line, but if you require electron inside
your Node app (not your Electron app) it will return the file path to the
binary. Use this to spawn Electron from Node scripts:
const electron = require('electron')
const proc = require('child_process')

// will print something similar to /Users/maf/.../Electron
console.log(electron)

// spawn Electron
const child = proc.spawn(electron)
Mirrors

China

Documentation Translations
Find documentation translations in electron/i18n.
Contributing
If you are interested in reporting/fixing issues and contributing directly to the code base, please see CONTRIBUTING.md for more information on what we're looking for and how to get started.
Community
Info on reporting bugs, getting help, finding third-party tools and sample apps,
and more can be found in the support document.
License
MIT
When using the Electron or other GitHub logos, be sure to follow the GitHub logo guidelines.

"
21,"
English ∙ 日本語 ∙ 简体中文 ∙ 繁體中文 | العَرَبِيَّة‎ ∙ বাংলা ∙ Português do Brasil ∙ Deutsch ∙ ελληνικά ∙ עברית ∙ Italiano ∙ 韓國語 ∙ فارسی ∙ Polski ∙ русский язык ∙ Español ∙ ภาษาไทย ∙ Türkçe ∙ tiếng Việt ∙ Français | Add Translation
The System Design Primer




Motivation

Learn how to design large-scale systems.
Prep for the system design interview.

Learn how to design large-scale systems
Learning how to design scalable systems will help you become a better engineer.
System design is a broad topic.  There is a vast amount of resources scattered throughout the web on system design principles.
This repo is an organized collection of resources to help you learn how to build systems at scale.
Learn from the open source community
This is a continually updated, open source project.
Contributions are welcome!
Prep for the system design interview
In addition to coding interviews, system design is a required component of the technical interview process at many tech companies.
Practice common system design interview questions and compare your results with sample solutions: discussions, code, and diagrams.
Additional topics for interview prep:

Study guide
How to approach a system design interview question
System design interview questions, with solutions
Object-oriented design interview questions, with solutions
Additional system design interview questions

Anki flashcards




The provided Anki flashcard decks use spaced repetition to help you retain key system design concepts.

System design deck
System design exercises deck
Object oriented design exercises deck

Great for use while on-the-go.
Coding Resource: Interactive Coding Challenges
Looking for resources to help you prep for the Coding Interview?




Check out the sister repo Interactive Coding Challenges, which contains an additional Anki deck:

Coding deck

Contributing

Learn from the community.

Feel free to submit pull requests to help:

Fix errors
Improve sections
Add new sections
Translate

Content that needs some polishing is placed under development.
Review the Contributing Guidelines.
Index of system design topics

Summaries of various system design topics, including pros and cons.  Everything is a trade-off.
Each section contains links to more in-depth resources.






System design topics: start here

Step 1: Review the scalability video lecture
Step 2: Review the scalability article
Next steps


Performance vs scalability
Latency vs throughput
Availability vs consistency

CAP theorem

CP - consistency and partition tolerance
AP - availability and partition tolerance




Consistency patterns

Weak consistency
Eventual consistency
Strong consistency


Availability patterns

Fail-over
Replication
Availability in numbers


Domain name system
Content delivery network

Push CDNs
Pull CDNs


Load balancer

Active-passive
Active-active
Layer 4 load balancing
Layer 7 load balancing
Horizontal scaling


Reverse proxy (web server)

Load balancer vs reverse proxy


Application layer

Microservices
Service discovery


Database

Relational database management system (RDBMS)

Master-slave replication
Master-master replication
Federation
Sharding
Denormalization
SQL tuning


NoSQL

Key-value store
Document store
Wide column store
Graph Database


SQL or NoSQL


Cache

Client caching
CDN caching
Web server caching
Database caching
Application caching
Caching at the database query level
Caching at the object level
When to update the cache

Cache-aside
Write-through
Write-behind (write-back)
Refresh-ahead




Asynchronism

Message queues
Task queues
Back pressure


Communication

Transmission control protocol (TCP)
User datagram protocol (UDP)
Remote procedure call (RPC)
Representational state transfer (REST)


Security
Appendix

Powers of two table
Latency numbers every programmer should know
Additional system design interview questions
Real world architectures
Company architectures
Company engineering blogs


Under development
Credits
Contact info
License

Study guide

Suggested topics to review based on your interview timeline (short, medium, long).


Q: For interviews, do I need to know everything here?
A: No, you don't need to know everything here to prepare for the interview.
What you are asked in an interview depends on variables such as:

How much experience you have
What your technical background is
What positions you are interviewing for
Which companies you are interviewing with
Luck

More experienced candidates are generally expected to know more about system design.  Architects or team leads might be expected to know more than individual contributors.  Top tech companies are likely to have one or more design interview rounds.
Start broad and go deeper in a few areas.  It helps to know a little about various key system design topics.  Adjust the following guide based on your timeline, experience, what positions you are interviewing for, and which companies you are interviewing with.

Short timeline - Aim for breadth with system design topics.  Practice by solving some interview questions.
Medium timeline - Aim for breadth and some depth with system design topics.  Practice by solving many interview questions.
Long timeline - Aim for breadth and more depth with system design topics.  Practice by solving most interview questions.





Short
Medium
Long




Read through the System design topics to get a broad understanding of how systems work
👍
👍
👍


Read through a few articles in the Company engineering blogs for the companies you are interviewing with
👍
👍
👍


Read through a few Real world architectures
👍
👍
👍


Review How to approach a system design interview question
👍
👍
👍


Work through System design interview questions with solutions
Some
Many
Most


Work through Object-oriented design interview questions with solutions
Some
Many
Most


Review Additional system design interview questions
Some
Many
Most



How to approach a system design interview question

How to tackle a system design interview question.

The system design interview is an open-ended conversation.  You are expected to lead it.
You can use the following steps to guide the discussion.  To help solidify this process, work through the System design interview questions with solutions section using the following steps.
Step 1: Outline use cases, constraints, and assumptions
Gather requirements and scope the problem.  Ask questions to clarify use cases and constraints.  Discuss assumptions.

Who is going to use it?
How are they going to use it?
How many users are there?
What does the system do?
What are the inputs and outputs of the system?
How much data do we expect to handle?
How many requests per second do we expect?
What is the expected read to write ratio?

Step 2: Create a high level design
Outline a high level design with all important components.

Sketch the main components and connections
Justify your ideas

Step 3: Design core components
Dive into details for each core component.  For example, if you were asked to design a url shortening service, discuss:

Generating and storing a hash of the full url

MD5 and Base62
Hash collisions
SQL or NoSQL
Database schema


Translating a hashed url to the full url

Database lookup


API and object-oriented design

Step 4: Scale the design
Identify and address bottlenecks, given the constraints.  For example, do you need the following to address scalability issues?

Load balancer
Horizontal scaling
Caching
Database sharding

Discuss potential solutions and trade-offs.  Everything is a trade-off.  Address bottlenecks using principles of scalable system design.
Back-of-the-envelope calculations
You might be asked to do some estimates by hand.  Refer to the Appendix for the following resources:

Use back of the envelope calculations
Powers of two table
Latency numbers every programmer should know

Source(s) and further reading
Check out the following links to get a better idea of what to expect:

How to ace a systems design interview
The system design interview
Intro to Architecture and Systems Design Interviews

System design interview questions with solutions

Common system design interview questions with sample discussions, code, and diagrams.
Solutions linked to content in the solutions/ folder.




Question





Design Pastebin.com (or Bit.ly)
Solution


Design the Twitter timeline and search (or Facebook feed and search)
Solution


Design a web crawler
Solution


Design Mint.com
Solution


Design the data structures for a social network
Solution


Design a key-value store for a search engine
Solution


Design Amazon's sales ranking by category feature
Solution


Design a system that scales to millions of users on AWS
Solution


Add a system design question
Contribute



Design Pastebin.com (or Bit.ly)
View exercise and solution

Design the Twitter timeline and search (or Facebook feed and search)
View exercise and solution

Design a web crawler
View exercise and solution

Design Mint.com
View exercise and solution

Design the data structures for a social network
View exercise and solution

Design a key-value store for a search engine
View exercise and solution

Design Amazon's sales ranking by category feature
View exercise and solution

Design a system that scales to millions of users on AWS
View exercise and solution

Object-oriented design interview questions with solutions

Common object-oriented design interview questions with sample discussions, code, and diagrams.
Solutions linked to content in the solutions/ folder.


Note: This section is under development




Question





Design a hash map
Solution


Design a least recently used cache
Solution


Design a call center
Solution


Design a deck of cards
Solution


Design a parking lot
Solution


Design a chat server
Solution


Design a circular array
Contribute


Add an object-oriented design question
Contribute



System design topics: start here
New to system design?
First, you'll need a basic understanding of common principles, learning about what they are, how they are used, and their pros and cons.
Step 1: Review the scalability video lecture
Scalability Lecture at Harvard

Topics covered:

Vertical scaling
Horizontal scaling
Caching
Load balancing
Database replication
Database partitioning



Step 2: Review the scalability article
Scalability

Topics covered:

Clones
Databases
Caches
Asynchronism



Next steps
Next, we'll look at high-level trade-offs:

Performance vs scalability
Latency vs throughput
Availability vs consistency

Keep in mind that everything is a trade-off.
Then we'll dive into more specific topics such as DNS, CDNs, and load balancers.
Performance vs scalability
A service is scalable if it results in increased performance in a manner proportional to resources added. Generally, increasing performance means serving more units of work, but it can also be to handle larger units of work, such as when datasets grow.1
Another way to look at performance vs scalability:

If you have a performance problem, your system is slow for a single user.
If you have a scalability problem, your system is fast for a single user but slow under heavy load.

Source(s) and further reading

A word on scalability
Scalability, availability, stability, patterns

Latency vs throughput
Latency is the time to perform some action or to produce some result.
Throughput is the number of such actions or results per unit of time.
Generally, you should aim for maximal throughput with acceptable latency.
Source(s) and further reading

Understanding latency vs throughput

Availability vs consistency
CAP theorem



Source: CAP theorem revisited

In a distributed computer system, you can only support two of the following guarantees:

Consistency - Every read receives the most recent write or an error
Availability - Every request receives a response, without guarantee that it contains the most recent version of the information
Partition Tolerance - The system continues to operate despite arbitrary partitioning due to network failures

Networks aren't reliable, so you'll need to support partition tolerance.  You'll need to make a software tradeoff between consistency and availability.
CP - consistency and partition tolerance
Waiting for a response from the partitioned node might result in a timeout error.  CP is a good choice if your business needs require atomic reads and writes.
AP - availability and partition tolerance
Responses return the most recent version of the data available on a node, which might not be the latest.  Writes might take some time to propagate when the partition is resolved.
AP is a good choice if the business needs allow for eventual consistency or when the system needs to continue working despite external errors.
Source(s) and further reading

CAP theorem revisited
A plain english introduction to CAP theorem
CAP FAQ

Consistency patterns
With multiple copies of the same data, we are faced with options on how to synchronize them so clients have a consistent view of the data.  Recall the definition of consistency from the CAP theorem - Every read receives the most recent write or an error.
Weak consistency
After a write, reads may or may not see it.  A best effort approach is taken.
This approach is seen in systems such as memcached.  Weak consistency works well in real time use cases such as VoIP, video chat, and realtime multiplayer games.  For example, if you are on a phone call and lose reception for a few seconds, when you regain connection you do not hear what was spoken during connection loss.
Eventual consistency
After a write, reads will eventually see it (typically within milliseconds).  Data is replicated asynchronously.
This approach is seen in systems such as DNS and email.  Eventual consistency works well in highly available systems.
Strong consistency
After a write, reads will see it.  Data is replicated synchronously.
This approach is seen in file systems and RDBMSes.  Strong consistency works well in systems that need transactions.
Source(s) and further reading

Transactions across data centers

Availability patterns
There are two main patterns to support high availability: fail-over and replication.
Fail-over
Active-passive
With active-passive fail-over, heartbeats are sent between the active and the passive server on standby.  If the heartbeat is interrupted, the passive server takes over the active's IP address and resumes service.
The length of downtime is determined by whether the passive server is already running in 'hot' standby or whether it needs to start up from 'cold' standby.  Only the active server handles traffic.
Active-passive failover can also be referred to as master-slave failover.
Active-active
In active-active, both servers are managing traffic, spreading the load between them.
If the servers are public-facing, the DNS would need to know about the public IPs of both servers.  If the servers are internal-facing, application logic would need to know about both servers.
Active-active failover can also be referred to as master-master failover.
Disadvantage(s): failover

Fail-over adds more hardware and additional complexity.
There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.

Replication
Master-slave and master-master
This topic is further discussed in the Database section:

Master-slave replication
Master-master replication

Availability in numbers
Availability is often quantified by uptime (or downtime) as a percentage of time the service is available.  Availability is generally measured in number of 9s--a service with 99.99% availability is described as having four 9s.
99.9% availability - three 9s



Duration
Acceptable downtime




Downtime per year
8h 45min 57s


Downtime per month
43m 49.7s


Downtime per week
10m 4.8s


Downtime per day
1m 26.4s



99.99% availability - four 9s



Duration
Acceptable downtime




Downtime per year
52min 35.7s


Downtime per month
4m 23s


Downtime per week
1m 5s


Downtime per day
8.6s



Availability in parallel vs in sequence
If a service consists of multiple components prone to failure, the service's overall availability depends on whether the components are in sequence or in parallel.
In sequence
Overall availability decreases when two components with availability < 100% are in sequence:
Availability (Total) = Availability (Foo) * Availability (Bar)

If both Foo and Bar each had 99.9% availability, their total availability in sequence would be 99.8%.
In parallel
Overall availability increases when two components with availability < 100% are in parallel:
Availability (Total) = 1 - (1 - Availability (Foo)) * (1 - Availability (Bar))

If both Foo and Bar each had 99.9% availability, their total availability in parallel would be 99.9999%.
Domain name system



Source: DNS security presentation

A Domain Name System (DNS) translates a domain name such as www.example.com to an IP address.
DNS is hierarchical, with a few authoritative servers at the top level.  Your router or ISP provides information about which DNS server(s) to contact when doing a lookup.  Lower level DNS servers cache mappings, which could become stale due to DNS propagation delays.  DNS results can also be cached by your browser or OS for a certain period of time, determined by the time to live (TTL).

NS record (name server) - Specifies the DNS servers for your domain/subdomain.
MX record (mail exchange) - Specifies the mail servers for accepting messages.
A record (address) - Points a name to an IP address.
CNAME (canonical) - Points a name to another name or CNAME (example.com to www.example.com) or to an A record.

Services such as CloudFlare and Route 53 provide managed DNS services.  Some DNS services can route traffic through various methods:

Weighted round robin

Prevent traffic from going to servers under maintenance
Balance between varying cluster sizes
A/B testing


Latency-based
Geolocation-based

Disadvantage(s): DNS

Accessing a DNS server introduces a slight delay, although mitigated by caching described above.
DNS server management could be complex and is generally managed by governments, ISPs, and large companies.
DNS services have recently come under DDoS attack, preventing users from accessing websites such as Twitter without knowing Twitter's IP address(es).

Source(s) and further reading

DNS architecture
Wikipedia
DNS articles

Content delivery network



Source: Why use a CDN

A content delivery network (CDN) is a globally distributed network of proxy servers, serving content from locations closer to the user.  Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN, although some CDNs such as Amazon's CloudFront support dynamic content.  The site's DNS resolution will tell clients which server to contact.
Serving content from CDNs can significantly improve performance in two ways:

Users receive content at data centers close to them
Your servers do not have to serve requests that the CDN fulfills

Push CDNs
Push CDNs receive new content whenever changes occur on your server.  You take full responsibility for providing content, uploading directly to the CDN and rewriting URLs to point to the CDN.  You can configure when content expires and when it is updated.  Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.
Sites with a small amount of traffic or sites with content that isn't often updated work well with push CDNs.  Content is placed on the CDNs once, instead of being re-pulled at regular intervals.
Pull CDNs
Pull CDNs grab new content from your server when the first user requests the content.  You leave the content on your server and rewrite URLs to point to the CDN.  This results in a slower request until the content is cached on the CDN.
A time-to-live (TTL) determines how long content is cached.  Pull CDNs minimize storage space on the CDN, but can create redundant traffic if files expire and are pulled before they have actually changed.
Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.
Disadvantage(s): CDN

CDN costs could be significant depending on traffic, although this should be weighed with additional costs you would incur not using a CDN.
Content might be stale if it is updated before the TTL expires it.
CDNs require changing URLs for static content to point to the CDN.

Source(s) and further reading

Globally distributed content delivery
The differences between push and pull CDNs
Wikipedia

Load balancer



Source: Scalable system design patterns

Load balancers distribute incoming client requests to computing resources such as application servers and databases.  In each case, the load balancer returns the response from the computing resource to the appropriate client.  Load balancers are effective at:

Preventing requests from going to unhealthy servers
Preventing overloading resources
Helping eliminate single points of failure

Load balancers can be implemented with hardware (expensive) or with software such as HAProxy.
Additional benefits include:

SSL termination - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations

Removes the need to install X.509 certificates on each server


Session persistence - Issue cookies and route a specific client's requests to same instance if the web apps do not keep track of sessions

To protect against failures, it's common to set up multiple load balancers, either in active-passive or active-active mode.
Load balancers can route traffic based on various metrics, including:

Random
Least loaded
Session/cookies
Round robin or weighted round robin
Layer 4
Layer 7

Layer 4 load balancing
Layer 4 load balancers look at info at the transport layer to decide how to distribute requests.  Generally, this involves the source, destination IP addresses, and ports in the header, but not the contents of the packet.  Layer 4 load balancers forward network packets to and from the upstream server, performing Network Address Translation (NAT).
Layer 7 load balancing
Layer 7 load balancers look at the application layer to decide how to distribute requests.  This can involve contents of the header, message, and cookies.  Layer 7 load balancers terminates network traffic, reads the message, makes a load-balancing decision, then opens a connection to the selected server.  For example, a layer 7 load balancer can direct video traffic to servers that host videos while directing more sensitive user billing traffic to security-hardened servers.
At the cost of flexibility, layer 4 load balancing requires less time and computing resources than Layer 7, although the performance impact can be minimal on modern commodity hardware.
Horizontal scaling
Load balancers can also help with horizontal scaling, improving performance and availability.  Scaling out using commodity machines is more cost efficient and results in higher availability than scaling up a single server on more expensive hardware, called Vertical Scaling.  It is also easier to hire for talent working on commodity hardware than it is for specialized enterprise systems.
Disadvantage(s): horizontal scaling

Scaling horizontally introduces complexity and involves cloning servers

Servers should be stateless: they should not contain any user-related data like sessions or profile pictures
Sessions can be stored in a centralized data store such as a database (SQL, NoSQL) or a persistent cache (Redis, Memcached)


Downstream servers such as caches and databases need to handle more simultaneous connections as upstream servers scale out

Disadvantage(s): load balancer

The load balancer can become a performance bottleneck if it does not have enough resources or if it is not configured properly.
Introducing a load balancer to help eliminate single points of failure results in increased complexity.
A single load balancer is a single point of failure, configuring multiple load balancers further increases complexity.

Source(s) and further reading

NGINX architecture
HAProxy architecture guide
Scalability
Wikipedia
Layer 4 load balancing
Layer 7 load balancing
ELB listener config

Reverse proxy (web server)



Source: Wikipedia


A reverse proxy is a web server that centralizes internal services and provides unified interfaces to the public.  Requests from clients are forwarded to a server that can fulfill it before the reverse proxy returns the server's response to the client.
Additional benefits include:

Increased security - Hide information about backend servers, blacklist IPs, limit number of connections per client
Increased scalability and flexibility - Clients only see the reverse proxy's IP, allowing you to scale servers or change their configuration
SSL termination - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations

Removes the need to install X.509 certificates on each server


Compression - Compress server responses
Caching - Return the response for cached requests
Static content - Serve static content directly

HTML/CSS/JS
Photos
Videos
Etc



Load balancer vs reverse proxy

Deploying a load balancer is useful when you have multiple servers.  Often, load balancers  route traffic to a set of servers serving the same function.
Reverse proxies can be useful even with just one web server or application server, opening up the benefits described in the previous section.
Solutions such as NGINX and HAProxy can support both layer 7 reverse proxying and load balancing.

Disadvantage(s): reverse proxy

Introducing a reverse proxy results in increased complexity.
A single reverse proxy is a single point of failure, configuring multiple reverse proxies (ie a failover) further increases complexity.

Source(s) and further reading

Reverse proxy vs load balancer
NGINX architecture
HAProxy architecture guide
Wikipedia

Application layer



Source: Intro to architecting systems for scale

Separating out the web layer from the application layer (also known as platform layer) allows you to scale and configure both layers independently.  Adding a new API results in adding application servers without necessarily adding additional web servers.  The single responsibility principle advocates for small and autonomous services that work together.  Small teams with small services can plan more aggressively for rapid growth.
Workers in the application layer also help enable asynchronism.
Microservices
Related to this discussion are microservices, which can be described as a suite of independently deployable, small, modular services.  Each service runs a unique process and communicates through a well-defined, lightweight mechanism to serve a business goal. 1
Pinterest, for example, could have the following microservices: user profile, follower, feed, search, photo upload, etc.
Service Discovery
Systems such as Consul, Etcd, and Zookeeper can help services find each other by keeping track of registered names, addresses, and ports.  Health checks help verify service integrity and are often done using an HTTP endpoint.  Both Consul and Etcd have a built in key-value store that can be useful for storing config values and other shared data.
Disadvantage(s): application layer

Adding an application layer with loosely coupled services requires a different approach from an architectural, operations, and process viewpoint (vs a monolithic system).
Microservices can add complexity in terms of deployments and operations.

Source(s) and further reading

Intro to architecting systems for scale
Crack the system design interview
Service oriented architecture
Introduction to Zookeeper
Here's what you need to know about building microservices

Database



Source: Scaling up to your first 10 million users

Relational database management system (RDBMS)
A relational database like SQL is a collection of data items organized in tables.
ACID is a set of properties of relational database transactions.

Atomicity - Each transaction is all or nothing
Consistency - Any transaction will bring the database from one valid state to another
Isolation - Executing transactions concurrently has the same results as if the transactions were executed serially
Durability - Once a transaction has been committed, it will remain so

There are many techniques to scale a relational database: master-slave replication, master-master replication, federation, sharding, denormalization, and SQL tuning.
Master-slave replication
The master serves reads and writes, replicating writes to one or more slaves, which serve only reads.  Slaves can also replicate to additional slaves in a tree-like fashion.  If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.



Source: Scalability, availability, stability, patterns

Disadvantage(s): master-slave replication

Additional logic is needed to promote a slave to a master.
See Disadvantage(s): replication for points related to both master-slave and master-master.

Master-master replication
Both masters serve reads and writes and coordinate with each other on writes.  If either master goes down, the system can continue to operate with both reads and writes.



Source: Scalability, availability, stability, patterns

Disadvantage(s): master-master replication

You'll need a load balancer or you'll need to make changes to your application logic to determine where to write.
Most master-master systems are either loosely consistent (violating ACID) or have increased write latency due to synchronization.
Conflict resolution comes more into play as more write nodes are added and as latency increases.
See Disadvantage(s): replication for points related to both master-slave and master-master.

Disadvantage(s): replication

There is a potential for loss of data if the master fails before any newly written data can be replicated to other nodes.
Writes are replayed to the read replicas.  If there are a lot of writes, the read replicas can get bogged down with replaying writes and can't do as many reads.
The more read slaves, the more you have to replicate, which leads to greater replication lag.
On some systems, writing to the master can spawn multiple threads to write in parallel, whereas read replicas only support writing sequentially with a single thread.
Replication adds more hardware and additional complexity.

Source(s) and further reading: replication

Scalability, availability, stability, patterns
Multi-master replication

Federation



Source: Scaling up to your first 10 million users

Federation (or functional partitioning) splits up databases by function.  For example, instead of a single, monolithic database, you could have three databases: forums, users, and products, resulting in less read and write traffic to each database and therefore less replication lag.  Smaller databases result in more data that can fit in memory, which in turn results in more cache hits due to improved cache locality.  With no single central master serializing writes you can write in parallel, increasing throughput.
Disadvantage(s): federation

Federation is not effective if your schema requires huge functions or tables.
You'll need to update your application logic to determine which database to read and write.
Joining data from two databases is more complex with a server link.
Federation adds more hardware and additional complexity.

Source(s) and further reading: federation

Scaling up to your first 10 million users

Sharding



Source: Scalability, availability, stability, patterns

Sharding distributes data across different databases such that each database can only manage a subset of the data.  Taking a users database as an example, as the number of users increases, more shards are added to the cluster.
Similar to the advantages of federation, sharding results in less read and write traffic, less replication, and more cache hits.  Index size is also reduced, which generally improves performance with faster queries.  If one shard goes down, the other shards are still operational, although you'll want to add some form of replication to avoid data loss.  Like federation, there is no single central master serializing writes, allowing you to write in parallel with increased throughput.
Common ways to shard a table of users is either through the user's last name initial or the user's geographic location.
Disadvantage(s): sharding

You'll need to update your application logic to work with shards, which could result in complex SQL queries.
Data distribution can become lopsided in a shard.  For example, a set of power users on a shard could result in increased load to that shard compared to others.

Rebalancing adds additional complexity.  A sharding function based on consistent hashing can reduce the amount of transferred data.


Joining data from multiple shards is more complex.
Sharding adds more hardware and additional complexity.

Source(s) and further reading: sharding

The coming of the shard
Shard database architecture
Consistent hashing

Denormalization
Denormalization attempts to improve read performance at the expense of some write performance.  Redundant copies of the data are written in multiple tables to avoid expensive joins.  Some RDBMS such as PostgreSQL and Oracle support materialized views which handle the work of storing redundant information and keeping redundant copies consistent.
Once data becomes distributed with techniques such as federation and sharding, managing joins across data centers further increases complexity.  Denormalization might circumvent the need for such complex joins.
In most systems, reads can heavily outnumber writes 100:1 or even 1000:1.  A read resulting in a complex database join can be very expensive, spending a significant amount of time on disk operations.
Disadvantage(s): denormalization

Data is duplicated.
Constraints can help redundant copies of information stay in sync, which increases complexity of the database design.
A denormalized database under heavy write load might perform worse than its normalized counterpart.

Source(s) and further reading: denormalization

Denormalization

SQL tuning
SQL tuning is a broad topic and many books have been written as reference.
It's important to benchmark and profile to simulate and uncover bottlenecks.

Benchmark - Simulate high-load situations with tools such as ab.
Profile - Enable tools such as the slow query log to help track performance issues.

Benchmarking and profiling might point you to the following optimizations.
Tighten up the schema

MySQL dumps to disk in contiguous blocks for fast access.
Use CHAR instead of VARCHAR for fixed-length fields.

CHAR effectively allows for fast, random access, whereas with VARCHAR, you must find the end of a string before moving onto the next one.


Use TEXT for large blocks of text such as blog posts.  TEXT also allows for boolean searches.  Using a TEXT field results in storing a pointer on disk that is used to locate the text block.
Use INT for larger numbers up to 2^32 or 4 billion.
Use DECIMAL for currency to avoid floating point representation errors.
Avoid storing large BLOBS, store the location of where to get the object instead.
VARCHAR(255) is the largest number of characters that can be counted in an 8 bit number, often maximizing the use of a byte in some RDBMS.
Set the NOT NULL constraint where applicable to improve search performance.

Use good indices

Columns that you are querying (SELECT, GROUP BY, ORDER BY, JOIN) could be faster with indices.
Indices are usually represented as self-balancing B-tree that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time.
Placing an index can keep the data in memory, requiring more space.
Writes could also be slower since the index also needs to be updated.
When loading large amounts of data, it might be faster to disable indices, load the data, then rebuild the indices.

Avoid expensive joins

Denormalize where performance demands it.

Partition tables

Break up a table by putting hot spots in a separate table to help keep it in memory.

Tune the query cache

In some cases, the query cache could lead to performance issues.

Source(s) and further reading: SQL tuning

Tips for optimizing MySQL queries
Is there a good reason i see VARCHAR(255) used so often?
How do null values affect performance?
Slow query log

NoSQL
NoSQL is a collection of data items represented in a key-value store, document store, wide column store, or a graph database.  Data is denormalized, and joins are generally done in the application code.  Most NoSQL stores lack true ACID transactions and favor eventual consistency.
BASE is often used to describe the properties of NoSQL databases.  In comparison with the CAP Theorem, BASE chooses availability over consistency.

Basically available - the system guarantees availability.
Soft state - the state of the system may change over time, even without input.
Eventual consistency - the system will become consistent over a period of time, given that the system doesn't receive input during that period.

In addition to choosing between SQL or NoSQL, it is helpful to understand which type of NoSQL database best fits your use case(s).  We'll review key-value stores, document stores, wide column stores, and graph databases in the next section.
Key-value store

Abstraction: hash table

A key-value store generally allows for O(1) reads and writes and is often backed by memory or SSD.  Data stores can maintain keys in lexicographic order, allowing efficient retrieval of key ranges.  Key-value stores can allow for storing of metadata with a value.
Key-value stores provide high performance and are often used for simple data models or for rapidly-changing data, such as an in-memory cache layer.  Since they offer only a limited set of operations, complexity is shifted to the application layer if additional operations are needed.
A key-value store is the basis for more complex systems such as a document store, and in some cases, a graph database.
Source(s) and further reading: key-value store

Key-value database
Disadvantages of key-value stores
Redis architecture
Memcached architecture

Document store

Abstraction: key-value store with documents stored as values

A document store is centered around documents (XML, JSON, binary, etc), where a document stores all information for a given object.  Document stores provide APIs or a query language to query based on the internal structure of the document itself.  Note, many key-value stores include features for working with a value's metadata, blurring the lines between these two storage types.
Based on the underlying implementation, documents are organized by collections, tags, metadata, or directories.  Although documents can be organized or grouped together, documents may have fields that are completely different from each other.
Some document stores like MongoDB and CouchDB also provide a SQL-like language to perform complex queries.  DynamoDB supports both key-values and documents.
Document stores provide high flexibility and are often used for working with occasionally changing data.
Source(s) and further reading: document store

Document-oriented database
MongoDB architecture
CouchDB architecture
Elasticsearch architecture

Wide column store



Source: SQL & NoSQL, a brief history


Abstraction: nested map ColumnFamily<RowKey, Columns<ColKey, Value, Timestamp>>

A wide column store's basic unit of data is a column (name/value pair).  A column can be grouped in column families (analogous to a SQL table).  Super column families further group column families.  You can access each column independently with a row key, and columns with the same row key form a row.  Each value contains a timestamp for versioning and for conflict resolution.
Google introduced Bigtable as the first wide column store, which influenced the open-source HBase often-used in the Hadoop ecosystem, and Cassandra from Facebook.  Stores such as BigTable, HBase, and Cassandra maintain keys in lexicographic order, allowing efficient retrieval of selective key ranges.
Wide column stores offer high availability and high scalability.  They are often used for very large data sets.
Source(s) and further reading: wide column store

SQL & NoSQL, a brief history
Bigtable architecture
HBase architecture
Cassandra architecture

Graph database



Source: Graph database


Abstraction: graph

In a graph database, each node is a record and each arc is a relationship between two nodes.  Graph databases are optimized to represent complex relationships with many foreign keys or many-to-many relationships.
Graphs databases offer high performance for data models with complex relationships, such as a social network.  They are relatively new and are not yet widely-used; it might be more difficult to find development tools and resources.  Many graphs can only be accessed with REST APIs.
Source(s) and further reading: graph

Graph database
Neo4j
FlockDB

Source(s) and further reading: NoSQL

Explanation of base terminology
NoSQL databases a survey and decision guidance
Scalability
Introduction to NoSQL
NoSQL patterns

SQL or NoSQL



Source: Transitioning from RDBMS to NoSQL

Reasons for SQL:

Structured data
Strict schema
Relational data
Need for complex joins
Transactions
Clear patterns for scaling
More established: developers, community, code, tools, etc
Lookups by index are very fast

Reasons for NoSQL:

Semi-structured data
Dynamic or flexible schema
Non-relational data
No need for complex joins
Store many TB (or PB) of data
Very data intensive workload
Very high throughput for IOPS

Sample data well-suited for NoSQL:

Rapid ingest of clickstream and log data
Leaderboard or scoring data
Temporary data, such as a shopping cart
Frequently accessed ('hot') tables
Metadata/lookup tables

Source(s) and further reading: SQL or NoSQL

Scaling up to your first 10 million users
SQL vs NoSQL differences

Cache



Source: Scalable system design patterns

Caching improves page load times and can reduce the load on your servers and databases.  In this model, the dispatcher will first lookup if the request has been made before and try to find the previous result to return, in order to save the actual execution.
Databases often benefit from a uniform distribution of reads and writes across its partitions.  Popular items can skew the distribution, causing bottlenecks.  Putting a cache in front of a database can help absorb uneven loads and spikes in traffic.
Client caching
Caches can be located on the client side (OS or browser), server side, or in a distinct cache layer.
CDN caching
CDNs are considered a type of cache.
Web server caching
Reverse proxies and caches such as Varnish can serve static and dynamic content directly.  Web servers can also cache requests, returning responses without having to contact application servers.
Database caching
Your database usually includes some level of caching in a default configuration, optimized for a generic use case.  Tweaking these settings for specific usage patterns can further boost performance.
Application caching
In-memory caches such as Memcached and Redis are key-value stores between your application and your data storage.  Since the data is held in RAM, it is much faster than typical databases where data is stored on disk.  RAM is more limited than disk, so cache invalidation algorithms such as least recently used (LRU) can help invalidate 'cold' entries and keep 'hot' data in RAM.
Redis has the following additional features:

Persistence option
Built-in data structures such as sorted sets and lists

There are multiple levels you can cache that fall into two general categories: database queries and objects:

Row level
Query-level
Fully-formed serializable objects
Fully-rendered HTML

Generally, you should try to avoid file-based caching, as it makes cloning and auto-scaling more difficult.
Caching at the database query level
Whenever you query the database, hash the query as a key and store the result to the cache.  This approach suffers from expiration issues:

Hard to delete a cached result with complex queries
If one piece of data changes such as a table cell, you need to delete all cached queries that might include the changed cell

Caching at the object level
See your data as an object, similar to what you do with your application code.  Have your application assemble the dataset from the database into a class instance or a data structure(s):

Remove the object from cache if its underlying data has changed
Allows for asynchronous processing: workers assemble objects by consuming the latest cached object

Suggestions of what to cache:

User sessions
Fully rendered web pages
Activity streams
User graph data

When to update the cache
Since you can only store a limited amount of data in cache, you'll need to determine which cache update strategy works best for your use case.
Cache-aside



Source: From cache to in-memory data grid

The application is responsible for reading and writing from storage.  The cache does not interact with storage directly.  The application does the following:

Look for entry in cache, resulting in a cache miss
Load entry from the database
Add entry to cache
Return entry

def get_user(self, user_id):
    user = cache.get(""user.{0}"", user_id)
    if user is None:
        user = db.query(""SELECT * FROM users WHERE user_id = {0}"", user_id)
        if user is not None:
            key = ""user.{0}"".format(user_id)
            cache.set(key, json.dumps(user))
    return user
Memcached is generally used in this manner.
Subsequent reads of data added to cache are fast.  Cache-aside is also referred to as lazy loading.  Only requested data is cached, which avoids filling up the cache with data that isn't requested.
Disadvantage(s): cache-aside

Each cache miss results in three trips, which can cause a noticeable delay.
Data can become stale if it is updated in the database.  This issue is mitigated by setting a time-to-live (TTL) which forces an update of the cache entry, or by using write-through.
When a node fails, it is replaced by a new, empty node, increasing latency.

Write-through



Source: Scalability, availability, stability, patterns

The application uses the cache as the main data store, reading and writing data to it, while the cache is responsible for reading and writing to the database:

Application adds/updates entry in cache
Cache synchronously writes entry to data store
Return

Application code:
set_user(12345, {""foo"":""bar""})
Cache code:
def set_user(user_id, values):
    user = db.query(""UPDATE Users WHERE id = {0}"", user_id, values)
    cache.set(user_id, user)
Write-through is a slow overall operation due to the write operation, but subsequent reads of just written data are fast.  Users are generally more tolerant of latency when updating data than reading data.  Data in the cache is not stale.
Disadvantage(s): write through

When a new node is created due to failure or scaling, the new node will not cache entries until the entry is updated in the database.  Cache-aside in conjunction with write through can mitigate this issue.
Most data written might never be read, which can be minimized with a TTL.

Write-behind (write-back)



Source: Scalability, availability, stability, patterns

In write-behind, the application does the following:

Add/update entry in cache
Asynchronously write entry to the data store, improving write performance

Disadvantage(s): write-behind

There could be data loss if the cache goes down prior to its contents hitting the data store.
It is more complex to implement write-behind than it is to implement cache-aside or write-through.

Refresh-ahead



Source: From cache to in-memory data grid

You can configure the cache to automatically refresh any recently accessed cache entry prior to its expiration.
Refresh-ahead can result in reduced latency vs read-through if the cache can accurately predict which items are likely to be needed in the future.
Disadvantage(s): refresh-ahead

Not accurately predicting which items are likely to be needed in the future can result in reduced performance than without refresh-ahead.

Disadvantage(s): cache

Need to maintain consistency between caches and the source of truth such as the database through cache invalidation.
Cache invalidation is a difficult problem, there is additional complexity associated with when to update the cache.
Need to make application changes such as adding Redis or memcached.

Source(s) and further reading

From cache to in-memory data grid
Scalable system design patterns
Introduction to architecting systems for scale
Scalability, availability, stability, patterns
Scalability
AWS ElastiCache strategies
Wikipedia

Asynchronism



Source: Intro to architecting systems for scale

Asynchronous workflows help reduce request times for expensive operations that would otherwise be performed in-line.  They can also help by doing time-consuming work in advance, such as periodic aggregation of data.
Message queues
Message queues receive, hold, and deliver messages.  If an operation is too slow to perform inline, you can use a message queue with the following workflow:

An application publishes a job to the queue, then notifies the user of job status
A worker picks up the job from the queue, processes it, then signals the job is complete

The user is not blocked and the job is processed in the background.  During this time, the client might optionally do a small amount of processing to make it seem like the task has completed.  For example, if posting a tweet, the tweet could be instantly posted to your timeline, but it could take some time before your tweet is actually delivered to all of your followers.
Redis is useful as a simple message broker but messages can be lost.
RabbitMQ is popular but requires you to adapt to the 'AMQP' protocol and manage your own nodes.
Amazon SQS is hosted but can have high latency and has the possibility of messages being delivered twice.
Task queues
Tasks queues receive tasks and their related data, runs them, then delivers their results.  They can support scheduling and can be used to run computationally-intensive jobs in the background.
Celery has support for scheduling and primarily has python support.
Back pressure
If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance.  Back pressure can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue.  Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later.  Clients can retry the request at a later time, perhaps with exponential backoff.
Disadvantage(s): asynchronism

Use cases such as inexpensive calculations and realtime workflows might be better suited for synchronous operations, as introducing queues can add delays and complexity.

Source(s) and further reading

It's all a numbers game
Applying back pressure when overloaded
Little's law
What is the difference between a message queue and a task queue?

Communication



Source: OSI 7 layer model

Hypertext transfer protocol (HTTP)
HTTP is a method for encoding and transporting data between a client and a server.  It is a request/response protocol: clients issue requests and servers issue responses with relevant content and completion status info about the request.  HTTP is self-contained, allowing requests and responses to flow through many intermediate routers and servers that perform load balancing, caching, encryption, and compression.
A basic HTTP request consists of a verb (method) and a resource (endpoint).  Below are common HTTP verbs:



Verb
Description
Idempotent*
Safe
Cacheable




GET
Reads a resource
Yes
Yes
Yes


POST
Creates a resource or trigger a process that handles data
No
No
Yes if response contains freshness info


PUT
Creates or replace a resource
Yes
No
No


PATCH
Partially updates a resource
No
No
Yes if response contains freshness info


DELETE
Deletes a resource
Yes
No
No



*Can be called many times without different outcomes.
HTTP is an application layer protocol relying on lower-level protocols such as TCP and UDP.
Source(s) and further reading: HTTP

What is HTTP?
Difference between HTTP and TCP
Difference between PUT and PATCH

Transmission control protocol (TCP)



Source: How to make a multiplayer game

TCP is a connection-oriented protocol over an IP network.  Connection is established and terminated using a handshake.  All packets sent are guaranteed to reach the destination in the original order and without corruption through:

Sequence numbers and checksum fields for each packet
Acknowledgement packets and automatic retransmission

If the sender does not receive a correct response, it will resend the packets.  If there are multiple timeouts, the connection is dropped.  TCP also implements flow control and congestion control.  These guarantees cause delays and generally result in less efficient transmission than UDP.
To ensure high throughput, web servers can keep a large number of TCP connections open, resulting in high memory usage.  It can be expensive to have a large number of open connections between web server threads and say, a memcached server.  Connection pooling can help in addition to switching to UDP where applicable.
TCP is useful for applications that require high reliability but are less time critical.  Some examples include web servers, database info, SMTP, FTP, and SSH.
Use TCP over UDP when:

You need all of the data to arrive intact
You want to automatically make a best estimate use of the network throughput

User datagram protocol (UDP)



Source: How to make a multiplayer game

UDP is connectionless.  Datagrams (analogous to packets) are guaranteed only at the datagram level.  Datagrams might reach their destination out of order or not at all.  UDP does not support congestion control.  Without the guarantees that TCP support, UDP is generally more efficient.
UDP can broadcast, sending datagrams to all devices on the subnet.  This is useful with DHCP because the client has not yet received an IP address, thus preventing a way for TCP to stream without the IP address.
UDP is less reliable but works well in real time use cases such as VoIP, video chat, streaming, and realtime multiplayer games.
Use UDP over TCP when:

You need the lowest latency
Late data is worse than loss of data
You want to implement your own error correction

Source(s) and further reading: TCP and UDP

Networking for game programming
Key differences between TCP and UDP protocols
Difference between TCP and UDP
Transmission control protocol
User datagram protocol
Scaling memcache at Facebook

Remote procedure call (RPC)



Source: Crack the system design interview

In an RPC, a client causes a procedure to execute on a different address space, usually a remote server.  The procedure is coded as if it were a local procedure call, abstracting away the details of how to communicate with the server from the client program.  Remote calls are usually slower and less reliable than local calls so it is helpful to distinguish RPC calls from local calls.  Popular RPC frameworks include Protobuf, Thrift, and Avro.
RPC is a request-response protocol:

Client program - Calls the client stub procedure.  The parameters are pushed onto the stack like a local procedure call.
Client stub procedure - Marshals (packs) procedure id and arguments into a request message.
Client communication module - OS sends the message from the client to the server.
Server communication module - OS passes the incoming packets to the server stub procedure.
Server stub procedure -  Unmarshalls the results, calls the server procedure matching the procedure id and passes the given arguments.
The server response repeats the steps above in reverse order.

Sample RPC calls:
GET /someoperation?data=anId

POST /anotheroperation
{
  ""data"":""anId"";
  ""anotherdata"": ""another value""
}

RPC is focused on exposing behaviors.  RPCs are often used for performance reasons with internal communications, as you can hand-craft native calls to better fit your use cases.
Choose a native library (aka SDK) when:

You know your target platform.
You want to control how your ""logic"" is accessed.
You want to control how error control happens off your library.
Performance and end user experience is your primary concern.

HTTP APIs following REST tend to be used more often for public APIs.
Disadvantage(s): RPC

RPC clients become tightly coupled to the service implementation.
A new API must be defined for every new operation or use case.
It can be difficult to debug RPC.
You might not be able to leverage existing technologies out of the box.  For example, it might require additional effort to ensure RPC calls are properly cached on caching servers such as Squid.

Representational state transfer (REST)
REST is an architectural style enforcing a client/server model where the client acts on a set of resources managed by the server.  The server provides a representation of resources and actions that can either manipulate or get a new representation of resources.  All communication must be stateless and cacheable.
There are four qualities of a RESTful interface:

Identify resources (URI in HTTP) - use the same URI regardless of any operation.
Change with representations (Verbs in HTTP) - use verbs, headers, and body.
Self-descriptive error message (status response in HTTP) - Use status codes, don't reinvent the wheel.
HATEOAS (HTML interface for HTTP) - your web service should be fully accessible in a browser.

Sample REST calls:
GET /someresources/anId

PUT /someresources/anId
{""anotherdata"": ""another value""}

REST is focused on exposing data.  It minimizes the coupling between client/server and is often used for public HTTP APIs.  REST uses a more generic and uniform method of exposing resources through URIs, representation through headers, and actions through verbs such as GET, POST, PUT, DELETE, and PATCH.  Being stateless, REST is great for horizontal scaling and partitioning.
Disadvantage(s): REST

With REST being focused on exposing data, it might not be a good fit if resources are not naturally organized or accessed in a simple hierarchy.  For example, returning all updated records from the past hour matching a particular set of events is not easily expressed as a path.  With REST, it is likely to be implemented with a combination of URI path, query parameters, and possibly the request body.
REST typically relies on a few verbs (GET, POST, PUT, DELETE, and PATCH) which sometimes doesn't fit your use case.  For example, moving expired documents to the archive folder might not cleanly fit within these verbs.
Fetching complicated resources with nested hierarchies requires multiple round trips between the client and server to render single views, e.g. fetching content of a blog entry and the comments on that entry. For mobile applications operating in variable network conditions, these multiple roundtrips are highly undesirable.
Over time, more fields might be added to an API response and older clients will receive all new data fields, even those that they do not need, as a result, it bloats the payload size and leads to larger latencies.

RPC and REST calls comparison



Operation
RPC
REST




Signup
POST /signup
POST /persons


Resign
POST /resign{""personid"": ""1234""}
DELETE /persons/1234


Read a person
GET /readPerson?personid=1234
GET /persons/1234


Read a person’s items list
GET /readUsersItemsList?personid=1234
GET /persons/1234/items


Add an item to a person’s items
POST /addItemToUsersItemsList{""personid"": ""1234"";""itemid"": ""456""}
POST /persons/1234/items{""itemid"": ""456""}


Update an item
POST /modifyItem{""itemid"": ""456"";""key"": ""value""}
PUT /items/456{""key"": ""value""}


Delete an item
POST /removeItem{""itemid"": ""456""}
DELETE /items/456




Source: Do you really know why you prefer REST over RPC

Source(s) and further reading: REST and RPC

Do you really know why you prefer REST over RPC
When are RPC-ish approaches more appropriate than REST?
REST vs JSON-RPC
Debunking the myths of RPC and REST
What are the drawbacks of using REST
Crack the system design interview
Thrift
Why REST for internal use and not RPC

Security
This section could use some updates.  Consider contributing!
Security is a broad topic.  Unless you have considerable experience, a security background, or are applying for a position that requires knowledge of security, you probably won't need to know more than the basics:

Encrypt in transit and at rest.
Sanitize all user inputs or any input parameters exposed to user to prevent XSS and SQL injection.
Use parameterized queries to prevent SQL injection.
Use the principle of least privilege.

Source(s) and further reading

API security checklist
Security guide for developers
OWASP top ten

Appendix
You'll sometimes be asked to do 'back-of-the-envelope' estimates.  For example, you might need to determine how long it will take to generate 100 image thumbnails from disk or how much memory a data structure will take.  The Powers of two table and Latency numbers every programmer should know are handy references.
Powers of two table
Power           Exact Value         Approx Value        Bytes
---------------------------------------------------------------
7                             128
8                             256
10                           1024   1 thousand           1 KB
16                         65,536                       64 KB
20                      1,048,576   1 million            1 MB
30                  1,073,741,824   1 billion            1 GB
32                  4,294,967,296                        4 GB
40              1,099,511,627,776   1 trillion           1 TB

Source(s) and further reading

Powers of two

Latency numbers every programmer should know
Latency Comparison Numbers
--------------------------
L1 cache reference                           0.5 ns
Branch mispredict                            5   ns
L2 cache reference                           7   ns                      14x L1 cache
Mutex lock/unlock                           25   ns
Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy            10,000   ns       10 us
Send 1 KB bytes over 1 Gbps network     10,000   ns       10 us
Read 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Round trip within same datacenter      500,000   ns      500 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip
Read 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD
Read 1 MB sequentially from disk    30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD
Send packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms

Notes
-----
1 ns = 10^-9 seconds
1 us = 10^-6 seconds = 1,000 ns
1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns

Handy metrics based on numbers above:

Read sequentially from disk at 30 MB/s
Read sequentially from 1 Gbps Ethernet at 100 MB/s
Read sequentially from SSD at 1 GB/s
Read sequentially from main memory at 4 GB/s
6-7 world-wide round trips per second
2,000 round trips per second within a data center

Latency numbers visualized

Source(s) and further reading

Latency numbers every programmer should know - 1
Latency numbers every programmer should know - 2
Designs, lessons, and advice from building large distributed systems
Software Engineering Advice from Building Large-Scale Distributed Systems

Additional system design interview questions

Common system design interview questions, with links to resources on how to solve each.




Question
Reference(s)




Design a file sync service like Dropbox
youtube.com


Design a search engine like Google
queue.acm.orgstackexchange.comardendertat.comstanford.edu


Design a scalable web crawler like Google
quora.com


Design Google docs
code.google.comneil.fraser.name


Design a key-value store like Redis
slideshare.net


Design a cache system like Memcached
slideshare.net


Design a recommendation system like Amazon's
hulu.comijcai13.org


Design a tinyurl system like Bitly
n00tc0d3r.blogspot.com


Design a chat app like WhatsApp
highscalability.com


Design a picture sharing system like Instagram
highscalability.comhighscalability.com


Design the Facebook news feed function
quora.comquora.comslideshare.net


Design the Facebook timeline function
facebook.comhighscalability.com


Design the Facebook chat function
erlang-factory.comfacebook.com


Design a graph search function like Facebook's
facebook.comfacebook.comfacebook.com


Design a content delivery network like CloudFlare
figshare.com


Design a trending topic system like Twitter's
michael-noll.comsnikolov .wordpress.com


Design a random ID generation system
blog.twitter.comgithub.com


Return the top k requests during a time interval
cs.ucsb.eduwpi.edu


Design a system that serves data from multiple data centers
highscalability.com


Design an online multiplayer card game
indieflashblog.combuildnewgames.com


Design a garbage collection system
stuffwithstuff.comwashington.edu


Design an API rate limiter
https://stripe.com/blog/


Add a system design question
Contribute



Real world architectures

Articles on how real world systems are designed.




Source: Twitter timelines at scale

Don't focus on nitty gritty details for the following articles, instead:

Identify shared principles, common technologies, and patterns within these articles
Study what problems are solved by each component, where it works, where it doesn't
Review the lessons learned




Type
System
Reference(s)




Data processing
MapReduce - Distributed data processing from Google
research.google.com


Data processing
Spark - Distributed data processing from Databricks
slideshare.net


Data processing
Storm - Distributed data processing from Twitter
slideshare.net







Data store
Bigtable - Distributed column-oriented database from Google
harvard.edu


Data store
HBase - Open source implementation of Bigtable
slideshare.net


Data store
Cassandra - Distributed column-oriented database from Facebook
slideshare.net


Data store
DynamoDB - Document-oriented database from Amazon
harvard.edu


Data store
MongoDB - Document-oriented database
slideshare.net


Data store
Spanner - Globally-distributed database from Google
research.google.com


Data store
Memcached - Distributed memory caching system
slideshare.net


Data store
Redis - Distributed memory caching system with persistence and value types
slideshare.net







File system
Google File System (GFS) - Distributed file system
research.google.com


File system
Hadoop File System (HDFS) - Open source implementation of GFS
apache.org







Misc
Chubby - Lock service for loosely-coupled distributed systems from Google
research.google.com


Misc
Dapper - Distributed systems tracing infrastructure
research.google.com


Misc
Kafka - Pub/sub message queue from LinkedIn
slideshare.net


Misc
Zookeeper - Centralized infrastructure and services enabling synchronization
slideshare.net



Add an architecture
Contribute



Company architectures



Company
Reference(s)




Amazon
Amazon architecture


Cinchcast
Producing 1,500 hours of audio every day


DataSift
Realtime datamining At 120,000 tweets per second


DropBox
How we've scaled Dropbox


ESPN
Operating At 100,000 duh nuh nuhs per second


Google
Google architecture


Instagram
14 million users, terabytes of photosWhat powers Instagram


Justin.tv
Justin.Tv's live video broadcasting architecture


Facebook
Scaling memcached at FacebookTAO: Facebook’s distributed data store for the social graphFacebook’s photo storageHow Facebook Live Streams To 800,000 Simultaneous Viewers


Flickr
Flickr architecture


Mailbox
From 0 to one million users in 6 weeks


Netflix
A 360 Degree View Of The Entire Netflix StackNetflix: What Happens When You Press Play?


Pinterest
From 0 To 10s of billions of page views a month18 million visitors, 10x growth, 12 employees


Playfish
50 million monthly users and growing


PlentyOfFish
PlentyOfFish architecture


Salesforce
How they handle 1.3 billion transactions a day


Stack Overflow
Stack Overflow architecture


TripAdvisor
40M visitors, 200M dynamic page views, 30TB data


Tumblr
15 billion page views a month


Twitter
Making Twitter 10000 percent fasterStoring 250 million tweets a day using MySQL150M active users, 300K QPS, a 22 MB/S firehoseTimelines at scaleBig and small data at TwitterOperations at Twitter: scaling beyond 100 million usersHow Twitter Handles 3,000 Images Per Second


Uber
How Uber scales their real-time market platformLessons Learned From Scaling Uber To 2000 Engineers, 1000 Services, And 8000 Git Repositories


WhatsApp
The WhatsApp architecture Facebook bought for $19 billion


YouTube
YouTube scalabilityYouTube architecture



Company engineering blogs

Architectures for companies you are interviewing with.
Questions you encounter might be from the same domain.


Airbnb Engineering
Atlassian Developers
AWS Blog
Bitly Engineering Blog
Box Blogs
Cloudera Developer Blog
Dropbox Tech Blog
Engineering at Quora
Ebay Tech Blog
Evernote Tech Blog
Etsy Code as Craft
Facebook Engineering
Flickr Code
Foursquare Engineering Blog
GitHub Engineering Blog
Google Research Blog
Groupon Engineering Blog
Heroku Engineering Blog
Hubspot Engineering Blog
High Scalability
Instagram Engineering
Intel Software Blog
Jane Street Tech Blog
LinkedIn Engineering
Microsoft Engineering
Microsoft Python Engineering
Netflix Tech Blog
Paypal Developer Blog
Pinterest Engineering Blog
Quora Engineering
Reddit Blog
Salesforce Engineering Blog
Slack Engineering Blog
Spotify Labs
Twilio Engineering Blog
Twitter Engineering
Uber Engineering Blog
Yahoo Engineering Blog
Yelp Engineering Blog
Zynga Engineering Blog

Source(s) and further reading
Looking to add a blog?  To avoid duplicating work, consider adding your company blog to the following repo:

kilimchoi/engineering-blogs

Under development
Interested in adding a section or helping complete one in-progress?  Contribute!

Distributed computing with MapReduce
Consistent hashing
Scatter gather
Contribute

Credits
Credits and sources are provided throughout this repo.
Special thanks to:

Hired in tech
Cracking the coding interview
High scalability
checkcheckzz/system-design-interview
shashank88/system_design
mmcgrana/services-engineering
System design cheat sheet
A distributed systems reading list
Cracking the system design interview

Contact info
Feel free to contact me to discuss any issues, questions, or comments.
My contact info can be found on my GitHub page.
License
I am providing code and resources in this repository to you under an open source license.  Because this is my personal repository, the license you receive to my code and resources is from me and not my employer (Facebook).
Copyright 2017 Donne Martin

Creative Commons Attribution 4.0 International License (CC BY 4.0)

http://creativecommons.org/licenses/by/4.0/


"
22,"
Awesome Python 
A curated list of awesome Python frameworks, libraries, software and resources.
Inspired by awesome-php.

Awesome Python

Admin Panels
Algorithms and Design Patterns
Asynchronous Programming
Audio
Authentication
Build Tools
Built-in Classes Enhancement
Caching
ChatOps Tools
CMS
Code Analysis
Command-line Interface Development
Command-line Tools
Compatibility
Computer Vision
Concurrency and Parallelism
Configuration
Cryptography
Data Analysis
Data Validation
Data Visualization
Database Drivers
Database
Date and Time
Debugging Tools
Deep Learning
DevOps Tools
Distributed Computing
Distribution
Documentation
Downloader
E-commerce
Editor Plugins and IDEs
Email
Environment Management
Files
Foreign Function Interface
Forms
Functional Programming
Game Development
Geolocation
GUI Development
Hardware
HTML Manipulation
HTTP Clients
Image Processing
Implementations
Interactive Interpreter
Internationalization
Job Scheduler
Logging
Machine Learning
Miscellaneous
Natural Language Processing
Network Virtualization
News Feed
ORM
Package Management
Package Repositories
Permissions
Processes
Recommender Systems
RESTful API
Robotics
RPC Servers
Science
Search
Serialization
Serverless Frameworks
Specific Formats Processing
Static Site Generator
Tagging
Task Queues
Template Engine
Testing
Text Processing
Third-party APIs
URL Manipulation
Video
Web Asset Management
Web Content Extracting
Web Crawling
Web Frameworks
WebSocket
WSGI Servers


Resources

Podcasts
Twitter
Websites
Weekly


Contributing


Admin Panels
Libraries for administrative interfaces.

ajenti - The admin panel your servers deserve.
django-grappelli - A jazzy skin for the Django Admin-Interface.
django-jet - Modern responsive template for the Django admin interface with improved functionality.
django-suit - Alternative Django Admin-Interface (free only for Non-commercial use).
django-xadmin - Drop-in replacement of Django admin comes with lots of goodies.
jet-bridge - Admin panel framework for any application with nice UI (ex Jet Django)
flask-admin - Simple and extensible administrative interface framework for Flask.
flower - Real-time monitor and web admin for Celery.
wooey - A Django app which creates automatic web UIs for Python scripts.

Algorithms and Design Patterns
Python implementation of algorithms and design patterns.

algorithms - Minimal examples of data structures and algorithms in Python.
PyPattyrn - A simple yet effective library for implementing common design patterns.
python-patterns - A collection of design patterns in Python.
sortedcontainers - Fast, pure-Python implementation of SortedList, SortedDict, and SortedSet types.

Asynchronous Programming

asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.

awesome-asyncio


uvloop - Ultra fast asyncio event loop.
Twisted - An event-driven networking engine.

Audio
Libraries for manipulating audio and its metadata.

Audio

audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.
dejavu - Audio fingerprinting and recognition.
mingus - An advanced music theory and notation package with MIDI file and playback support.
pyAudioAnalysis - Audio feature extraction, classification, segmentation and applications.
pydub - Manipulate audio with a simple and easy high level interface.
TimeSide - Open web audio processing framework.


Metadata

beets - A music library manager and MusicBrainz tagger.
eyeD3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata.
mutagen - A Python module to handle audio metadata.
tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files.



Authentication
Libraries for implementing authentications schemes.

OAuth

authlib - JavaScript Object Signing and Encryption draft implementation.
django-allauth - Authentication app for Django that ""just works.""
django-oauth-toolkit - OAuth 2 goodies for Django.
oauthlib - A generic and thorough implementation of the OAuth request-signing logic.
python-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers.
python-social-auth - An easy-to-setup social authentication mechanism.


JWT

pyjwt - JSON Web Token implementation in Python.
python-jose - A JOSE implementation in Python.
python-jwt - A module for generating and verifying JSON Web Tokens.



Build Tools
Compile software from source code.

BitBake - A make-like build tool for embedded Linux.
buildout - A build system for creating, assembling and deploying applications from multiple parts.
PlatformIO - A console tool to build code with different development platforms.
pybuilder - A continuous build tool written in pure Python.
SCons - A software construction tool.

Built-in Classes Enhancement
Libraries for enhancing Python built-in classes.

dataclasses - (Python standard library) Data classes.
attrs - Replacement for __init__, __eq__, __repr__, etc. boilerplate in class definitions.
bidict - Efficient, Pythonic bidirectional map data structures and related functionality..
Box - Python dictionaries with advanced dot notation access.
DottedDict - A library that provides a method of accessing lists and dicts with a dotted path notation.

CMS
Content Management Systems.

wagtail - A Django content management system.
django-cms - An Open source enterprise CMS based on the Django.
feincms - One of the most advanced Content Management Systems built on Django.
Kotti - A high-level, Pythonic web application framework built on Pyramid.
mezzanine - A powerful, consistent, and flexible content management platform.
plone - A CMS built on top of the open source application server Zope.
quokka - Flexible, extensible, small CMS powered by Flask and MongoDB.

Caching
Libraries for caching data.

beaker - A WSGI middleware for sessions and caching.
django-cache-machine - Automatic caching and invalidation for Django models.
django-cacheops - A slick ORM cache with automatic granular event-driven invalidation.
dogpile.cache - dogpile.cache is next generation replacement for Beaker made by same authors.
HermesCache - Python caching library with tag-based invalidation and dogpile effect prevention.
pylibmc - A Python wrapper around the libmemcached interface.
python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis.

ChatOps Tools
Libraries for chatbot development.

errbot - The easiest and most popular chatbot to implement ChatOps.

Code Analysis
Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis.

Code Analysis

coala - Language independent and easily extendable code analysis application.
code2flow - Turn your Python and JavaScript code into DOT flowcharts.
prospector - A tool to analyse Python code.
pycallgraph - A library that visualises the flow (call graph) of your Python application.


Code Linters

flake8 - A wrapper around pycodestyle, pyflakes and McCabe.

awesome-flake8-extensions


pylint - A fully customizable source code analyzer.
pylama - A code audit tool for Python and JavaScript.
wemake-python-styleguide - The strictest and most opinionated python linter ever.


Code Formatters

black - The uncompromising Python code formatter.
yapf - Yet another Python code formatter from Google.


Static Type Checkers, also see awesome-python-typing

mypy - Check variable types during compile time.
pyre-check - Performant type checking.


Static Type Annotations Generators

MonkeyType - A system for Python that generates static type annotations by collecting runtime types



Command-line Interface Development
Libraries for building command-line applications.

Command-line Application Development

cement - CLI Application Framework for Python.
click - A package for creating beautiful command line interfaces in a composable way.
cliff - A framework for creating command-line programs with multi-level commands.
clint - Python Command-line Application Tools.
docopt - Pythonic command line arguments parser.
python-fire - A library for creating command line interfaces from absolutely any Python object.
python-prompt-toolkit - A library for building powerful interactive command lines.


Terminal Rendering

asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations).
bashplotlib - Making basic plots in the terminal.
colorama - Cross-platform colored terminal text.
tqdm - Fast, extensible progress bar for loops and CLI.



Command-line Tools
Useful CLI-based tools for productivity.

Productivity Tools

cookiecutter - A command-line utility that creates projects from cookiecutters (project templates).
doitlive - A tool for live presentations in the terminal.
howdoi - Instant coding answers via the command line.
PathPicker - Select files out of bash output.
percol - Adds flavor of interactive selection to the traditional pipe concept on UNIX.
thefuck - Correcting your previous console command.
tmuxp - A tmux session manager.
try - A dead simple CLI to try out python packages - it's never been easier.


CLI Enhancements

httpie - A command line HTTP client, a user-friendly cURL replacement.
kube-shell - An integrated shell for working with the Kubernetes CLI.
mycli - A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting.
pgcli - Postgres CLI with autocompletion and syntax highlighting.
saws - A Supercharged aws-cli.



Compatibility
Libraries for migrating from Python 2 to 3.

python-future - The missing compatibility layer between Python 2 and Python 3.
python-modernize - Modernizes Python code for eventual Python 3 migration.
six - Python 2 and 3 compatibility utilities.

Computer Vision
Libraries for computer vision.

OpenCV - Open Source Computer Vision Library.
pytesseract - Another wrapper for Google Tesseract OCR.
SimpleCV - An open source framework for building computer vision applications.

Concurrency and Parallelism
Libraries for concurrent and parallel execution. Also see awesome-asyncio.

concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables.
multiprocessing - (Python standard library) Process-based parallelism.
eventlet - Asynchronous framework with WSGI support.
gevent - A coroutine-based Python networking library that uses greenlet.
uvloop - Ultra fast implementation of asyncio event loop on top of libuv.
scoop - Scalable Concurrent Operations in Python.

Configuration
Libraries for storing and parsing configuration options.

configobj - INI file parser with validation.
configparser - (Python standard library) INI file parser.
profig - Config from multiple formats with value conversion.
python-decouple - Strict separation of settings from code.

Cryptography

cryptography - A package designed to expose cryptographic primitives and recipes to Python developers.
paramiko - The leading native Python SSHv2 protocol library.
passlib - Secure password storage/hashing library, very high level.
pynacl - Python binding to the Networking and Cryptography (NaCl) library.

Data Analysis
Libraries for data analyzing.

Blaze - NumPy and Pandas interface to Big Data.
Open Mining - Business Intelligence (BI) in Pandas interface.
Orange - Data mining, data visualization, analysis and machine learning through visual programming or scripts.
Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools.
Optimus - Agile Data Science Workflows made easy with PySpark.

Data Validation
Libraries for validating data. Used for forms in many cases.

Cerberus - A lightweight and extensible data validation library.
colander - Validating and deserializing data obtained via XML, JSON, an HTML form post.
jsonschema - An implementation of JSON Schema for Python.
schema - A library for validating Python data structures.
Schematics - Data Structure Validation.
valideer - Lightweight extensible data validation and adaptation library.
voluptuous - A Python data validation library.

Data Visualization
Libraries for visualizing data. Also see awesome-javascript.

Altair - Declarative statistical visualization library for Python.
Bokeh - Interactive Web Plotting for Python.
bqplot - Interactive Plotting Library for the Jupyter Notebook
Dash - Built on top of Flask, React and Plotly aimed at analytical web applications.

awesome-dash


plotnine - A grammar of graphics for Python based on ggplot2.
Matplotlib - A Python 2D plotting library.
Pygal - A Python SVG Charts Creator.
PyGraphviz - Python interface to Graphviz.
PyQtGraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.
Seaborn - Statistical data visualization using Matplotlib.
VisPy - High-performance scientific visualization based on OpenGL.

Database
Databases implemented in Python.

pickleDB - A simple and lightweight key-value store for Python.
tinydb - A tiny, document-oriented database.
ZODB - A native object database for Python. A key-value and object graph database.

Database Drivers
Libraries for connecting and operating databases.

MySQL - awesome-mysql

mysqlclient - MySQL connector with Python 3 support (mysql-python fork).
PyMySQL - A pure Python MySQL driver compatible to mysql-python.


PostgreSQL - awesome-postgres

psycopg2 - The most popular PostgreSQL adapter for Python.
queries - A wrapper of the psycopg2 library for interacting with PostgreSQL.


Other Relational Databases

pymssql - A simple database interface to Microsoft SQL Server.
SuperSQLite - A supercharged SQLite library built on top of apsw.


NoSQL Databases

cassandra-driver - The Python Driver for Apache Cassandra.
happybase - A developer-friendly library for Apache HBase.
kafka-python - The Python client for Apache Kafka.
py2neo - A client library and toolkit for working with Neo4j.
pymongo - The official Python client for MongoDB.
redis-py - The Python client for Redis.


Asynchronous Clients

motor - The async Python driver for MongoDB.



Date and Time
Libraries for working with dates and times.

Chronyk - A Python 3 library for parsing human-written times and dates.
dateutil - Extensions to the standard Python datetime module.
delorean - A library for clearing up the inconvenient truths that arise dealing with datetimes.
moment - A Python library for dealing with dates/times. Inspired by Moment.js.
Pendulum - Python datetimes made easy.
PyTime - An easy-to-use Python module which aims to operate date/time/datetime by string.
pytz - World timezone definitions, modern and historical. Brings the tz database into Python.
when.py - Providing user-friendly functions to help perform common date and time actions.
maya - Datetimes for Humans.

Debugging Tools
Libraries for debugging code.

pdb-like Debugger

ipdb - IPython-enabled pdb.
pdb++ - Another drop-in replacement for pdb.
pudb - A full-screen, console-based Python debugger.
wdb - An improbable web debugger through WebSockets.


Tracing

lptrace - strace for Python programs.
manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.
pyringe - Debugger capable of attaching to and injecting code into Python processes.
python-hunter - A flexible code tracing toolkit.


Profiler

line_profiler - Line-by-line profiling.
memory_profiler - Monitor Memory usage of Python code.
profiling - An interactive Python profiler.
py-spy - A sampling profiler for Python programs. Written in Rust.
pyflame - A ptracing profiler For Python.
vprof - Visual Python profiler.


Others

icecream - Inspect variables, expressions, and program execution with a single, simple function call.
django-debug-toolbar - Display various debug information for Django.
django-devserver - A drop-in replacement for Django's runserver.
flask-debugtoolbar - A port of the django-debug-toolbar to flask.
pyelftools - Parsing and analyzing ELF files and DWARF debugging information.



Deep Learning
Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning.

caffe - A fast open framework for deep learning..
keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.
mxnet - A deep learning framework designed for both efficiency and flexibility.
pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration.
SerpentAI - Game agent framework. Use any video game as a deep learning sandbox.
tensorflow - The most popular Deep Learning framework created by Google.
Theano - A library for fast numerical computation.

DevOps Tools
Software and libraries for DevOps.

ansible - A radically simple IT automation platform.
cloudinit - A multi-distribution package that handles early initialization of a cloud instance.
cuisine - Chef-like functionality for Fabric.
docker-compose - Fast, isolated development environments using Docker.
fabric - A simple, Pythonic tool for remote execution and deployment.
fabtools - Tools for writing awesome Fabric files.
honcho - A Python clone of Foreman, for managing Procfile-based applications.
OpenStack - Open source software for building private and public clouds.
pexpect - Controlling interactive programs in a pseudo-terminal like GNU expect.
psutil - A cross-platform process and system utilities module.
saltstack - Infrastructure automation and management system.
supervisor - Supervisor process control system for UNIX.

Distributed Computing
Frameworks and libraries for Distributed Computing.

Batch Processing

PySpark - Apache Spark Python API.
dask - A flexible parallel computing library for analytic computing.
luigi - A module that helps you build complex pipelines of batch jobs.
mrjob - Run MapReduce jobs on Hadoop or Amazon Web Services.
Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem.


Stream Processing

faust - A stream processing library, porting the ideas from Kafka Streams to Python.
streamparse - Run Python code against real-time streams of data via Apache Storm.



Distribution
Libraries to create packaged executables for release distribution.

dh-virtualenv - Build and distribute a virtualenv as a Debian package.
Nuitka - Compile scripts, modules, packages to an executable or extension module.
py2app - Freezes Python scripts (Mac OS X).
py2exe - Freezes Python scripts (Windows).
PyInstaller - Converts Python programs into stand-alone executables (cross-platform).
pynsist - A tool to build Windows installers, installers bundle Python itself.

Documentation
Libraries for generating project documentation.

sphinx - Python Documentation generator.

awesome-sphinxdoc


pdoc - Epydoc replacement to auto generate API documentation for Python libraries.
pycco - The literate-programming-style documentation generator.

Downloader
Libraries for downloading.

s3cmd - A command line tool for managing Amazon S3 and CloudFront.
s4cmd - Super S3 command line tool, good for higher performance.
you-get - A YouTube/Youku/Niconico video downloader written in Python 3.
youtube-dl - A small command-line program to download videos from YouTube.

E-commerce
Frameworks and libraries for e-commerce and payments.

alipay - Unofficial Alipay API for Python.
Cartridge - A shopping cart app built using the Mezzanine.
django-oscar - An open-source e-commerce framework for Django.
django-shop - A Django based shop system.
merchant - A Django app to accept payments from various payment processors.
money - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.
python-currencies - Display money format and its filthy currencies.
forex-python - Foreign exchange rates, Bitcoin price index and currency conversion.
saleor - An e-commerce storefront for Django.
shoop - An open source E-Commerce platform based on Django.

Editor Plugins and IDEs

Emacs

elpy - Emacs Python Development Environment.


Sublime Text

anaconda - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.
SublimeJEDI - A Sublime Text plugin to the awesome auto-complete library Jedi.


Vim

jedi-vim - Vim bindings for the Jedi auto-completion library for Python.
python-mode - An all in one plugin for turning Vim into a Python IDE.
YouCompleteMe - Includes Jedi-based completion engine for Python.


Visual Studio

PTVS - Python Tools for Visual Studio.


Visual Studio Code

Python - The official VSCode extension with rich support for Python.


IDE

PyCharm - Commercial Python IDE by JetBrains. Has free community edition available.
spyder - Open Source Python IDE.



Email
Libraries for sending and parsing email.

envelopes - Mailing for human beings.
flanker - An email address and Mime parsing library.
imbox - Python IMAP for Humans.
inbox.py - Python SMTP Server for Humans.
lamson - Pythonic SMTP Application Server.
Marrow Mailer - High-performance extensible mail delivery framework.
modoboa - A mail hosting and management platform including a modern and simplified Web UI.
Nylas Sync Engine - Providing a RESTful API on top of a powerful email sync platform.
yagmail - Yet another Gmail/SMTP client.

Environment Management
Libraries for Python version and virtual environment management.

pyenv - Simple Python version management.
pipenv - Python Development Workflow for Humans.
poetry - Python dependency management and packaging made easy.
virtualenv - A tool to create isolated Python environments.

Files
Libraries for file manipulation and MIME type detection.

mimetypes - (Python standard library) Map filenames to MIME types.
path.py - A module wrapper for os.path.
pathlib - (Python standard library) An cross-platform, object-oriented path library.
PyFilesystem2 - Python's filesystem abstraction layer.
python-magic - A Python interface to the libmagic file type identification library.
Unipath - An object-oriented approach to file/directory operations.
watchdog - API and shell utilities to monitor file system events.

Foreign Function Interface
Libraries for providing foreign function interface.

cffi - Foreign Function Interface for Python calling C code.
ctypes - (Python standard library) Foreign Function Interface for Python calling C code.
PyCUDA - A Python wrapper for Nvidia's CUDA API.
SWIG - Simplified Wrapper and Interface Generator.

Forms
Libraries for working with forms.

Deform - Python HTML form generation library influenced by the formish form generation library.
django-bootstrap3 - Bootstrap 3 integration with Django.
django-bootstrap4 - Bootstrap 4 integration with Django.
django-crispy-forms - A Django app which lets you create beautiful forms in a very elegant and DRY way.
django-remote-forms - A platform independent Django form serializer.
WTForms - A flexible forms validation and rendering library.

Functional Programming
Functional Programming with Python.

Coconut - Coconut is a variant of Python built for simple, elegant, Pythonic functional programming.
CyToolz - Cython implementation of Toolz: High performance functional utilities.
fn.py - Functional programming in Python: implementation of missing features to enjoy FP.
funcy - A fancy and practical functional tools.
Toolz - A collection of functional utilities for iterators, functions, and dictionaries.

GUI Development
Libraries for working with graphical user interface applications.

curses - Built-in wrapper for ncurses used to create terminal GUI applications.
Eel - A library for making simple Electron-like offline HTML/JS GUI apps.
enaml - Creating beautiful user-interfaces with Declarative Syntax like QML.
Flexx - Flexx is a pure Python toolkit for creating GUI's, that uses web technology for its rendering.
Gooey - Turn command line programs into a full GUI application with one line.
kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.
pyglet - A cross-platform windowing and multimedia library for Python.
PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).
PyQt - Python bindings for the Qt cross-platform application and UI framework.
PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi.
pywebview - A lightweight cross-platform native wrapper around a webview component.
Tkinter - Tkinter is Python's de-facto standard GUI package.
Toga - A Python native, OS native GUI toolkit.
urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.
wxPython - A blending of the wxWidgets C++ class library with the Python.

Game Development
Awesome game development libraries.

Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.
Harfang3D - Python framework for 3D, VR and game development.
Panda3D - 3D game engine developed by Disney.
Pygame - Pygame is a set of Python modules designed for writing games.
PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.
PyOpenGL - Python ctypes bindings for OpenGL and it's related APIs.
PySDL2 - A ctypes based wrapper for the SDL2 library.
RenPy - A Visual Novel engine.

Geolocation
Libraries for geocoding addresses and working with latitudes and longitudes.

django-countries - A Django app that provides a country field for models and forms.
GeoDjango - A world-class geographic web framework.
GeoIP - Python API for MaxMind GeoIP Legacy Database.
geojson - Python bindings and utilities for GeoJSON.
geopy - Python Geocoding Toolbox.
pygeoip - Pure Python GeoIP API.

HTML Manipulation
Libraries for working with HTML and XML.

BeautifulSoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.
bleach - A whitelist-based HTML sanitization and text linkification library.
cssutils - A CSS library for Python.
html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments.
lxml - A very fast, easy-to-use and versatile library for handling HTML and XML.
MarkupSafe - Implements a XML/HTML/XHTML Markup safe string for Python.
pyquery - A jQuery-like library for parsing HTML.
untangle - Converts XML documents to Python objects for easy access.
WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF.
xmldataset - Simple XML Parsing.
xmltodict - Working with XML feel like you are working with JSON.

HTTP Clients
Libraries for working with HTTP.

grequests - requests + gevent for asynchronous HTTP requests.
httplib2 - Comprehensive HTTP client library.
requests - HTTP Requests for Humans.
treq - Python requests like API built on top of Twisted's HTTP client.
urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.

Hardware
Libraries for programming with hardware.

ino - Command line toolkit for working with Arduino.
keyboard - Hook and simulate global keyboard events on Windows and Linux.
mouse - Hook and simulate global mouse events on Windows and Linux.
Pingo - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.
PyUserInput - A module for cross-platform control of the mouse and keyboard.
scapy - A brilliant packet manipulation library.
wifi - A Python library and command line tool for working with WiFi on Linux.

Image Processing
Libraries for manipulating images.

hmap - Image histogram remapping.
imgSeek - A project for searching a collection of images using visual similarity.
nude.py - Nudity detection.
pagan - Retro identicon (Avatar) generation based on input string and hash.
pillow - Pillow is the friendly PIL fork.
pyBarcode - Create barcodes in Python without needing PIL.
pygram - Instagram-like image filters.
python-qrcode - A pure Python QR Code generator.
Quads - Computer art based on quadtrees.
scikit-image - A Python library for (scientific) image processing.
thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.
wand - Python bindings for MagickWand, C API for ImageMagick.

Implementations
Implementations of Python.

CPython - Default, most widely used implementation of the Python programming language written in C.
Cython - Optimizing Static Compiler for Python.
CLPython - Implementation of the Python programming language written in Common Lisp.
Grumpy - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).
IronPython - Implementation of the Python programming language written in C#.
Jython - Implementation of Python programming language written in Java for the JVM.
MicroPython - A lean and efficient Python programming language implementation.
Numba - Python JIT compiler to LLVM aimed at scientific Python.
PeachPy - x86-64 assembler embedded in Python.
Pyjion - A JIT for Python based upon CoreCLR.
PyPy - A very fast and compliant implementation of the Python language.
Pyston - A Python implementation using JIT techniques.
Stackless Python - An enhanced version of the Python programming language.

Interactive Interpreter
Interactive Python interpreters (REPL).

bpython - A fancy interface to the Python interpreter.
Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively.

awesome-jupyter


ptpython - Advanced Python REPL built on top of the python-prompt-toolkit.

Internationalization
Libraries for working with i18n.

Babel - An internationalization library for Python.
PyICU - A wrapper of International Components for Unicode C++ library (ICU).

Job Scheduler
Libraries for scheduling jobs.

APScheduler - A light but powerful in-process task scheduler that lets you schedule functions.
django-schedule - A calendaring app for Django.
doit - A task runner and build tool.
gunnery - Multipurpose task execution tool for distributed systems with web-based interface.
Joblib - A set of tools to provide lightweight pipelining in Python.
Plan - Writing crontab file in Python like a charm.
schedule - Python job scheduling for humans.
Spiff - A powerful workflow engine implemented in pure Python.
TaskFlow - A Python library that helps to make task execution easy, consistent and reliable.
Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows.

Logging
Libraries for generating and working with logs.

Eliot - Logging for complex & distributed systems.
logbook - Logging replacement for Python.
logging - (Python standard library) Logging facility for Python.
raven - Python client for Sentry, a log/error tracking, crash reporting and aggregation platform for web applications.

Machine Learning
Libraries for Machine Learning. Also see awesome-machine-learning.

H2O - Open Source Fast Scalable Machine Learning Platform.
Metrics - Machine learning evaluation metrics.
NuPIC - Numenta Platform for Intelligent Computing.
scikit-learn - The most popular Python library for Machine Learning.
Spark ML - Apache Spark's scalable Machine Learning library.
vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit.
xgboost - A scalable, portable, and distributed gradient boosting library.

Microsoft Windows
Python programming on Microsoft Windows.

Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder.
pythonlibs - Unofficial Windows binaries for Python extension packages.
PythonNet - Python Integration with the .NET Common Language Runtime (CLR).
PyWin32 - Python Extensions for Windows.
WinPython - Portable development environment for Windows 7/8.

Miscellaneous
Useful libraries or tools that don't fit in the categories above.

blinker - A fast Python in-process signal/event dispatching system.
boltons - A set of pure-Python utilities.
itsdangerous - Various helpers to pass trusted data to untrusted environments.
pluginbase - A simple but flexible plugin system for Python.
tryton - A general purpose business framework.

Natural Language Processing
Libraries for working with human languages.

General

gensim - Topic Modeling for Humans.
langid.py - Stand-alone language identification system.
nltk - A leading platform for building Python programs to work with human language data.
pattern - A web mining module for the Python.
polyglot - Natural language pipeline supporting hundreds of languages.
pytext - A natural language modeling framework based on PyTorch.
PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research.
spacy - A library for industrial-strength natural language processing in Python and Cython.
stanfordnlp - The Stanford NLP Group's official Python library, supporting 50+ languages.


Chinese

jieba - The most popular Chinese text segmentation library.
pkuseg-python - A toolkit for Chinese word segmentation in various domains.
snownlp - A library for processing Chinese text.
funNLP - A collection of tools and datasets for Chinese NLP.



Network Virtualization
Tools and libraries for Virtual Networking and SDN (Software Defined Networking).

mininet - A popular network emulator and API written in Python.
napalm - Cross-vendor API to manipulate network devices.
pox - A Python-based SDN control applications, such as OpenFlow SDN controllers.

News Feed
Libraries for building user's activities.

django-activity-stream - Generating generic activity streams from the actions on your site.
Stream Framework - Building news feed and notification systems using Cassandra and Redis.

ORM
Libraries that implement Object-Relational Mapping or data mapping techniques.

Relational Databases

Django Models - The Django ORM.
SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper.

awesome-sqlalchemy


dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.
orator -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.
orm - An async ORM.
peewee - A small, expressive ORM.
pony - ORM that provides a generator-oriented interface to SQL.
pydal - A pure Python Database Abstraction Layer.


NoSQL Databases

hot-redis - Rich Python data types for Redis.
mongoengine - A Python Object-Document-Mapper for working with MongoDB.
PynamoDB - A Pythonic interface for Amazon DynamoDB.
redisco - A Python Library for Simple Models and Containers Persisted in Redis.



Package Management
Libraries for package and dependency management.

pip - The Python package and dependency manager.

PyPI
pip-tools - A set of tools to keep your pinned Python dependencies fresh.


conda - Cross-platform, Python-agnostic binary package manager.

Package Repositories
Local PyPI repository server and proxies.

warehouse - Next generation Python Package Repository (PyPI).
bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA).
devpi - PyPI server and packaging/testing/release tool.
localshop - Local PyPI server (custom packages and auto-mirroring of pypi).

Permissions
Libraries that allow or deny users access to data or functionality.

django-guardian - Implementation of per object permissions for Django 1.2+
django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database.

Processes
Libraries for starting and communicating with OS processes.

delegator.py - Subprocesses for Humans 2.0.
sarge - Yet another wrapper for subprocess.
sh - A full-fledged subprocess replacement for Python.

Recommender Systems
Libraries for building recommender systems.

annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage.
fastFM - A library for Factorization Machines.
implicit - A fast Python implementation of collaborative filtering for implicit datasets.
libffm - A library for Field-aware Factorization Machine (FFM).
lightfm - A Python implementation of a number of popular recommendation algorithms.
spotlight - Deep recommender models using PyTorch.
Surprise - A scikit for building and analyzing recommender systems.
tensorrec - A Recommendation Engine Framework in TensorFlow.

RESTful API
Libraries for building RESTful APIs.

Django

django-rest-framework - A powerful and flexible toolkit to build web APIs.
django-tastypie - Creating delicious APIs for Django apps.


Flask

eve - REST API framework powered by Flask, MongoDB and good intentions.
flask-api - Browsable Web APIs for Flask.
flask-restful - Quickly building REST APIs for Flask.


Pyramid

cornice - A RESTful framework for Pyramid.


Framework agnostic

apistar - A smart Web API framework, designed for Python 3.
falcon - A high-performance framework for building cloud APIs and web app backends.
fastapi - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.
hug - A Python 3 framework for cleanly exposing APIs.
sandman2 - Automated REST APIs for existing database-driven systems.
sanic - A Python 3.6+ web server and web framework that's written to go fast.
vibora - Fast, efficient and asynchronous Web framework inspired by Flask.



Robotics
Libraries for robotics.

PythonRobotics - This is a compilation of various robotics algorithms with visualizations.
rospy - This is a library for ROS (Robot Operating System).

RPC Servers
RPC-compatible servers.

zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack.

Science
Libraries for scientific computing. Also see Python-for-Scientists

astropy - A community Python library for Astronomy.
bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis.
bccb - Collection of useful code related to biological analysis.
Biopython - Biopython is a set of freely available tools for biological computation.
cclib - A library for parsing and interpreting the results of computational chemistry packages.
Colour - Implementing a comprehensive number of colour theory transformations and algorithms.
NetworkX - A high-productivity software for complex networks.
NIPY - A collection of neuroimaging toolkits.
NumPy - A fundamental package for scientific computing with Python.
Open Babel - A chemical toolbox designed to speak the many languages of chemical data.
ObsPy - A Python toolbox for seismology.
PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.
PyMC - Markov Chain Monte Carlo sampling toolkit.
QuTiP - Quantum Toolbox in Python.
RDKit - Cheminformatics and Machine Learning Software.
SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering.
statsmodels - Statistical modeling and econometrics in Python.
SymPy - A Python library for symbolic mathematics.
Zipline - A Pythonic algorithmic trading library.
SimPy -  A process-based discrete-event simulation framework.

Search
Libraries and software for indexing and performing search queries on data.

elasticsearch-py - The official low-level Python client for Elasticsearch.
elasticsearch-dsl-py - The official high-level Python client for Elasticsearch.
django-haystack - Modular search for Django.
pysolr - A lightweight Python wrapper for Apache Solr.
whoosh - A fast, pure Python search engine library.

Serialization
Libraries for serializing complex data types

marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes.
pysimdjson - A Python bindings for simdjson.
python-rapidjson - A Python wrapper around RapidJSON.
ultrajson - A fast JSON decoder and encoder written in C with Python bindings.

Serverless Frameworks
Frameworks for developing serverless Python code.

python-lambda - A toolkit for developing and deploying Python code in AWS Lambda.
Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway.

Specific Formats Processing
Libraries for parsing and manipulating specific text formats.

General

tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML.


Office

openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.
pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.
python-docx - Reads, queries and modifies Microsoft Word 2007/2008 docx files.
python-pptx - Python library for creating and updating PowerPoint (.pptx) files.
unoconv - Convert between any document format supported by LibreOffice/OpenOffice.
XlsxWriter - A Python module for creating Excel .xlsx files.
xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.
xlwt / xlrd - Writing and reading data and formatting information from Excel files.


PDF

PDFMiner - A tool for extracting information from PDF documents.
PyPDF2 - A library capable of splitting, merging and transforming PDF pages.
ReportLab - Allowing Rapid creation of rich PDF documents.


Markdown

Mistune - Fastest and full featured pure Python parsers of Markdown.
Python-Markdown - A Python implementation of John Gruber’s Markdown.


YAML

PyYAML - YAML implementations for Python.


CSV

csvkit - Utilities for converting to and working with CSV.


Archive

unp - A command line tool that can unpack archives easily.



Static Site Generator
Static site generator is a software that takes some text + templates as input and produces HTML files on the output.

mkdocs - Markdown friendly documentation generator.
pelican - Static site generator that supports Markdown and reST syntax.
lektor - An easy to use static CMS and blog engine.
nikola - A static website and blog generator.

Tagging
Libraries for tagging items.

django-taggit - Simple tagging for Django.

Task Queues
Libraries for working with task queues.

celery - An asynchronous task queue/job queue based on distributed message passing.
huey - Little multi-threaded task queue.
mrq - A distributed worker task queue in Python using Redis & gevent.
rq - Simple job queues for Python.

Template Engine
Libraries and tools for templating and lexing.

Jinja2 - A modern and designer friendly templating language.
Genshi - Python templating toolkit for generation of web-aware output.
Mako - Hyperfast and lightweight templating for the Python platform.

Testing
Libraries for testing codebases and generating test data.

Testing Frameworks

pytest - A mature full-featured Python testing tool.
hypothesis - Hypothesis is an advanced Quickcheck style property based testing library.
nose2 - The successor to nose, based on `unittest2.
Robot Framework - A generic test automation framework.
unittest - (Python standard library) Unit testing framework.


Test Runners

green - A clean, colorful test runner.
mamba - The definitive testing tool for Python. Born under the banner of BDD.
tox - Auto builds and tests distributions in multiple Python versions


GUI / Web Testing

locust - Scalable user load testing tool written in Python.
PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings.
Selenium - Python bindings for Selenium WebDriver.
sixpack - A language-agnostic A/B Testing framework.
splinter - Open source tool for testing web applications.


Mock

mock - (Python standard library) A mocking and patching library.
doublex - Powerful test doubles framework for Python.
freezegun - Travel through time by mocking the datetime module.
httmock - A mocking library for requests for Python 2.6+ and 3.2+.
httpretty - HTTP request mock tool for Python.
mocket - A socket mock framework with gevent/asyncio/SSL support.
responses - A utility library for mocking out the requests Python library.
VCR.py - Record and replay HTTP interactions on your tests.


Object Factories

factory_boy - A test fixtures replacement for Python.
mixer - Another fixtures replacement. Supported Django, Flask, SQLAlchemy, Peewee and etc.
model_mommy - Creating random fixtures for testing in Django.


Code Coverage

coverage - Code coverage measurement.


Fake Data

mimesis - is a Python library that help you generate fake data.
fake2db - Fake database generator.
faker - A Python package that generates fake data.
radar - Generate random datetime / time.



Text Processing
Libraries for parsing and manipulating plain texts.

General

chardet - Python 2/3 compatible character encoding detector.
difflib - (Python standard library) Helpers for computing deltas.
ftfy - Makes Unicode text less broken and more consistent automagically.
fuzzywuzzy - Fuzzy String Matching.
Levenshtein - Fast computation of Levenshtein distance and string similarity.
pangu.py - Paranoid text spacing.
pyfiglet - An implementation of figlet written in Python.
pypinyin - Convert Chinese hanzi (漢字) to pinyin (拼音).
textdistance - Compute distance between sequences with 30+ algorithms.
unidecode - ASCII transliterations of Unicode text.


Slugify

awesome-slugify - A Python slugify library that can preserve unicode.
python-slugify - A Python slugify library that translates unicode to ASCII.
unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency.


Unique identifiers

hashids - Implementation of hashids in Python.
shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs.


Parser

ply - Implementation of lex and yacc parsing tools for Python.
pygments - A generic syntax highlighter.
pyparsing - A general purpose framework for generating parsers.
python-nameparser - Parsing human names into their individual components.
python-phonenumbers - Parsing, formatting, storing and validating international phone numbers.
python-user-agents - Browser user agent parser.
sqlparse - A non-validating SQL parser.



Third-party APIs
Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries.

apache-libcloud - One Python library for all clouds.
boto3 - Python interface to Amazon Web Services.
django-wordpress - WordPress models and views for Django.
facebook-sdk - Facebook Platform Python SDK.
google-api-python-client - Google APIs Client Library for Python.
gspread - Google Spreadsheets Python API.
twython - A Python wrapper for the Twitter API.

URL Manipulation
Libraries for parsing URLs.

furl - A small Python library that makes parsing and manipulating URLs easy.
purl - A simple, immutable URL class with a clean API for interrogation and manipulation.
pyshorteners - A pure Python URL shortening lib.
webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.

Video
Libraries for manipulating video and GIFs.

moviepy - A module for script-based movie editing with many formats, including animated GIFs.
scikit-video - Video processing routines for SciPy.

Web Asset Management
Tools for managing, compressing and minifying website assets.

django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file.
django-pipeline - An asset packaging library for Django.
django-storages - A collection of custom storage back ends for Django.
fanstatic - Packages, optimizes, and serves static file dependencies as Python packages.
fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP.
flask-assets - Helps you integrate webassets into your Flask app.
webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources.

Web Content Extracting
Libraries for extracting web contents.

html2text - Convert HTML to Markdown-formatted text.
lassie - Web Content Retrieval for Humans.
micawber - A small library for extracting rich content from URLs.
newspaper - News extraction, article extraction and content curation in Python.
python-readability - Fast Python port of arc90's readability tool.
requests-html - Pythonic HTML Parsing for Humans.
sumy - A module for automatic summarization of text documents and HTML pages.
textract - Extract text from any document, Word, PowerPoint, PDFs, etc.
toapi - Every web site provides APIs.

Web Crawling
Libraries to automate web scraping.

cola - A distributed crawling framework.
feedparser - Universal feed parser.
grab - Site scraping framework.
MechanicalSoup - A Python library for automating interaction with websites.
pyspider - A powerful spider system.
robobrowser - A simple, Pythonic library for browsing the web without a standalone web browser.
scrapy - A fast high-level screen scraping and web crawling framework.
portia - Visual scraping for Scrapy.

Web Frameworks
Traditional full stack web frameworks. Also see RESTful API

Synchronous

Django - The most popular web framework in Python.

awesome-django


Flask - A microframework for Python.

awesome-flask


Pyramid - A small, fast, down-to-earth, open source Python web framework.

awesome-pyramid


Masonite - The modern and developer centric Python web framework.


Asynchronous

Tornado - A web framework and asynchronous networking library.



WebSocket
Libraries for working with WebSocket.

autobahn-python - WebSocket & WAMP for Python on Twisted and asyncio.
channels - Developer-friendly asynchrony for Django.
websockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity.

WSGI Servers
WSGI-compatible web servers.

bjoern - Asynchronous, very fast and written in C.
gunicorn - Pre-forked, partly written in C.
uWSGI - A project aims at developing a full stack for building hosting services, written in C.
waitress - Multi-threaded, powers Pyramid.
werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.

Resources
Where to discover new Python libraries.
Podcasts

From Python Import Podcast
Podcast.init
Python Bytes
Python Testing
Radio Free Python
Talk Python To Me
Test and Code

Twitter

@codetengu
@getpy
@importpython
@planetpython
@pycoders
@pypi
@pythontrending
@PythonWeekly
@TalkPython
@realpython

Websites

/r/CoolGithubProjects
/r/Python
Awesome Python @LibHunt
Django Packages
Full Stack Python
Python Cheatsheet
Python ZEEF
Python 开发社区
Real Python
Trending Python repositories on GitHub today
Сообщество Python Программистов

Weekly

CodeTengu Weekly 碼天狗週刊
Import Python Newsletter
Pycoder's Weekly
Python Weekly
Python Tricks

Contributing
Your contributions are always welcome! Please take a look at the contribution guidelines first.
I will keep some pull requests open if I'm not sure whether those libraries are awesome, you could vote for them by adding 👍 to them. Pull requests will be merged when their votes reach 20.

If you have any question about this opinionated list, do not hesitate to contact me @vinta on Twitter or open an issue on GitHub.

"
23,"
Create React App  
Create React apps with no build configuration.

Creating an App – How to create a new app.
User Guide – How to develop apps bootstrapped with Create React App.

Create React App works on macOS, Windows, and Linux.
If something doesn’t work, please file an issue.
If you have questions or need help, please ask in our Spectrum community.
Quick Overview
npx create-react-app my-app
cd my-app
npm start
(npx comes with npm 5.2+ and higher, see instructions for older npm versions)
Then open http://localhost:3000/ to see your app.
When you’re ready to deploy to production, create a minified bundle with npm run build.



Get Started Immediately
You don’t need to install or configure tools like Webpack or Babel.
They are preconfigured and hidden so that you can focus on the code.
Create a project, and you’re good to go.
Creating an App
You’ll need to have Node 8.16.0 or Node 10.16.0 or later version on your local development machine (but it’s not required on the server). You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.
To create a new app, you may choose one of the following methods:
npx
npx create-react-app my-app
(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)
npm
npm init react-app my-app
npm init <initializer> is available in npm 6+
Yarn
yarn create react-app my-app
yarn create is available in Yarn 0.25+
It will create a directory called my-app inside the current folder.
Inside that directory, it will generate the initial project structure and install the transitive dependencies:
my-app
├── README.md
├── node_modules
├── package.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── serviceWorker.js

No configuration or complicated folder structures, only the files you need to build your app.
Once the installation is done, you can open your project folder:
cd my-app
Inside the newly created project, you can run some built-in commands:
npm start or yarn start
Runs the app in development mode.
Open http://localhost:3000 to view it in the browser.
The page will automatically reload if you make changes to the code.
You will see the build errors and lint warnings in the console.



npm test or yarn test
Runs the test watcher in an interactive mode.
By default, runs tests related to files changed since the last commit.
Read more about testing.
npm run build or yarn build
Builds the app for production to the build folder.
It correctly bundles React in production mode and optimizes the build for the best performance.
The build is minified and the filenames include the hashes.
Your app is ready to be deployed.
User Guide
You can find detailed instructions on using Create React App and many tips in its documentation.
How to Update to New Versions?
Please refer to the User Guide for this and other information.
Philosophy


One Dependency: There is only one build dependency. It uses Webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.


No Configuration Required: You don't need to configure anything. A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.


No Lock-In: You can “eject” to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.


What’s Included?
Your environment will have everything you need to build a modern single-page React app:

React, JSX, ES6, TypeScript and Flow syntax support.
Language extras beyond ES6 like the object spread operator.
Autoprefixed CSS, so you don’t need -webkit- or other prefixes.
A fast interactive unit test runner with built-in support for coverage reporting.
A live development server that warns about common mistakes.
A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.
An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria. (Note: Using the service worker is opt-in as of react-scripts@2.0.0 and higher)
Hassle-free updates for the above tools with a single dependency.

Check out this guide for an overview of how these tools fit together.
The tradeoff is that these tools are preconfigured to work in a specific way. If your project needs more customization, you can ""eject"" and customize it, but then you will need to maintain this configuration.
Popular Alternatives
Create React App is a great fit for:

Learning React in a comfortable and feature-rich development environment.
Starting new single-page React applications.
Creating examples with React for your libraries and components.

Here are a few common cases where you might want to try something else:


If you want to try React without hundreds of transitive build tool dependencies, consider using a single HTML file or an online sandbox instead.


If you need to integrate React code with a server-side template framework like Rails, Django or Symfony, or if you’re not building a single-page app, consider using nwb, or Neutrino which are more flexible. For Rails specifically, you can use Rails Webpacker. For Symfony, try Symfony's Webpack Encore.


If you need to publish a React component, nwb can also do this, as well as Neutrino's react-components preset.


If you want to do server rendering with React and Node.js, check out Next.js or Razzle. Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.


If your website is mostly static (for example, a portfolio or a blog), consider using Gatsby instead. Unlike Create React App, it pre-renders the website into HTML at the build time.


Finally, if you need more customization, check out Neutrino and its React preset.


All of the above tools can work with little to no configuration.
If you prefer configuring the build yourself, follow this guide.
React Native
Looking for something similar, but for React Native?
Check out Expo CLI.
Contributing
We'd love to have your helping hand on create-react-app! See CONTRIBUTING.md for more information on what we're looking for and how to get started.
Credits
This project exists thanks to all the people who contribute.

Acknowledgements
We are grateful to the authors of existing related projects for their ideas and collaboration:

@eanplatter
@insin
@mxstbr

License
Create React App is open source software licensed as MIT.

"
24,"
Python - 100天从新手到大师

作者：骆昊
最近有很多想学习Python的小伙伴陆陆续续加入我们的交流群，目前我们的交流群人数已经超过一万人。我们的目标是打造一个优质的Python交流社区，一方面为想学习Python的初学者扫平入门过程中的重重障碍；另一方为新入行的开发者提供问道的途径，帮助他们迅速成长为优秀的职业人；此外，有经验的开发者可以利用这个平台把自己的工作经验无偿分享或有偿提供出来，让大家都能够得到职业技能以及综合素质的全面提升。之前的公开课和线下技术交流活动因为工作的关系荒废了一段时间了，但是各位小伙伴仍然活跃在交流群并一如既往的支持我们，在此向大家表示感谢。近期开始持续更新前15天和最后10天的内容，前15天是写给初学者的，我希望把上手的难度进一步降低，例子程序更加简单清晰；最后10天是Python项目实战和面试相关的东西，我希望内容更详实和完整，尤其是第100天的面试题部分；创作不易，感谢大家的打赏支持，这些钱不会用于购买咖啡而是通过腾讯公益平台捐赠给需要帮助的人（点击了解捐赠情况）。


Python应用领域和就业形势分析
简单的说，Python是一个“优雅”、“明确”、“简单”的编程语言。

学习曲线低，非专业人士也能上手
开源系统，拥有强大的生态圈
解释型语言，完美的平台可移植性
支持面向对象和函数式编程
能够通过调用C/C++代码扩展功能
代码规范程度高，可读性强

目前几个比较流行的领域，Python都有用武之地。

云基础设施 - Python / Java / Go
DevOps - Python / Shell / Ruby / Go
网络爬虫 - Python / PHP / C++
数据分析挖掘 - Python / R / Scala / Matlab
机器学习 - Python / R / Java / Lisp

作为一名Python开发者，主要的就业领域包括：

Python服务器后台开发 / 游戏服务器开发 / 数据接口开发工程师
Python自动化运维工程师
Python数据分析 / 数据可视化 / 大数据工程师
Python爬虫工程师
Python聊天机器人开发 / 图像识别和视觉算法 / 深度学习工程师

下图显示了主要城市Python招聘需求量及薪资待遇排行榜（截止到2018年5月）。



给初学者的几个建议：

Make English as your working language.
Practice makes perfect.
All experience comes from mistakes.
Don't be one of the leeches.
Either stand out or kicked out.

Day01~15 - Python语言基础
Day01 - 初识Python

Python简介 - Python的历史 / Python的优缺点 / Python的应用领域
搭建编程环境 - Windows环境 / Linux环境 / MacOS环境
从终端运行Python程序 - Hello, world / print函数 / 运行程序
使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE
注释 - 注释的作用 / 单行注释 / 多行注释

Day02 - 语言元素

程序和进制 - 指令和程序 / 冯诺依曼机 / 二进制和十进制 / 八进制和十六进制
变量和类型 - 变量的命名 / 变量的使用 / input函数 / 检查变量类型 / 类型转换
数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码
运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级
应用案例 - 华氏温度转换成摄氏温度 / 输入圆的半径计算周长和面积 / 输入年份判断是否是闰年

Day03 - 分支结构

分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图
if语句 - 简单的if / if-else结构 / if-elif-else结构 / 嵌套的if
应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积

Day04 - 循环结构

循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图
while循环 - 基本结构 / break语句 / continue语句
for循环 - 基本结构 / range类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序
应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡

Day05 - 构造程序逻辑

经典案例：水仙花数 / 百钱百鸡 / Craps赌博游戏
练习题目：斐波那契数列 / 完美数 / 素数

Day06 - 函数和模块的使用

函数的作用 - 代码的坏味道 / 用函数封装功能模块
定义函数 - def语句 / 函数名 / 参数列表 / return语句 / 调用自定义函数
调用函数 - Python内置函数 /  导入模块和函数
函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数
函数的返回值 - 没有返回值  / 返回单个值 / 返回多个值
作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字
用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）

Day07 - 字符串和常用数据结构

字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法
列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历
列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找
生成列表 - 使用range创建数字列表 / 生成表达式 / 生成器
元组的使用 - 定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换
集合基本用法 - 集合和列表的区别 /  创建集合 / 添加元素 / 删除元素 /  清空
集合常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集
字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空
字典常用操作 - keys()方法 / values()方法 / items()方法 / setdefault()方法
基础练习 - 跑马灯效果 / 列表找最大元素 / 统计考试成绩的平均分 / Fibonacci数列 / 杨辉三角
综合案例 - 双色球选号 / 井字棋

Day08 - 面向对象编程基础

类和对象 - 什么是类 / 什么是对象 / 面向对象其他相关概念
定义类 - 基本结构 / 属性和方法 / 构造器 / 析构器 / __str__方法
使用对象 - 创建对象 / 给对象发消息
面向对象的四大支柱 - 抽象 / 封装 / 继承 / 多态
基础练习 - 定义学生类 / 定义时钟类 / 定义图形类 / 定义汽车类

Day09 - 面向对象进阶

属性 - 类属性 / 实例属性 / 属性访问器 / 属性修改器 / 属性删除器 / 使用__slots__
类中的方法 - 实例方法 / 类方法 / 静态方法
运算符重载 - __add__ / __sub__ / __or__ /__getitem__ / __setitem__ / __len__ / __repr__ / __gt__ / __lt__ / __le__ / __ge__ / __eq__ / __ne__ / __contains__
类(的对象)之间的关系 - 关联 / 继承 / 依赖
继承和多态 - 什么是继承 / 继承的语法 / 调用父类方法 / 方法重写 / 类型判定 / 多重继承 / 菱形继承(钻石继承)和C3算法
综合案例 - 工资结算系统 / 图书自动折扣系统 / 自定义分数类

Day10 - 图形用户界面和游戏开发

使用tkinter开发GUI程序
使用pygame三方库开发游戏应用
“大球吃小球”游戏

Day11 - 文件和异常

读文件 - 读取整个文件 / 逐行读取 / 文件路径
写文件 - 覆盖写入 / 追加写入 / 文本文件 / 二进制文件
异常处理 - 异常机制的重要性 / try-except代码块 / else代码块 / finally代码块 / 内置异常类型 / 异常栈 / raise语句
数据持久化 - CSV文件概述 / csv模块的应用 / JSON数据格式 / json模块的应用

Day12 - 字符串和正则表达式

字符串高级操作 - 转义字符 / 原始字符串 / 多行字符串 / in和 not in运算符 / is开头的方法 / join和split方法 / strip相关方法 / pyperclip模块 / 不变字符串和可变字符串 / StringIO的使用
正则表达式入门 - 正则表达式的作用 / 元字符 / 转义 / 量词 / 分组 / 零宽断言 /贪婪匹配与惰性匹配懒惰 / 使用re模块实现正则表达式操作（匹配、搜索、替换、捕获）
使用正则表达式 - re模块 / compile函数 / group和groups方法 / match方法 / search方法 / findall和finditer方法 / sub和subn方法 / split方法
应用案例 - 使用正则表达式验证输入的字符串

Day13 - 进程和线程

进程和线程的概念 - 什么是进程 / 什么是线程 / 多线程的应用场景
使用进程 - fork函数 / multiprocessing模块 / 进程池 / 进程间通信
使用线程 - thread模块 / threading模块 / Thread类 / Lock类 / Condition类 / 线程池

Day14 - 网络编程入门和网络应用开发

计算机网络基础 - 计算机网络发展史 / “TCP-IP”模型 / IP地址 / 端口 / 协议 / 其他相关概念
网络应用模式 - “客户端-服务器”模式 / “浏览器-服务器”模式
基于HTTP协议访问网络资源 - 网络API概述 / 访问URL / requests模块 / 解析JSON格式数据
Python网络编程 - 套接字的概念 / socket模块 /  socket函数 / 创建TCP服务器 / 创建TCP客户端 / 创建UDP服务器 / 创建UDP客户端 / SocketServer模块
电子邮件 - SMTP协议 / POP3协议 / IMAP协议 / smtplib模块 / poplib模块 / imaplib模块
短信服务 - 调用短信服务网关

Day15 - 图像和文档处理

用Pillow处理图片 - 图片读写 / 图片合成 / 几何变换 / 色彩转换 / 滤镜效果
读写Word文档 - 文本内容的处理 / 段落 / 页眉和页脚 / 样式的处理
读写Excel文件 - xlrd模块 / xlwt模块
生成PDF文件 - pypdf2模块 / reportlab模块

Day16~Day20 - Python语言进阶 

常用数据结构
函数的高级用法 - “一等公民” / 高阶函数 / Lambda函数 / 作用域和闭包 / 装饰器
面向对象高级知识 - “三大支柱” / 类与类之间的关系 / 垃圾回收 / 魔术属性和方法 / 混入 / 元类 / 面向对象设计原则 / GoF设计模式
迭代器和生成器 - 相关魔术方法 / 创建生成器的两种方式 /
并发和异步编程 - 多线程 / 多进程 / 异步IO / async和await

Day21~30 - Web前端入门

用HTML标签承载页面内容
用CSS渲染页面
用JavaScript处理交互式行为
jQuery入门和提高
Vue.js入门
Element的使用
Bootstrap的使用

Day31~35 - 玩转Linux操作系统

操作系统发展史和Linux概述
Linux基础命令
Linux中的实用程序
Linux的文件系统
Vim编辑器的应用
环境变量和Shell编程
软件的安装和服务的配置
网络访问和管理
其他相关内容

Day36~40 - 数据库基础和进阶

关系型数据库MySQL

关系型数据库概述
MySQL的安装和使用
SQL的使用

DDL - 数据定义语言 - create / drop / alter
DML - 数据操作语言 - insert / delete / update / select
DCL - 数据控制语言 - grant / revoke


相关知识

范式理论 - 设计二维表的指导思想
数据完整性
数据一致性


在Python中操作MySQL


NoSQL入门

NoSQL概述
Redis概述
Mongo概述



Day41~55 - 实战Django
Day41 - 快速上手

Web应用工作原理和HTTP协议
Django框架概述
5分钟快速上手
使用视图模板

Day42 - 深入模型

关系型数据库配置
管理后台的使用
使用ORM完成对模型的CRUD操作
Django模型最佳实践
模型定义参考

Day43 - 静态资源和Ajax请求

加载静态资源
用Ajax请求获取数据

Day44 - 表单的应用

表单和表单控件
跨站请求伪造和CSRF令牌
Form和ModelForm
表单验证

Day45 - Cookie和Session

实现用户跟踪
cookie和session的关系
Django框架对session的支持
视图函数中的cookie读写操作

Day46 - 报表和日志

通过HttpResponse修改响应头
使用StreamingHttpResponse处理大文件
使用xlwt生成Excel报表
使用reportlab生成PDF报表
使用ECharts生成前端图表
配置日志和Django-Debug-Toolbar

Day47 - 中间件的应用

什么是中间件
Django框架内置的中间件
自定义中间件及其应用场景

Day48 - 前后端分离开发入门

返回JSON格式的数据
用Vue.js渲染页面

Day49 - RESTful架构和DRF入门
Day50 - RESTful架构和DRF进阶
Day51 - 使用缓存


网站优化第一定律


在Django项目中使用Redis提供缓存服务


在视图函数中读写缓存


使用装饰器实现页面缓存


为数据接口提供缓存服务


Day52 - 文件上传和富文本编辑

文件上传表单控件和图片文件预览
服务器端如何处理上传的文件
富文本编辑器概述
wangEditor的使用

Day53 - 短信和邮件

常用短信网关平台介绍
使用螺丝帽发送短信
Django框架对邮件服务的支持

Day54 - 异步任务和定时任务

网站优化第二定律
配置消息队列服务
在项目中使用celery实现任务异步化
在项目中使用celery实现定时任务

Day55 - 单元测试和项目上线

Python中的单元测试
Django框架对单元测试的支持
使用版本控制系统
配置和使用uWSGI
动静分离和Nginx配置
配置HTTPS

Day56~60 - 实战Flask
Day56 - Flask入门
Day57 - 模板的使用
Day58 - 表单的处理
Day59 - 数据库操作
Day60 - 项目实战
Day61~65 - 实战Tornado
Day61 - 预备知识

并发编程
I/O模式和事件驱动

Day62 - Tornado入门

Tornado概述
5分钟上手Tornado
路由解析
请求处理器

Day63 - 异步化

aiomysql和aioredis的使用

Day64 - WebSocket的应用

WebSocket简介
WebSocket服务器端编程
WebSocket客户端编程
项目：Web聊天室

Day65 - 项目实战

前后端分离开发和接口文档的撰写
使用Vue.js实现前端渲染
使用ECharts实现报表功能
使用WebSocket实现推送服务

Day66~75 - 爬虫开发
Day66 - 网络爬虫和相关工具

网络爬虫的概念及其应用领域
网络爬虫的合法性探讨
开发网络爬虫的相关工具
一个爬虫程序的构成

Day67 - 数据采集和解析

数据采集的标准和三方库
页面解析的三种方式：正则表达式解析 / XPath解析 / CSS选择器解析

Day68 - 存储数据

如何存储海量数据
实现数据的缓存

Day69 - 并发下载

多线程和多进程
异步I/O和协程
async和await关键字的使用
三方库aiohttp的应用

Day70 - 解析动态内容

JavaScript逆向工程
使用Selenium获取动态内容

Day71 - 表单交互和验证码处理

自动提交表单
Cookie池的应用
验证码处理

Day72 - Scrapy入门

Scrapy爬虫框架概述
安装和使用Scrapy

Day73 - Scrapy高级应用

Spider的用法
中间件的应用：下载中间件 / 蜘蛛中间件
Scrapy对接Selenium抓取动态内容
Scrapy部署到Docker

Day74 - Scrapy分布式实现

分布式爬虫的原理
Scrapy分布式实现
使用Scrapyd实现分布式部署

Day75 - 爬虫项目实战

爬取招聘网站数据
爬取房地产行业数据
爬取二手车交易平台数据

Day76~90 - 数据处理和机器学习
Day76 - 机器学习基础
Day77 - Pandas的应用
Day78 - NumPy和SciPy的应用
Day79 - Matplotlib和数据可视化
Day80 - k最近邻(KNN)分类
Day81 - 决策树
Day82 - 贝叶斯分类
Day83 - 支持向量机(SVM)
Day84 - K-均值聚类
Day85 - 回归分析
Day86 - 大数据分析入门
Day87 - 大数据分析进阶
Day88 - Tensorflow入门
Day89 - Tensorflow实战
Day90 - 推荐系统
Day91~100 - 团队项目开发
第91天：团队项目开发的问题和解决方案


软件过程模型


经典过程模型（瀑布模型）

可行性分析（研究做还是不做），输出《可行性分析报告》。
需求分析（研究做什么），输出《需求规格说明书》和产品界面原型图。
概要设计和详细设计，输出概念模型图（ER图）、物理模型图、类图、时序图等。
编码 / 测试。
上线 / 维护。

瀑布模型最大的缺点是无法拥抱需求变化，整套流程结束后才能看到产品，团队士气低落。


敏捷开发（Scrum）- 产品所有者、Scrum Master、研发人员 - Sprint

产品的Backlog（用户故事、产品原型）。
计划会议（评估和预算）。
日常开发（站立会议、番茄工作法、结对编程、测试先行、代码重构……）。
修复bug（问题描述、重现步骤、测试人员、被指派人）。
发布版本。
评审会议（Showcase，用户需要参与）。
回顾会议（对当前迭代周期做一个总结）。


补充：敏捷软件开发宣言

个体和互动 高于 流程和工具
工作的软件 高于 详尽的文档
客户合作 高于 合同谈判
响应变化 高于 遵循计划




角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。


准备工作：商业案例和资金、合同、憧憬、初始产品需求、初始发布计划、入股、组建团队。


敏捷团队通常人数为8-10人。


工作量估算：将开发任务量化，包括原型、Logo设计、UI设计、前端开发等，尽量把每个工作分解到最小任务量，最小任务量标准为工作时间不能超过两天，然后估算总体项目时间。把每个任务都贴在看板上面，看板上分三部分：to do（待完成）、in progress（进行中）和done（已完成）。





项目团队组建


团队的构成和角色

说明：谢谢付祥英女士绘制了下面这张精美的公司组织架构图。




编程规范和代码审查（flake8、pylint）



Python中的一些“惯例”（请参考《Python惯例-如何编写Pythonic的代码》）


影响代码可读性的原因：

代码注释太少或者没有注释
代码破坏了语言的最佳实践
反模式编程（意大利面代码、复制-黏贴编程、自负编程、……）





团队开发工具介绍

版本控制：Git、Mercury
缺陷管理：Gitlab、Redmine
敏捷闭环工具：禅道、JIRA
持续集成：Jenkins、Travis-CI

请参考《团队项目开发的问题和解决方案》。


项目选题和理解业务


选题范围设定


CMS（用户端）：新闻聚合网站、问答/分享社区、影评/书评网站等。


MIS（用户端+管理端）：KMS、KPI考核系统、HRS、CRM系统、供应链系统、仓储管理系统等。


App后台（管理端+数据接口）：二手交易类、报刊杂志类、小众电商类、新闻资讯类、旅游类、社交类、阅读类等。


其他类型：自身行业背景和工作经验、业务容易理解和把控。




需求理解、模块划分和任务分配

需求理解：头脑风暴和竞品分析。
模块划分：画思维导图（XMind），每个模块是一个枝节点，每个具体的功能是一个叶节点（用动词表述），需要确保每个叶节点无法再生出新节点，确定每个叶子节点的重要性、优先级和工作量。
任务分配：由项目负责人根据上面的指标为每个团队成员分配任务。




制定项目进度表（每日更新）



模块
功能
人员
状态
完成
工时
计划开始
实际开始
计划结束
实际结束
备注




评论
添加评论
王大锤
正在进行
50%
4
2018/8/7

2018/8/7





删除评论
王大锤
等待
0%
2
2018/8/7

2018/8/7





查看评论
白元芳
正在进行
20%
4
2018/8/7

2018/8/7

需要进行代码审查



评论投票
白元芳
等待
0%
4
2018/8/8

2018/8/8







OOAD和数据库设计




UML（统一建模语言）的类图



通过模型创建表（正向工程）
python manage.py makemigrations app
python manage.py migrate


使用PowerDesigner绘制物理模型图。



通过数据表创建模型（反向工程）
python manage.py inspectdb > app/models.py


第92天：使用Docker部署应用

Docker简介
安装Docker
使用Docker创建容器（Nginx、MySQL、Redis、Gitlab、Jenkins）
构建Docker镜像（Dockerfile的编写和相关指令）
容器编排（Docker-compose）
集群管理

第93天：MySQL性能优化
第94天：网络API接口设计
第95天：[使用Django开发商业项目](./Day91-100/95.使用Django开发商业项	目.md)
项目开发中的公共问题

数据库的配置（多数据库、主从复制、数据库路由）
缓存的配置（分区缓存、键设置、超时设置、主从复制、故障恢复（哨兵））
日志的配置
分析和调试（Django-Debug-ToolBar）
好用的Python模块（日期计算、图像处理、数据加密、三方API）

REST API设计

RESTful架构

理解RESTful架构
RESTful API设计指南
RESTful API最佳实践


API接口文档的撰写

RAP2
YAPI


django-REST-framework的应用

项目中的重点难点剖析

使用缓存缓解数据库压力 - Redis
使用消息队列做解耦合和削峰 - Celery + RabbitMQ

第96天：软件测试和自动化测试
单元测试

测试的种类
编写单元测试（unittest、pytest、nose2、tox、ddt、……）
测试覆盖率（coverage）

项目部署

部署前的准备工作

关键设置（SECRET_KEY / DEBUG / ALLOWED_HOSTS / 缓存 / 数据库）
HTTPS / CSRF_COOKIE_SECUR  / SESSION_COOKIE_SECURE
日志相关配置


Linux常用命令回顾
Linux常用服务的安装和配置
uWSGI/Gunicorn和Nginx的使用

Gunicorn和uWSGI的比较

对于不需要大量定制化的简单应用程序，Gunicorn是一个不错的选择，uWSGI的学习曲线比Gunicorn要陡峭得多，Gunicorn的默认参数就已经能够适应大多数应用程序。
uWSGI支持异构部署。
由于Nginx本身支持uWSGI，在线上一般都将Nginx和uWSGI捆绑在一起部署，而且uWSGI属于功能齐全且高度定制的WSGI中间件。
在性能上，Gunicorn和uWSGI其实表现相当。




使用虚拟化技术（Docker）部署测试环境和生产环境

性能测试

AB的使用
SQLslap的使用
sysbench的使用

自动化测试

使用Shell和Python进行自动化测试
使用Selenium实现自动化测试

Selenium IDE
Selenium WebDriver
Selenium Remote Control


测试工具Robot Framework介绍

第97天：电商网站技术要点剖析
第98天：项目部署上线和性能调优

MySQL数据库调优
Web服务器性能优化

Nginx负载均衡配置
Keepalived实现高可用


代码性能调优

多线程
异步化


静态资源访问优化

云存储
CDN



第99天：面试中的公共问题
第100天：Python面试题集

"
25,"
axios







Promise based HTTP client for the browser and node.js
Features

Make XMLHttpRequests from the browser
Make http requests from node.js
Supports the Promise API
Intercept request and response
Transform request and response data
Cancel requests
Automatic transforms for JSON data
Client side support for protecting against XSRF

Browser Support













Latest ✔
Latest ✔
Latest ✔
Latest ✔
Latest ✔
11 ✔




Installing
Using npm:
$ npm install axios
Using bower:
$ bower install axios
Using yarn:
$ yarn add axios
Using cdn:
<script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
Example
note: CommonJS usage
In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require() use the following approach:
const axios = require('axios').default;

// axios.<method> will now provide autocomplete and parameter typings
Performing a GET request
const axios = require('axios');

// Make a request for a user with a given ID
axios.get('/user?ID=12345')
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .finally(function () {
    // always executed
  });

// Optionally the request above could also be done as
axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .finally(function () {
    // always executed
  });  

// Want to use async/await? Add the `async` keyword to your outer function/method.
async function getUser() {
  try {
    const response = await axios.get('/user?ID=12345');
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}

NOTE: async/await is part of ECMAScript 2017 and is not supported in Internet
Explorer and older browsers, so use with caution.

Performing a POST request
axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
Performing multiple concurrent requests
function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // Both requests are now complete
  }));
axios API
Requests can be made by passing the relevant config to axios.
axios(config)
// Send a POST request
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});
// GET request for remote image
axios({
  method: 'get',
  url: 'http://bit.ly/2mTM3nY',
  responseType: 'stream'
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
  });
axios(url[, config])
// Send a GET request (default method)
axios('/user/12345');
Request method aliases
For convenience aliases have been provided for all supported request methods.
axios.request(config)
axios.get(url[, config])
axios.delete(url[, config])
axios.head(url[, config])
axios.options(url[, config])
axios.post(url[, data[, config]])
axios.put(url[, data[, config]])
axios.patch(url[, data[, config]])
NOTE
When using the alias methods url, method, and data properties don't need to be specified in config.
Concurrency
Helper functions for dealing with concurrent requests.
axios.all(iterable)
axios.spread(callback)
Creating an instance
You can create a new instance of axios with a custom config.
axios.create([config])
const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});
Instance methods
The available instance methods are listed below. The specified config will be merged with the instance config.
axios#request(config)
axios#get(url[, config])
axios#delete(url[, config])
axios#head(url[, config])
axios#options(url[, config])
axios#post(url[, data[, config]])
axios#put(url[, data[, config]])
axios#patch(url[, data[, config]])
axios#getUri([config])
Request Config
These are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified.
{
  // `url` is the server URL that will be used for the request
  url: '/user',

  // `method` is the request method to be used when making the request
  method: 'get', // default

  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: 'https://some-domain.com/api/',

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  transformRequest: [function (data, headers) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  transformResponse: [function (data) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `headers` are custom headers to be sent
  headers: {'X-Requested-With': 'XMLHttpRequest'},

  // `params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  params: {
    ID: 12345
  },

  // `paramsSerializer` is an optional function in charge of serializing `params`
  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
  paramsSerializer: function (params) {
    return Qs.stringify(params, {arrayFormat: 'brackets'})
  },

  // `data` is the data to be sent as the request body
  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer
  data: {
    firstName: 'Fred'
  },
  
  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data: 'Country=Brasil&City=Belo Horizonte',

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  timeout: 1000, // default is `0` (no timeout)

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  withCredentials: false, // default

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md).
  adapter: function (config) {
    /* ... */
  },

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },

  // `responseType` indicates the type of data that the server will respond with
  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'
  //   browser only: 'blob'
  responseType: 'json', // default

  // `responseEncoding` indicates encoding to use for decoding responses
  // Note: Ignored for `responseType` of 'stream' or client-side requests
  responseEncoding: 'utf8', // default

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  xsrfCookieName: 'XSRF-TOKEN', // default

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  xsrfHeaderName: 'X-XSRF-TOKEN', // default

  // `onUploadProgress` allows handling of progress events for uploads
  onUploadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `onDownloadProgress` allows handling of progress events for downloads
  onDownloadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `maxContentLength` defines the max size of the http response content in bytes allowed
  maxContentLength: 2000,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  validateStatus: function (status) {
    return status >= 200 && status < 300; // default
  },

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  maxRedirects: 5, // default

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  socketPath: null, // default

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default.
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // 'proxy' defines the hostname and port of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  proxy: {
    host: '127.0.0.1',
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  },

  // `cancelToken` specifies a cancel token that can be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: new CancelToken(function (cancel) {
  })
}
Response Schema
The response for a request contains the following information.
{
  // `data` is the response that was provided by the server
  data: {},

  // `status` is the HTTP status code from the server response
  status: 200,

  // `statusText` is the HTTP status message from the server response
  statusText: 'OK',

  // `headers` the headers that the server responded with
  // All header names are lower cased
  headers: {},

  // `config` is the config that was provided to `axios` for the request
  config: {},

  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance in the browser
  request: {}
}
When using then, you will receive the response as follows:
axios.get('/user/12345')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });
When using catch, or passing a rejection callback as second parameter of then, the response will be available through the error object as explained in the Handling Errors section.
Config Defaults
You can specify config defaults that will be applied to every request.
Global axios defaults
axios.defaults.baseURL = 'https://api.example.com';
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
Custom instance defaults
// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: 'https://api.example.com'
});

// Alter defaults after instance has been created
instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;
Config order of precedence
Config will be merged with an order of precedence. The order is library defaults found in lib/defaults.js, then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example.
// Create an instance using the config defaults provided by the library
// At this point the timeout config value is `0` as is the default for the library
const instance = axios.create();

// Override timeout default for the library
// Now all requests using this instance will wait 2.5 seconds before timing out
instance.defaults.timeout = 2500;

// Override timeout for this request as it's known to take a long time
instance.get('/longRequest', {
  timeout: 5000
});
Interceptors
You can intercept requests or responses before they are handled by then or catch.
// Add a request interceptor
axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// Add a response interceptor
axios.interceptors.response.use(function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  }, function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  });
If you need to remove an interceptor later you can.
const myInterceptor = axios.interceptors.request.use(function () {/*...*/});
axios.interceptors.request.eject(myInterceptor);
You can add interceptors to a custom instance of axios.
const instance = axios.create();
instance.interceptors.request.use(function () {/*...*/});
Handling Errors
axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });
Using the validateStatus config option, you can define HTTP code(s) that should throw an error.
axios.get('/user/12345', {
  validateStatus: function (status) {
    return status < 500; // Reject only if the status code is greater than or equal to 500
  }
})
Using toJSON you get an object with more information about the HTTP error.
axios.get('/user/12345')
  .catch(function (error) {
    console.log(error.toJSON());
  });
Cancellation
You can cancel a request using a cancel token.

The axios cancel token API is based on the withdrawn cancelable promises proposal.

You can create a cancel token using the CancelToken.source factory as shown below:
const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');
You can also create a cancel token by passing an executor function to the CancelToken constructor:
const CancelToken = axios.CancelToken;
let cancel;

axios.get('/user/12345', {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();

Note: you can cancel several requests with the same cancel token.

Using application/x-www-form-urlencoded format
By default, axios serializes JavaScript objects to JSON. To send data in the application/x-www-form-urlencoded format instead, you can use one of the following options.
Browser
In a browser, you can use the URLSearchParams API as follows:
const params = new URLSearchParams();
params.append('param1', 'value1');
params.append('param2', 'value2');
axios.post('/foo', params);

Note that URLSearchParams is not supported by all browsers (see caniuse.com), but there is a polyfill available (make sure to polyfill the global environment).

Alternatively, you can encode data using the qs library:
const qs = require('qs');
axios.post('/foo', qs.stringify({ 'bar': 123 }));
Or in another way (ES6),
import qs from 'qs';
const data = { 'bar': 123 };
const options = {
  method: 'POST',
  headers: { 'content-type': 'application/x-www-form-urlencoded' },
  data: qs.stringify(data),
  url,
};
axios(options);
Node.js
In node.js, you can use the querystring module as follows:
const querystring = require('querystring');
axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));
You can also use the qs library.
NOTE
The qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case (https://github.com/nodejs/node-v0.x-archive/issues/1665).
Semver
Until axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1, and 0.5.4 will have the same API, but 0.6.0 will have breaking changes.
Promises
axios depends on a native ES6 Promise implementation to be supported.
If your environment doesn't support ES6 Promises, you can polyfill.
TypeScript
axios includes TypeScript definitions.
import axios from 'axios';
axios.get('/user?ID=12345');
Resources

Changelog
Upgrade Guide
Ecosystem
Contributing Guide
Code of Conduct

Credits
axios is heavily inspired by the $http service provided in Angular. Ultimately axios is an effort to provide a standalone $http-like service for use outside of Angular.
License
MIT

"
26,"
Public APIs 
A collective list of free APIs for use in software and web development.
Sponsor:

A public API for this project can be found here - thanks to DigitalOcean for helping us provide this service!
For information on contributing to this project, please see the contributing guide.
Please note a passing build status indicates all listed APIs are available since the last update. A failing build status indicates that 1 or more services may be unavailable at the moment.
Index

Animals
Anime
Anti-Malware
Art & Design
Books
Business
Calendar
Cloud Storage & File Sharing
Continuous Integration
Cryptocurrency
Currency Exchange
Data Validation
Development
Dictionaries
Documents & Productivity
Environment
Events
Finance
Food & Drink
Fraud Prevention
Games & Comics
Geocoding
Government
Health
Jobs
Machine Learning
Music
News
Open Data
Open Source Projects
Patent
Personality
Photography
Science & Math
Security
Shopping
Social
Sports & Fitness
Test Data
Text Analysis
Tracking
Transportation
URL Shorteners
Vehicle
Video
Weather

Animals



API
Description
Auth
HTTPS
CORS




Cat Facts
Daily cat facts
No
Yes
No


Cats
Pictures of cats from Tumblr
apiKey
Yes
Unknown


Dogs
Based on the Stanford Dogs Dataset
No
Yes
Yes


HTTPCat
Cat for every HTTP Status
No
Yes
Unknown


IUCN
IUCN Red List of Threatened Species
apiKey
No
Unknown


Movebank
Movement and Migration data of animals
No
Yes
Unknown


Petfinder
Adoption
OAuth
Yes
Yes


PlaceGOAT
Placeholder goat images
No
Yes
Unknown


RandomCat
Random pictures of cats
No
Yes
Yes


RandomDog
Random pictures of dogs
No
Yes
Yes


RandomFox
Random pictures of foxes
No
Yes
No


RescueGroups
Adoption
No
Yes
Unknown


Shibe.Online
Random pictures of Shibu Inu, cats or birds
No
No
No



⬆ Back to Index
Anime



API
Description
Auth
HTTPS
CORS




AniList
Anime discovery & tracking
OAuth
Yes
Unknown


AnimeNewsNetwork
Anime industry news
No
Yes
Yes


Jikan
Unofficial MyAnimeList API
No
Yes
Yes


Kitsu
Anime discovery platform
OAuth
Yes
Unknown


Studio Ghibli
Resources from Studio Ghibli films
No
Yes
Unknown



⬆ Back to Index
Anti-Malware



API
Description
Auth
HTTPS
CORS




AbuseIPDB
IP/domain/URL reputation
apiKey
Yes
Unknown


AlienVault Open Threat Exchange (OTX)
IP/domain/URL reputation
apiKey
Yes
Unknown


Google Safe Browsing
Google Link/Domain Flagging
apiKey
Yes
Unknown


Metacert
Metacert Link Flagging
apiKey
Yes
Unknown


VirusTotal
VirusTotal File/URL Analysis
apiKey
Yes
Unknown


Web Of Trust (WOT)
Website reputation
apiKey
Yes
Unknown



⬆ Back to Index
Art & Design



API
Description
Auth
HTTPS
CORS




Behance
Design
apiKey
Yes
Unknown


Cooper Hewitt
Smithsonian Design Museum
apiKey
Yes
Unknown


Dribbble
Design
OAuth
No
Unknown


Harvard Art Museums
Art
apiKey
No
Unknown


Iconfinder
Icons
apiKey
Yes
Unknown


Icons8
Icons
OAuth
Yes
Unknown


Noun Project
Icons
OAuth
No
Unknown


Rijksmuseum
Art
apiKey
Yes
Unknown



⬆ Back to Index
Books



API
Description
Auth
HTTPS
CORS




Bhagavad Gita
Bhagavad Gita text
OAuth
Yes
Yes


BookNomads
Books published in the Netherlands and Flanders (about 2.5 million), book covers and related data
No
Yes
Unknown


British National Bibliography
Books
No
No
Unknown


Goodreads
Books
apiKey
Yes
Unknown


Google Books
Books
OAuth
Yes
Unknown


LibGen
Library Genesis search engine
No
No
Unknown


Open Library
Books, book covers and related data
No
Yes
Unknown


Penguin Publishing
Books, book covers and related data
No
Yes
Unknown



⬆ Back to Index
Business



API
Description
Auth
HTTPS
CORS




Charity Search
Non-profit charity data
apiKey
No
Unknown


Clearbit Logo
Search for company logos and embed them in your projects
apiKey
Yes
Unknown


Domainsdb.info
Registered Domain Names Search
No
Yes
Unknown


Freelancer
Hire freelancers to get work done
OAuth
Yes
Unknown


Gmail
Flexible, RESTful access to the user's inbox
OAuth
Yes
Unknown


Google Analytics
Collect, configure and analyze your data to reach the right audience
OAuth
Yes
Unknown


MailboxValidator
Validate email address to improve deliverability
apiKey
Yes
Unknown


mailgun
Email Service
apiKey
Yes
Unknown


markerapi
Trademark Search
No
No
Unknown


Ticksel
Friendly website analytics made for humans
No
Yes
Unknown


Trello
Boards, lists and cards to help you organize and prioritize your projects
OAuth
Yes
Unknown



⬆ Back to Index
Calendar



API
Description
Auth
HTTPS
CORS




Calendar Index
Worldwide Holidays and Working Days
apiKey
Yes
Yes


Church Calendar
Catholic liturgical calendar
No
No
Unknown


Czech Namedays Calendar
Lookup for a name and returns nameday date
No
No
Unknown


Google Calendar
Display, create and modify Google calendar events
OAuth
Yes
Unknown


Hebrew Calendar
Convert between Gregorian and Hebrew, fetch Shabbat and Holiday times, etc
No
No
Unknown


Holidays
Historical data regarding holidays
apiKey
Yes
Unknown


LectServe
Protestant liturgical calendar
No
No
Unknown


Nager.Date
Public holidays for more than 90 countries
No
Yes
No


Namedays Calendar
Provides namedays for multiple countries
No
Yes
Yes


Non-Working Days
Database of ICS files for non working days
No
Yes
Unknown


Russian Calendar
Check if a date is a Russian holiday or not
No
Yes
No



⬆ Back to Index
Cloud Storage & File Sharing



API
Description
Auth
HTTPS
CORS




Box
File Sharing and Storage
OAuth
Yes
Unknown


Dropbox
File Sharing and Storage
OAuth
Yes
Unknown


Google Drive
File Sharing and Storage
OAuth
Yes
Unknown


OneDrive
File Sharing and Storage
OAuth
Yes
Unknown


Pastebin
Plain Text Storage
apiKey
Yes
Unknown


Temporal
IPFS based file storage and sharing with optional IPNS naming
apiKey
Yes
No


WeTransfer
File Sharing
apiKey
Yes
Yes



⬆ Back to Index
Continuous Integration



API
Description
Auth
HTTPS
CORS




CircleCI
Automate the software development process using continuous integration and continuous delivery
apiKey
Yes
Unknown


Codeship
Codeship is a Continuous Integration Platform in the cloud
apiKey
Yes
Unknown


Travis CI
Sync your GitHub projects with Travis CI to test your code in minutes
apiKey
Yes
Unknown



⬆ Back to Index
Cryptocurrency



API
Description
Auth
HTTPS
CORS




Binance
Exchange for Trading Cryptocurrencies based in China
apiKey
Yes
Unknown


BitcoinAverage
Digital Asset Price Data for the blockchain industry
apiKey
Yes
Unknown


BitcoinCharts
Financial and Technical Data related to the Bitcoin Network
No
Yes
Unknown


Bitfinex
Cryptocurrency Trading Platform
apiKey
Yes
Unknown


Bitmex
Real-Time Cryptocurrency derivatives trading platform based in Hong Kong
apiKey
Yes
Unknown


Bittrex
Next Generation Crypto Trading Platform
apiKey
Yes
Unknown


Block
Bitcoin Payment, Wallet & Transaction Data
apiKey
Yes
Unknown


Blockchain
Bitcoin Payment, Wallet & Transaction Data
No
Yes
Unknown


CoinAPI
All Currency Exchanges integrate under a single api
apiKey
Yes
No


Coinbase
Bitcoin, Bitcoin Cash, Litecoin and Ethereum Prices
apiKey
Yes
Unknown


Coinbase Pro
Cryptocurrency Trading Platform
apiKey
Yes
Unknown


CoinDesk
Bitcoin Price Index
No
No
Unknown


CoinGecko
Cryptocurrency Price, Market, and Developer/Social Data
No
Yes
Yes


Coinigy
Interacting with Coinigy Accounts and Exchange Directly
apiKey
Yes
Unknown


CoinLayer
Real-time Crypto Currency Exchange Rates
apiKey
Yes
Unknown


Coinlib
Crypto Currency Prices
apiKey
Yes
Unknown


Coinlore
Cryptocurrencies prices, volume and more
No
Yes
Unknown


CoinMarketCap
Cryptocurrencies Prices
apiKey
Yes
Unknown


Coinpaprika
Cryptocurrencies prices, volume and more
No
Yes
Yes


CoinRanking
Live Cryptocurrency data
No
Yes
Unknown


CryptoCompare
Cryptocurrencies Comparison
No
Yes
Unknown


Cryptonator
Cryptocurrencies Exchange Rates
No
Yes
Unknown


Gemini
Cryptocurrencies Exchange
No
Yes
Unknown


ICObench
Various information on listing, ratings, stats, and more
apiKey
Yes
Unknown


Livecoin
Cryptocurrency Exchange
No
Yes
Unknown


MercadoBitcoin
Brazilian Cryptocurrency Information
No
Yes
Unknown


Nexchange
Automated cryptocurrency exchange service
No
No
Yes


NiceHash
Largest Crypto Mining Marketplace
apiKey
Yes
Unknown


Poloniex
US based digital asset exchange
apiKey
Yes
Unknown


WorldCoinIndex
Cryptocurrencies Prices
apiKey
Yes
Unknown



⬆ Back to Index
Currency Exchange



API
Description
Auth
HTTPS
CORS




1Forge
Forex currency market data
apiKey
Yes
Unknown


Currencylayer
Exchange rates and currency conversion
apiKey
Yes
Unknown


Czech National Bank
A collection of exchange rates
No
Yes
Unknown


ExchangeRate-API
Free currency conversion
No
Yes
Yes


Exchangeratesapi.io
Exchange rates with currency conversion
No
Yes
Yes


Fixer.io
Exchange rates and currency conversion
apiKey
Yes
Unknown


Frankfurter
Exchange rates, currency conversion and time series
No
Yes
Yes


ratesapi
Free exchange rates and historical rates
No
Yes
Unknown



⬆ Back to Index
Data Validation



API
Description
Auth
HTTPS
CORS




Cloudmersive Validate
Validate email addresses, phone numbers, VAT numbers and domain names
apiKey
Yes
Yes


languagelayer
Language detection
No
Yes
Unknown


Lob.com
US Address Verification
apiKey
Yes
Unknown


mailboxlayer
Email address validation
No
Yes
Unknown


NumValidate
Open Source phone number validation
No
Yes
Unknown


numverify
Phone number validation
No
Yes
Unknown


PurgoMalum
Content validator against profanity & obscenity
No
No
Unknown


US Autocomplete
Enter address data quickly with real-time address suggestions
apiKey
Yes
Yes


US Extract
Extract postal addresses from any text including emails
apiKey
Yes
Yes


US Street Address
Validate and append data for any US postal address
apiKey
Yes
Yes


vatlayer
VAT number validation
No
Yes
Unknown



⬆ Back to Index
Development



API
Description
Auth
HTTPS
CORS




24 Pull Requests
Project to promote open source collaboration during December
No
Yes
Yes


Agify.io
Estimates the age from a first name
No
Yes
Yes


ApiFlash
Chrome based screenshot API for developers
apiKey
Yes
Unknown


Apility.io
IP, Domains and Emails anti-abuse API blocklist
No
Yes
Yes


APIs.guru
Wikipedia for Web APIs, OpenAPI/Swagger specs for public APIs
No
Yes
Unknown


BetterMeta
Return a site's meta tags in JSON format
X-Mashape-Key
Yes
Unknown


Bitbucket
Pull public information for a Bitbucket account
No
Yes
Unknown


Bored
Find random activities to fight boredom
No
Yes
Unknown


Browshot
Easily make screenshots of web pages in any screen size, as any device
apiKey
Yes
Unknown


CDNJS
Library info on CDNJS
No
Yes
Unknown


Changelogs.md
Structured changelog metadata from open source projects
No
Yes
Unknown


CountAPI
Free and simple counting service. You can use it to track page hits and specific events
No
Yes
Yes


DigitalOcean Status
Status of all DigitalOcean services
No
Yes
Unknown


DomainDb Info
Domain name search to find all domains containing particular words/phrases/etc
No
Yes
Unknown


Faceplusplus
A tool to detect face
OAuth
Yes
Unknown


Genderize.io
Estimates a gender from a first name
No
Yes
Yes


GitHub
Make use of GitHub repositories, code and user info programmatically
OAuth
Yes
Yes


Gitlab
Automate GitLab interaction programmatically
OAuth
Yes
Unknown


Gitter
Chat for GitHub
OAuth
Yes
Unknown


HTTP2.Pro
Test endpoints for client and server HTTP/2 protocol support
No
Yes
Unknown


IBM Text to Speech
Convert text to speech
apiKey
Yes
Yes


import.io
Retrieve structured data from a website or RSS feed
apiKey
Yes
Unknown


IPify
A simple IP Address API
No
Yes
Unknown


IPinfo
Another simple IP Address API
No
Yes
Unknown


JSON 2 JSONP
Convert JSON to JSONP (on-the-fly) for easy cross-domain data requests using client-side JavaScript
No
Yes
Unknown


JSONbin.io
Free JSON storage service. Ideal for small scale Web apps, Websites and Mobile apps
apiKey
Yes
Yes


Judge0
Compile and run source code
No
Yes
Unknown


Let's Validate
Uncovers the technologies used on websites and URL to thumbnail
No
Yes
Unknown


License-API
Unofficial REST API for choosealicense.com
No
Yes
No


LiveEdu
Live Coding Streaming
OAuth
Yes
Unknown


MAC address vendor lookup
Retrieve vendor details and other information regarding a given MAC address or an OUI
apiKey
Yes
Yes


Myjson
A simple JSON store for your web or mobile app
No
No
Unknown


Nationalize.io
Estimate the nationality of a first name
No
Yes
Yes


OOPSpam
Multiple spam filtering service
No
Yes
Yes


Plino
Spam filtering system
No
Yes
Unknown


Postman
Tool for testing APIs
apiKey
Yes
Unknown


ProxyCrawl
Scraping and crawling anticaptcha service
apiKey
Yes
Unknown


Public APIs
A collective list of free JSON APIs for use in web development
No
Yes
Unknown


Pusher Beams
Push notifications for Android & iOS
apiKey
Yes
Unknown


QR code
Create an easy to read QR code and URL shortener
No
Yes
Yes


QR code
Generate and decode / read QR code graphics
No
Yes
Unknown


QuickChart
Generate chart and graph images
No
Yes
Yes


ReqRes
A hosted REST-API ready to respond to your AJAX requests
No
Yes
Unknown


Scrape Website Email
Grabs email addresses from a URL
X-Mashape-Key
Yes
Unknown


ScraperApi
Easily build scalable web scrapers
apiKey
Yes
Unknown


ScreenshotAPI.net
Create pixel-perfect website screenshots
apiKey
Yes
Yes


SHOUTCLOUD
ALL-CAPS AS A SERVICE
No
No
Unknown


StackExchange
Q&A forum for developers
OAuth
Yes
Unknown


Verse
Check what's the latest version of your favorite open-source project
No
Yes
Unknown


XML to JSON
Integration developer utility APIs
No
Yes
Unknown



⬆ Back to Index
Dictionaries



API
Description
Auth
HTTPS
CORS




Lingua Robot
Word definitions, pronunciations, synonyms, antonyms and others
apiKey
Yes
Yes


Merriam-Webster
Dictionary and Thesaurus Data
apiKey
Yes
Unknown


OwlBot
Definitions with example sentence and photo if available
apiKey
Yes
Yes


Oxford
Dictionary Data
apiKey
Yes
No


Wordnik
Dictionary Data
apiKey
No
Unknown


Words
Definitions and synonyms for more than 150,000 words
apiKey
Yes
Unknown



⬆ Back to Index
Documents & Productivity



API
Description
Auth
HTTPS
CORS




Cloudmersive Document and Data Conversion
HTML/URL to PDF/PNG, Office documents to PDF, image conversion
apiKey
Yes
Yes


File.io
File Sharing
No
Yes
Unknown


Mercury
Web parser
apiKey
Yes
Unknown


pdflayer
HTML/URL to PDF
apiKey
Yes
Unknown


Pocket
Bookmarking service
OAuth
Yes
Unknown


PrexView
Data from XML or JSON to PDF, HTML or Image
apiKey
Yes
Unknown


Restpack
Provides screenshot, HTML to PDF and content extraction APIs
apiKey
Yes
Unknown


Todoist
Todo Lists
OAuth
Yes
Unknown


Vector Express
Free vector file converting API
No
No
Yes


WakaTime
Automated time tracking leaderboards for programmers
No
Yes
Unknown


Wunderlist
Todo Lists
OAuth
Yes
Unknown



⬆ Back to Index
Environment



API
Description
Auth
HTTPS
CORS




AirVisual
Air quality and weather data
apiKey
Yes
Unknown


GrünstromIndex
Green Power Index for Germany (Grünstromindex/GSI)
No
No
Yes


OpenAQ
Open air quality data
apiKey
Yes
Unknown


PM25.in
Air quality of China
apiKey
No
Unknown


PVWatts
Energy production photovoltaic (PV) energy systems
apiKey
Yes
Unknown


UK Carbon Intensity
The Official Carbon Intensity API for Great Britain developed by National Grid
No
Yes
Unknown



⬆ Back to Index
Events



API
Description
Auth
HTTPS
CORS




Eventbrite
Find events
OAuth
Yes
Unknown


Picatic
Sell tickets anywhere
apiKey
Yes
Unknown


Ticketmaster
Search events, attractions, or venues
apiKey
Yes
Unknown



⬆ Back to Index
Finance



API
Description
Auth
HTTPS
CORS




Alpha Vantage
Realtime and historical stock data
apiKey
Yes
Unknown


Barchart OnDemand
Stock, Futures and Forex Market Data
apiKey
Yes
Unknown


Consumer Financial Protection Bureau
Financial services consumer complaint data
apiKey
Yes
Unknown


Financial Modeling Prep
Stock information and data
No
Yes
Unknown


IEX
Realtime stock data
No
Yes
Yes


IEX Cloud
Realtime & Historical Stock and Market Data
apiKey
Yes
Yes


IG
Spreadbetting and CFD Market Data
apiKey
Yes
Unknown


Plaid
Connect with users’ bank accounts and access transaction data
apiKey
Yes
Unknown


Razorpay IFSC
Indian Financial Systems Code (Bank Branch Codes)
No
Yes
Unknown


RoutingNumbers.info
ACH/NACHA Bank Routing Numbers
No
Yes
Unknown


Tradier
US equity/option market data (delayed, intraday, historical)
OAuth
Yes
Yes


VAT Rates
A collection of all VAT rates for EU countries
No
Yes
Unknown


YNAB
Budgeting & Planning
OAuth
Yes
Yes



⬆ Back to Index
Food & Drink



API
Description
Auth
HTTPS
CORS




Edamam
Recipe Search
apiKey
Yes
Unknown


LCBO
Alcohol
apiKey
Yes
Unknown


Open Brewery DB
Breweries, Cideries and Craft Beer Bottle Shops
No
Yes
Yes


Open Food Facts
Food Products Database
No
Yes
Unknown


PunkAPI
Brewdog Beer Recipes
No
Yes
Unknown


Recipe Puppy
Food
No
No
Unknown


TacoFancy
Community-driven taco database
No
No
Unknown


The Report of the Week
Food & Drink Reviews
No
Yes
Unknown


TheCocktailDB
Cocktail Recipes
apiKey
Yes
Yes


TheMealDB
Meal Recipes
apiKey
Yes
Yes


What's on the menu?
NYPL human-transcribed historical menu collection
apiKey
No
Unknown


Zomato
Discover restaurants
apiKey
Yes
Unknown



⬆ Back to Index
Fraud Prevention



API
Description
Auth
HTTPS
CORS




FraudLabs Pro
Screen order information using AI to detect frauds
apiKey
Yes
Unknown


Whitepages Pro
Global identity verification with phone, address, email and IP
apiKey
Yes
Unknown


Whitepages Pro
Phone reputation to detect spammy phones
apiKey
Yes
Unknown


Whitepages Pro
Get an owner’s name, address, demographics based on the phone number
apiKey
Yes
Unknown


Whitepages Pro
Phone number validation, line_type, carrier append
apiKey
Yes
Unknown


Whitepages Pro
Get normalized physical address, residents, address type and validity
apiKey
Yes
Unknown



⬆ Back to Index
Games & Comics



API
Description
Auth
HTTPS
CORS




Age of Empires II
Get information about Age of Empires II resources
No
Yes
Unknown


AmiiboAPI
Amiibo Information
No
No
Yes


Battle.net
Blizzard Entertainment
apiKey
Yes
Unknown


Chuck Norris Database
Jokes
No
No
Unknown


Clash of Clans
Clash of Clans Game Information
apiKey
Yes
Unknown


Clash Royale
Clash Royale Game Information
apiKey
Yes
Unknown


Comic Vine
Comics
No
Yes
Unknown


Deck of Cards
Deck of Cards
No
No
Unknown


Destiny The Game
Bungie Platform API
apiKey
Yes
Unknown


Dota 2
Provides information about Player stats , Match stats, Rankings for Dota 2
No
Yes
Unknown


Dungeons and Dragons
Reference for 5th edition spells, classes, monsters, and more
No
No
No


Eve Online
Third-Party Developer Documentation
OAuth
Yes
Unknown


Final Fantasy XIV
Final Fantasy XIV Game data API
No
Yes
Yes


Fortnite
Fortnite Stats & Cosmetics
apiKey
Yes
Yes


Fortnite
Fortnite Stats
apiKey
Yes
Unknown


Giant Bomb
Video Games
No
Yes
Unknown


Guild Wars 2
Guild Wars 2 Game Information
apiKey
Yes
Unknown


Halo
Halo 5 and Halo Wars 2 Information
apiKey
Yes
Unknown


Hearthstone
Hearthstone Cards Information
X-Mashape-Key
Yes
Unknown


Hypixel
Hypixel player stats
apiKey
Yes
Unknown


IGDB.com
Video Game Database
apiKey
Yes
Unknown


JokeAPI
Programming, Miscellaneous and Dark Jokes
No
Yes
Yes


Jokes
Programming and general jokes
No
Yes
Unknown


Jservice
Jeopardy Question Database
No
No
Unknown


Magic The Gathering
Magic The Gathering Game Information
No
No
Unknown


Marvel
Marvel Comics
apiKey
No
Unknown


mod.io
Cross Platform Mod API
apiKey
Yes
Unknown


Open Trivia
Trivia Questions
No
Yes
Unknown


PandaScore
E-sports games and results
apiKey
Yes
Unknown


PlayerUnknown's Battlegrounds
PUBG Stats
apiKey
Yes
Unknown


Pokéapi
Pokémon Information
No
Yes
Unknown


Pokémon TCG
Pokémon TCG Information
No
Yes
Unknown


Rick and Morty
All the Rick and Morty information, including images
No
Yes
Yes


Riot Games
League of Legends Game Information
apiKey
Yes
Unknown


Scryfall
Magic: The Gathering database
No
Yes
Yes


Steam
Steam Client Interaction
OAuth
Yes
Unknown


SuperHeroes
All SuperHeroes and Villains data from all universes under a single API
apiKey
Yes
Unknown


Tronald Dump
The dumbest things Donald Trump has ever said
No
Yes
Unknown


Vainglory
Vainglory Players, Matches and Telemetry
apiKey
Yes
Yes


Wargaming.net
Wargaming.net info and stats
apiKey
Yes
No


xkcd
Retrieve xkcd comics as JSON
No
Yes
No



⬆ Back to Index
Geocoding



API
Description
Auth
HTTPS
CORS




adresse.data.gouv.fr
Address database of France, geocoding and reverse
No
Yes
Unknown


Battuta
A (country/region/city) in-cascade location API
apiKey
No
Unknown


Bing Maps
Create/customize digital maps based on Bing Maps data
apiKey
Yes
Unknown


bng2latlong
Convert British OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude
No
Yes
Yes


CitySDK
Open APIs for select European cities
No
Yes
Unknown


Daum Maps
Daum Maps provide multiple APIs for Korean maps
apiKey
No
Unknown


FreeGeoIP
Free geo ip information, no registration required. 15k/hour rate limit
No
Yes
Yes


GeoApi
French geographical data
No
Yes
Unknown


Geocod.io
Address geocoding / reverse geocoding in bulk
apiKey
Yes
Unknown


Geocode.xyz
Provides worldwide forward/reverse geocoding, batch geocoding and geoparsing
No
Yes
Unknown


GeoDataSource
Geocoding of city name by using latitude and longitude coordinates
apiKey
Yes
Unknown


GeoJS
IP geolocation with ChatOps integration
No
Yes
Yes


GeoNames
Place names and other geographical data
No
No
Unknown


geoPlugin
IP geolocation and currency conversion
No
Yes
Yes


Google Earth Engine
A cloud-based platform for planetary-scale environmental data analysis
apiKey
Yes
Unknown


Google Maps
Create/customize digital maps based on Google Maps data
apiKey
Yes
Unknown


HelloSalut
Get hello translation following user language
No
Yes
Unknown


HERE Maps
Create/customize digital maps based on HERE Maps data
apiKey
Yes
Unknown


Indian Cities
Get all Indian cities in a clean JSON Format
No
Yes
Yes


IP 2 Country
Map an IP to a country
No
Yes
Unknown


IP Address Details
Find geolocation with ip address
No
Yes
Unknown


IP Location
Find location with ip address
No
No
Unknown


IP Location
Find IP address location information
No
Yes
Unknown


IP Sidekick
Geolocation API that returns extra information about an IP address
apiKey
Yes
Unknown


IP Vigilante
Free IP Geolocation API
No
Yes
Unknown


IP2Location
IP geolocation web service to get more than 55 parameters
apiKey
Yes
Unknown


IP2Proxy
Detect proxy and VPN using IP address
apiKey
Yes
Unknown


IPGeolocationAPI.com
Locate your visitors by IP with country details
No
Yes
Yes


IPInfoDB
Free Geolocation tools and APIs for country, region, city and time zone lookup by IP address
apiKey
Yes
Unknown


ipstack
Locate and identify website visitors by IP address
apiKey
Yes
Unknown


Kwelo Network
Locate and get detailed information on IP address
No
Yes
Yes


LocationIQ
Provides forward/reverse geocoding and batch geocoding
apiKey
Yes
Yes


Mapbox
Create/customize beautiful digital maps
apiKey
Yes
Unknown


Mexico
Mexico RESTful zip codes API
No
Yes
Unknown


One Map, Singapore
Singapore Land Authority REST API services for Singapore addresses
apiKey
Yes
Unknown


OnWater
Determine if a lat/lon is on water or land
No
Yes
Unknown


OpenCage
Forward and reverse geocoding using open data
apiKey
Yes
Yes


OpenStreetMap
Navigation, geolocation and geographical data
OAuth
No
Unknown


PostcodeData.nl
Provide geolocation data based on postcode for Dutch addresses
No
No
Unknown


Postcodes.io
Postcode lookup & Geolocation for the UK
No
Yes
Yes


REST Countries
Get information about countries via a RESTful API
No
Yes
Unknown


SmartIP.io
IP Geolocation and Threat Intelligence API
apiKey
Yes
Yes


Uebermaps
Discover and share maps with friends
apiKey
Yes
Unknown


US ZipCode
Validate and append data for any US ZipCode
apiKey
Yes
Yes


Utah AGRC
Utah Web API for geocoding Utah addresses
apiKey
Yes
Unknown


ViaCep
Brazil RESTful zip codes API
No
Yes
Unknown


ZipCodeAPI
US zip code distance, radius and location API
apiKey
Yes
Unknown


Zippopotam
Get information about place such as country, city, state, etc
No
No
Unknown



⬆ Back to Index
Government



API
Description
Auth
HTTPS
CORS




BCLaws
Access to the laws of British Columbia
No
No
Unknown


BusinessUSA
Authoritative information on U.S. programs, events, services and more
apiKey
Yes
Unknown


Census.gov
The US Census Bureau provides various APIs and data sets on demographics and businesses
No
Yes
Unknown


City, Lyon Opendata
Lyon(FR) City Open Data
apiKey
Yes
Unknown


City, Nantes Opendata
Nantes(FR) City Open Data
apiKey
Yes
Unknown


City, Prague Opendata
Prague(CZ) City Open Data
No
No
Unknown


Code.gov
The primary platform for Open Source and code sharing for the U.S. Federal Government
apiKey
Yes
Unknown


Colorado Data Engine
Formatted and geolocated Colorado public data
No
Yes
Unknown


Colorado Information Marketplace
Colorado State Government Open Data
No
Yes
Unknown


Data USA
US Public Data
No
Yes
Unknown


Data.gov
US Government Data
apiKey
Yes
Unknown


Data.parliament.uk
Contains live datasets including information about petitions, bills, MP votes, attendance and more
No
No
Unknown


District of Columbia Open Data
Contains D.C. government public datasets, including crime, GIS, financial data, and so on
No
Yes
Unknown


EPA
Web services and data sets from the US Environmental Protection Agency
No
Yes
Unknown


FEC
Information on campaign donations in federal elections
apiKey
Yes
Unknown


Federal Register
The Daily Journal of the United States Government
No
Yes
Unknown


Food Standards Agency
UK food hygiene rating data API
No
No
Unknown


Open Government, Australia
Australian Government Open Data
No
Yes
Unknown


Open Government, Belgium
Belgium Government Open Data
No
Yes
Unknown


Open Government, Canada
Canadian Government Open Data
No
No
Unknown


Open Government, France
French Government Open Data
apiKey
Yes
Unknown


Open Government, India
Indian Government Open Data
apiKey
Yes
Unknown


Open Government, Italy
Italy Government Open Data
No
Yes
Unknown


Open Government, New Zealand
New Zealand Government Open Data
No
Yes
Unknown


Open Government, Romania
Romania Government Open Data
No
No
Unknown


Open Government, Taiwan
Taiwan Government Open Data
No
Yes
Unknown


Open Government, USA
United States Government Open Data
No
Yes
Unknown


Regulations.gov
Federal regulatory materials to increase understanding of the Federal rule making process
apiKey
Yes
Unknown


Represent by Open North
Find Canadian Government Representatives
No
Yes
Unknown


USAspending.gov
US federal spending data
No
Yes
Unknown



⬆ Back to Index
Health



API
Description
Auth
HTTPS
CORS




BetterDoctor
Detailed information about doctors in your area
apiKey
Yes
Unknown


Diabetes
Logging and retrieving diabetes information
No
No
Unknown


Flutrack
Influenza-like symptoms with geotracking
No
No
Unknown


Healthcare.gov
Educational content about the US Health Insurance Marketplace
No
Yes
Unknown


Lexigram
NLP that extracts mentions of clinical concepts from text, gives access to clinical ontology
apiKey
Yes
Unknown


Makeup
Makeup Information
No
No
Unknown


Medicare
Access to the data from the CMS - medicare.gov
No
Yes
Unknown


NPPES
National Plan & Provider Enumeration System, info on healthcare providers registered in US
No
Yes
Unknown


Nutritionix
Worlds largest verified nutrition database
apiKey
Yes
Unknown


openFDA
Public FDA data about drugs, devices and foods
No
Yes
Unknown


USDA Nutrients
National Nutrient Database for Standard Reference
No
Yes
Unknown



⬆ Back to Index
Jobs



API
Description
Auth
HTTPS
CORS




Adzuna
Job board aggregator
apiKey
Yes
Unknown


Authentic Jobs
Job board for designers, hackers and creative pros
apiKey
Yes
Unknown


Careerjet
Job search engine
apiKey
No
Unknown


Github Jobs
Jobs for software developers
No
Yes
Yes


GraphQL Jobs
Jobs with GraphQL
No
Yes
Yes


Indeed
Job board aggregator
apiKey
Yes
Unknown


Jobs2Careers
Job aggregator
apiKey
Yes
Unknown


Jooble
Job search engine
apiKey
Yes
Unknown


Juju
Job search engine
apiKey
No
Unknown


Open Skills
Job titles, skills and related jobs data
No
No
Unknown


Reed
Job board aggregator
apiKey
Yes
Unknown


Search.gov Jobs
Tap into a list of current jobs openings with the United States government
No
Yes
Unknown


The Muse
Job board and company profiles
apiKey
Yes
Unknown


Upwork
Freelance job board and management system
OAuth
Yes
Unknown


USAJOBS
US government job board
apiKey
Yes
Unknown


ZipRecruiter
Job search app and website
apiKey
Yes
Unknown



⬆ Back to Index
Machine Learning



API
Description
Auth
HTTPS
CORS




Clarifai
Computer Vision
OAuth
Yes
Unknown


Cloudmersive
Image captioning, face recognition, NSFW classification
apiKey
Yes
Yes


Deepcode
AI for code review
No
Yes
Unknown


Dialogflow
Natural Language Processing
apiKey
Yes
Unknown


Keen IO
Data Analytics
apiKey
Yes
Unknown


Time Door
A time series analysis API
apiKey
Yes
Yes


Unplugg
Forecasting API for timeseries data
apiKey
Yes
Unknown


Wit.ai
Natural Language Processing
OAuth
Yes
Unknown



⬆ Back to Index
Music



API
Description
Auth
HTTPS
CORS




AI Mastering
Automated Music Mastering
apiKey
Yes
Yes


Bandsintown
Music Events
No
Yes
Unknown


Deezer
Music
OAuth
Yes
Unknown


Discogs
Music
OAuth
Yes
Unknown


Genius
Crowdsourced lyrics and music knowledge
OAuth
Yes
Unknown


Genrenator
Music genre generator
No
Yes
Unknown


iTunes Search
Software products
No
Yes
Unknown


Jamendo
Music
OAuth
Yes
Unknown


KKBOX
Get music libraries, playlists, charts, and perform out of KKBOX's platform
OAuth
Yes
Unknown


LastFm
Music
apiKey
Yes
Unknown


Lyrics.ovh
Simple API to retrieve the lyrics of a song
No
Yes
Unknown


Mixcloud
Music
OAuth
Yes
Yes


MusicBrainz
Music
No
Yes
Unknown


Musikki
Music
apiKey
Yes
Unknown


Musixmatch
Music
apiKey
Yes
Unknown


Openwhyd
Download curated playlists of streaming tracks (YouTube, SoundCloud, etc...)
No
Yes
No


Songkick
Music Events
OAuth
Yes
Unknown


Songsterr
Provides guitar, bass and drums tabs and chords
No
Yes
Unknown


SoundCloud
Allow users to upload and share sounds
OAuth
Yes
Unknown


Spotify
View Spotify music catalog, manage users' libraries, get recommendations and more
OAuth
Yes
Unknown


TasteDive
Similar artist API (also works for movies and TV shows)
apiKey
Yes
Unknown


TheAudioDB
Music
apiKey
Yes
Unknown


Vagalume
Crowdsourced lyrics and music knowledge
apiKey
Yes
Unknown



⬆ Back to Index
News



API
Description
Auth
HTTPS
CORS




Associated Press
Search for news and metadata from Associated Press
apiKey
Yes
Unknown


Chronicling America
Provides access to millions of pages of historic US newspapers from the Library of Congress
No
No
Unknown


Currents
Latest news published in various news sources, blogs and forums
apiKey
Yes
Yes


Feedbin
RSS reader
OAuth
Yes
Unknown


Feedster
Searchable and categorized collections of RSS feeds
apiKey
Yes
Unknown


New York Times
Provides news
apiKey
Yes
Unknown


News
Headlines currently published on a range of news sources and blogs
apiKey
Yes
Unknown


NPR One
Personalized news listening experience from NPR
OAuth
Yes
Unknown


The Guardian
Access all the content the Guardian creates, categorised by tags and section
apiKey
Yes
Unknown


The Old Reader
RSS reader
apiKey
Yes
Unknown



⬆ Back to Index
Open Data



API
Description
Auth
HTTPS
CORS




18F
Unofficial US Federal Government API Development
No
No
Unknown


Abbreviation
Get abbreviations and meanings
X-Mashape-Key
Yes
Unknown


Archive.org
The Internet Archive
No
Yes
Unknown


ARSAT
ARSAT public data
apiKey
Yes
Unknown


Callook.info
United States ham radio callsigns
No
Yes
Unknown


CARTO
Location Information Prediction
apiKey
Yes
Unknown


Celebinfo
Celebrity information
X-Mashape-Key
Yes
Unknown


CivicFeed
News articles and public datasets
apiKey
Yes
Unknown


Datakick
The open product database
apiKey
Yes
Unknown


Enigma Public
Broadest collection of public data
apiKey
Yes
Yes


fonoApi
Mobile Device Description
No
Yes
Unknown


French Address Search
Address search via the French Government
No
Yes
Unknown


LinkPreview
Get JSON formatted summary with title, description and preview image for any requested URL
apiKey
Yes
Yes


Marijuana Strains
Marijuana strains, races, flavors and effects
apiKey
No
Unknown


Microlink.io
Extract structured data from any website
No
Yes
Yes


OpenCorporates
Data on corporate entities and directors in many countries
apiKey
Yes
Unknown


Qmeta
Global Search Engine
apiKey
Yes
Unknown


Quandl
Stock Market Data
No
Yes
Unknown


Recreation Information Database
Recreational areas, federal lands, historic sites, museums, and other attractions/resources(US)
apiKey
Yes
Unknown


Scoop.it
Content Curation Service
apiKey
No
Unknown


Teleport
Quality of Life Data
No
Yes
Unknown


Universities List
University names, countries and domains
No
Yes
Unknown


University of Oslo
Courses, lecture videos, detailed information for courses etc. for the University of Oslo (Norway)
No
Yes
Unknown


UPC database
More than 1.5 million barcode numbers from all around the world
apiKey
Yes
Unknown


Wikidata
Collaboratively edited knowledge base operated by the Wikimedia Foundation
OAuth
Yes
Unknown


Wikipedia
Mediawiki Encyclopedia
No
Yes
Unknown


Yelp
Find Local Business
OAuth
Yes
Unknown



⬆ Back to Index
Open Source Projects



API
Description
Auth
HTTPS
CORS




Countly
Countly web analytics
No
No
Unknown


Drupal.org
Drupal.org
No
Yes
Unknown


Evil Insult Generator
Evil Insults
No
Yes
Yes


Libraries.io
Open source software libraries
apiKey
Yes
Unknown



⬆ Back to Index
Patent



API
Description
Auth
HTTPS
CORS




EPO
European patent search system api
OAuth
Yes
Unknown


TIPO
Taiwan patent search system api
apiKey
Yes
Unknown


USPTO
USA patent api services
No
Yes
Unknown



⬆ Back to Index
Personality



API
Description
Auth
HTTPS
CORS




Advice Slip
Generate random advice slips
No
Yes
Unknown


chucknorris.io
JSON API for hand curated Chuck Norris jokes
No
Yes
Unknown


FavQs.com
FavQs allows you to collect, discover and share your favorite quotes
apiKey
Yes
Unknown


FOAAS
Fuck Off As A Service
No
No
Unknown


Forismatic
Inspirational Quotes
No
No
Unknown


icanhazdadjoke
The largest selection of dad jokes on the internet
No
Yes
Unknown


kanye.rest
REST API for random Kanye West quotes
No
Yes
Yes


Medium
Community of readers and writers offering unique perspectives on ideas
OAuth
Yes
Unknown


NaMoMemes
Memes on Narendra Modi
No
Yes
Unknown


Programming Quotes
Programming Quotes API for open source projects
No
Yes
Unknown


Quote Garden
REST API for more than 5000 famous quotes
No
Yes
Unknown


Quotes on Design
Inspirational Quotes
No
Yes
Unknown


Traitify
Assess, collect and analyze Personality
No
Yes
Unknown


tronalddump.io
Api & web archive for the things Donald Trump has said
No
Yes
Unknown



⬆ Back to Index
Photography



API
Description
Auth
HTTPS
CORS




Flickr
Flickr Services
OAuth
Yes
Unknown


Getty Images
Build applications using the world's most powerful imagery
OAuth
Yes
Unknown


Gfycat
Jiffier GIFs
OAuth
Yes
Unknown


Giphy
Get all your gifs
apiKey
Yes
Unknown


Gyazo
Upload images
apiKey
Yes
Unknown


Imgur
Images
OAuth
Yes
Unknown


Lorem Picsum
Images from Unsplash
No
Yes
Unknown


Pexels
Free Stock Photos and Videos
apiKey
Yes
Yes


Pixabay
Photography
apiKey
Yes
Unknown


Pixhost
Upload images, photos, galleries
No
Yes
Unknown


PlaceKitten
Resizable kitten placeholder images
No
Yes
Unknown


ScreenShotLayer
URL 2 Image
No
Yes
Unknown


Unsplash
Photography
OAuth
Yes
Unknown


Wallhaven
Wallpapers
apiKey
Yes
Unknown



⬆ Back to Index
Science & Math



API
Description
Auth
HTTPS
CORS




arcsecond.io
Multiple astronomy data sources
No
Yes
Unknown


CORE
Access the world's Open Access research papers
apiKey
Yes
Unknown


GBIF
Global Biodiversity Information Facility
No
Yes
Yes


iDigBio
Access millions of museum specimens from organizations around the world
No
Yes
Unknown


inspirehep.net
High Energy Physics info. system
No
Yes
Unknown


ITIS
Integrated Taxonomic Information System
No
Yes
Unknown


Launch Library
Upcoming Space Launches
No
Yes
Unknown


Minor Planet Center
Asterank.com Information
No
No
Unknown


NASA
NASA data, including imagery
No
Yes
Unknown


NASA APOD (unofficial API)
API for getting APOD (Astronomy Image of the Day) images along with metadata
No
Yes
Yes


Newton
Symbolic and Arithmetic Math Calculator
No
Yes
Unknown


Numbers
Facts about numbers
No
No
Unknown


Open Notify
ISS astronauts, current location, etc
No
No
Unknown


Open Science Framework
Repository and archive for study designs, research materials, data, manuscripts, etc
No
Yes
Unknown


SHARE
A free, open, dataset about research and scholarly activities
No
Yes
Unknown


SpaceX
Company, vehicle, launchpad and launch data
No
Yes
Unknown


Sunrise and Sunset
Sunset and sunrise times for a given latitude and longitude
No
Yes
Unknown


Trefle
Botanical data for plant species
apiKey
Yes
Unknown


USGS Earthquake Hazards Program
Earthquakes data real-time
No
Yes
Unknown


USGS Water Services
Water quality and level info for rivers and lakes
No
Yes
Unknown


World Bank
World Data
No
No
Unknown



⬆ Back to Index
Security



API
Description
Auth
HTTPS
CORS




Censys.io
Search engine for Internet connected host and devices
apiKey
Yes
No


CRXcavator
Chrome extension risk scoring
apiKey
Yes
Unknown


FilterLists
Lists of filters for adblockers and firewalls
No
Yes
Unknown


HaveIBeenPwned
Passwords which have previously been exposed in data breaches
apiKey
Yes
Unknown


National Vulnerability Database
U.S. National Vulnerability Database
No
Yes
Unknown


SecurityTrails
Domain and IP related information such as current and historical WHOIS and DNS records
apiKey
Yes
Unknown


Shodan
Search engine for Internet connected devices
apiKey
Yes
Unknown


UK Police
UK Police data
No
Yes
Unknown



⬆ Back to Index
Shopping



API
Description
Auth
HTTPS
CORS




Best Buy
Products, Buying Options, Categories, Recommendations, Stores and Commerce
apiKey
Yes
Unknown


Bratabase
Database of different types of Bra Sizes
OAuth
Yes
Unknown


eBay
Sell and Buy on eBay
OAuth
Yes
Unknown


Wal-Mart
Item price and availability
apiKey
Yes
Unknown


Wegmans
Wegmans Food Markets
apiKey
Yes
Unknown



⬆ Back to Index
Social



API
Description
Auth
HTTPS
CORS




Buffer
Access to pending and sent updates in Buffer
OAuth
Yes
Unknown


Cisco Spark
Team Collaboration Software
OAuth
Yes
Unknown


Discord
Make bots for Discord, integrate Discord onto an external platform
OAuth
Yes
Unknown


Disqus
Communicate with Disqus data
OAuth
Yes
Unknown


Facebook
Facebook Login, Share on FB, Social Plugins, Analytics and more
OAuth
Yes
Unknown


Foursquare
Interact with Foursquare users and places (geolocation-based checkins, photos, tips, events, etc)
OAuth
Yes
Unknown


Fuck Off as a Service
Asks someone to fuck off
No
Yes
Unknown


Full Contact
Get Social Media profiles and contact Information
OAuth
Yes
Unknown


HackerNews
Social news for CS and entrepreneurship
No
Yes
Unknown


Instagram
Instagram Login, Share on Instagram, Social Plugins and more
OAuth
Yes
Unknown


LinkedIn
The foundation of all digital integrations with LinkedIn
OAuth
Yes
Unknown


Meetup.com
Data about Meetups from Meetup.com
apiKey
Yes
Unknown


Mixer
Game Streaming API
OAuth
Yes
Unknown


MySocialApp
Seamless Social Networking features, API, SDK to any app
apiKey
Yes
Unknown


Open Collective
Get Open Collective data
No
Yes
Unknown


Pinterest
The world's catalog of ideas
OAuth
Yes
Unknown


PWRTelegram bot
Boosted version of the Telegram bot API
OAuth
Yes
Unknown


Reddit
Homepage of the internet
OAuth
Yes
Unknown


SharedCount
Social media like and share data for any URL
apiKey
Yes
Unknown


Slack
Team Instant Messaging
OAuth
Yes
Unknown


Telegram Bot
Simplified HTTP version of the MTProto API for bots
OAuth
Yes
Unknown


Telegram MTProto
Read and write Telegram data
OAuth
Yes
Unknown


Trash Nothing
A freecycling community with thousands of free items posted every day
OAuth
Yes
Yes


Tumblr
Read and write Tumblr Data
OAuth
Yes
Unknown


Twitch
Game Streaming API
OAuth
Yes
Unknown


Twitter
Read and write Twitter data
OAuth
Yes
No


vk
Read and write vk data
OAuth
Yes
Unknown



⬆ Back to Index
Sports & Fitness



API
Description
Auth
HTTPS
CORS




balldontlie
Ballldontlie provides access to stats data from the NBA
No
Yes
Yes


BikeWise
Bikewise is a place to learn about and report bike crashes, hazards and thefts
No
Yes
Unknown


Canadian Football League (CFL)
Official JSON API providing real-time league, team and player statistics about the CFL
apiKey
Yes
No


Cartola FC
The Cartola FC API serves to check the partial points of your team
No
Yes
Unknown


City Bikes
City Bikes around the world
No
No
Unknown


Cricket Live Scores
Live cricket scores
X-Mashape-Key
Yes
Unknown


Ergast F1
F1 data from the beginning of the world championships in 1950
No
Yes
Unknown


Fitbit
Fitbit Information
OAuth
Yes
Unknown


Football (Soccer) Videos
Embed codes for goals and highlights from Premier League, Bundesliga, Serie A and many more
No
Yes
Yes


Football Prediction
Predictions for upcoming football matches, odds, results and stats
X-Mashape-Key
Yes
Unknown


Football-Data.org
Football Data
No
No
Unknown


JCDecaux Bike
JCDecaux's self-service bicycles
apiKey
Yes
Unknown


NBA Stats
Current and historical NBA Statistics
No
Yes
Unknown


NFL Arrests
NFL Arrest Data
No
No
Unknown


NHL Records and Stats
NHL historical data and statistics
No
Yes
Unknown


Pro Motocross
The RESTful AMA Pro Motocross lap times for every racer on the start gate
No
No
Unknown


Strava
Connect with athletes, activities and more
OAuth
Yes
Unknown


SuredBits
Query sports data, including teams, players, games, scores and statistics
No
No
No


TheSportsDB
Crowd-Sourced Sports Data and Artwork
apiKey
Yes
Yes


Wger
Workout manager data as exercises, muscles or equipment
apiKey
Yes
Unknown



⬆ Back to Index
Test Data



API
Description
Auth
HTTPS
CORS




Adorable Avatars
Generate random cartoon avatars
No
Yes
Unknown


Bacon Ipsum
A Meatier Lorem Ipsum Generator
No
Yes
Unknown


Dicebear Avatars
Generate random pixel-art avatars
No
Yes
No


FakeJSON
Service to generate test and fake data
apiKey
Yes
Yes


FHIR
Fast Healthcare Interoperability Resources test data
No
Yes
Unknown


Hipster Ipsum
Generates Hipster Ipsum text
No
No
Unknown


Identicon
Generates abstract avatar image
No
Yes
Yes


JSONPlaceholder
Fake data for testing and prototyping
No
No
Unknown


Lorem Text
Generates Lorem Ipsum text
X-Mashape-Key
Yes
Unknown


LoremPicsum
Generate placeholder pictures
No
No
Unknown


Loripsum
The ""lorem ipsum"" generator that doesn't suck
No
No
Unknown


RandomUser
Generates random user data
No
Yes
Unknown


RoboHash
Generate random robot/alien avatars
No
Yes
Unknown


This Person Does not Exist
Generates real-life faces of people who do not exist
No
Yes
Unknown


UI Names
Generate random fake names
No
Yes
Unknown


Yes No
Generate yes or no randomly
No
Yes
Unknown



⬆ Back to Index
Text Analysis



API
Description
Auth
HTTPS
CORS




Aylien Text Analysis
A collection of information retrieval and natural language APIs
apiKey
Yes
Unknown


Cloudmersive Natural Language Processing
Natural language processing and text analysis
apiKey
Yes
Yes


Detect Language
Detects text language
apiKey
Yes
Unknown


Google Cloud Natural
Natural language understanding technology, including sentiment, entity and syntax analysis
apiKey
Yes
Unknown


Language Identification
Automatic language detection for any texts, supports over 175 languages
X-Mashape-Key
Yes
Unknown


Semantira
Text Analytics with sentiment analysis, categorization & named entity extraction
OAuth
Yes
Unknown


Watson Natural Language Understanding
Natural language processing for advanced text analysis
OAuth
Yes
Unknown



⬆ Back to Index
Tracking



API
Description
Auth
HTTPS
CORS




Postmon
An API to query Brazilian ZIP codes and orders easily, quickly and free
No
No
Unknown


Sweden
Provides information about parcels in transport
apiKey
No
Unknown


UPS
Shipment and Address information
apiKey
Yes
Unknown


WhatPulse
Small application that measures your keyboard/mouse usage
No
Yes
Unknown



⬆ Back to Index
Transportation



API
Description
Auth
HTTPS
CORS




ADS-B Exchange
Access real-time and historical data of any and all airborne aircraft
No
Yes
Unknown


AIS Hub
Real-time data of any marine and inland vessel equipped with AIS tracking system
apiKey
No
Unknown


AIS Web
Aeronautical information in digital media produced by the Department of Airspace Control (DECEA)
apiKey
No
Unknown


Amadeus Travel Innovation Sandbox
Travel Search - Limited usage
apiKey
Yes
Unknown


Bay Area Rapid Transit
Stations and predicted arrivals for BART
apiKey
No
Unknown


BlaBlaCar
Search car sharing trips
apiKey
Yes
Unknown


Community Transit
Transitland API
No
Yes
Unknown


Goibibo
API for travel search
apiKey
Yes
Unknown


GraphHopper
A-to-B routing with turn-by-turn instructions
apiKey
Yes
Unknown


Icelandic APIs
Open APIs that deliver services in or regarding Iceland
No
Yes
Unknown


Indian Railways
Indian Railways Information
apiKey
No
Unknown


Izi
Audio guide for travellers
apiKey
Yes
Unknown


Metro Lisboa
Delays in subway lines
No
No
No


Navitia
The open API for building cool stuff with transport data
apiKey
Yes
Unknown


REFUGE Restrooms
Provides safe restroom access for transgender, intersex and gender nonconforming individuals
No
Yes
Unknown


Schiphol Airport
Schiphol
apiKey
Yes
Unknown


TransitLand
Transit Aggregation
No
Yes
Unknown


Transport for Atlanta, US
Marta
No
No
Unknown


Transport for Auckland, New Zealand
Auckland Transport
No
Yes
Unknown


Transport for Belgium
Belgian transport API
No
Yes
Unknown


Transport for Berlin, Germany
Third-party VBB API
No
Yes
Unknown


Transport for Bordeaux, France
Bordeaux Métropole public transport and more (France)
apiKey
Yes
Unknown


Transport for Boston, US
MBTA API
No
No
Unknown


Transport for Budapest, Hungary
Budapest public transport API
No
Yes
Unknown


Transport for Chicago, US
CTA
No
No
Unknown


Transport for Czech Republic
Czech transport API
No
Yes
Unknown


Transport for Denver, US
RTD
No
No
Unknown


Transport for Finland
Finnish transport API
No
Yes
Unknown


Transport for Germany
Deutsche Bahn (DB) API
apiKey
No
Unknown


Transport for Grenoble, France
Grenoble public transport
No
No
No


Transport for Honolulu, US
Honolulu Transportation Information
apiKey
No
Unknown


Transport for India
India Public Transport API
apiKey
Yes
Unknown


Transport for Lisbon, Portugal
Data about buses routes, parking and traffic
apiKey
Yes
Unknown


Transport for London, England
TfL API
No
Yes
Unknown


Transport for Madrid, Spain
Madrid BUS transport API
apiKey
No
Unknown


Transport for Manchester, England
TfGM transport network data
apiKey
Yes
No


Transport for Minneapolis, US
NexTrip API
OAuth
No
Unknown


Transport for New York City, US
MTA
apiKey
No
Unknown


Transport for Norway
Norwegian transport API
No
No
Unknown


Transport for Ottawa, Canada
OC Transpo next bus arrival API
No
No
Unknown


Transport for Paris, France
Live schedules made simple
No
No
Unknown


Transport for Paris, France
RATP Open Data API
No
No
Unknown


Transport for Philadelphia, US
SEPTA APIs
No
No
Unknown


Transport for Sao Paulo, Brazil
SPTrans
OAuth
No
Unknown


Transport for Sweden
Public Transport consumer
OAuth
Yes
Unknown


Transport for Switzerland
Official Swiss Public Transport Open Data
apiKey
Yes
Unknown


Transport for Switzerland
Swiss public transport API
No
Yes
Unknown


Transport for The Netherlands
NS, only trains
apiKey
No
Unknown


Transport for The Netherlands
OVAPI, country-wide public transport
No
Yes
Unknown


Transport for Toronto, Canada
TTC
No
Yes
Unknown


Transport for United States
NextBus API
No
No
Unknown


Transport for Vancouver, Canada
TransLink
OAuth
Yes
Unknown


Transport for Victoria, AU
PTV API
apiKey
Yes
Unknown


Transport for Washington, US
Washington Metro transport API
OAuth
Yes
Unknown


Uber
Uber ride requests and price estimation
OAuth
Yes
Yes


WhereIsMyTransport
Platform for public transport data in emerging cities
OAuth
Yes
Unknown



⬆ Back to Index
URL Shorteners



API
Description
Auth
HTTPS
CORS




Bitly
URL shortener and link management
OAuth
Yes
Unknown


CleanURI
URL shortener service
No
Yes
Yes


ClickMeter
Monitor, compare and optimize your marketing links
apiKey
Yes
Unknown


Rebrandly
Custom URL shortener for sharing branded links
apiKey
Yes
Unknown


Relink
Free and secure URL shortener
No
Yes
Yes



⬆ Back to Index
Vehicle



API
Description
Auth
HTTPS
CORS




Brazilian Vehicles and Prices
Vehicles information from Fundação Instituto de Pesquisas Econômicas - Fipe
No
Yes
Unknown


Kelley Blue Book
Vehicle info, pricing, configuration, plus much more
apiKey
Yes
No


Mercedes-Benz
Telematics data, remotely access vehicle functions, car configurator, locate service dealers
apiKey
Yes
No


NHTSA
NHTSA Product Information Catalog and Vehicle Listing
No
Yes
Unknown


Smartcar
Lock and unlock vehicles and get data like odometer reading and location. Works on most new cars
OAuth
Yes
Yes



⬆ Back to Index
Video



API
Description
Auth
HTTPS
CORS




An API of Ice And Fire
Game Of Thrones API
No
Yes
Unknown


Breaking Bad
Breaking Bad API
No
Yes
Unknown


Breaking Bad Quotes
Some Breaking Bad quotes
No
Yes
Unknown


Czech Television
TV programme of Czech TV
No
No
Unknown


Dailymotion
Dailymotion Developer API
OAuth
Yes
Unknown


Harry Potter
Harry Potter API
apiKey
Yes
Yes


Open Movie Database
Movie information
apiKey
Yes
Unknown


Ron Swanson Quotes
Television
No
Yes
Unknown


STAPI
Information on all things Star Trek
No
No
No


SWAPI
Star Wars Information
No
Yes
Unknown


The Lord of the Rings
The Lord of the Rings API
apiKey
Yes
Unknown


TMDb
Community-based movie data
apiKey
Yes
Unknown


Trakt
Movie and TV Data
apiKey
Yes
Yes


TVDB
Television data
apiKey
Yes
Unknown


TVMaze
TV Show Data
No
No
Unknown


Utelly
Check where a tv show or movie is available
X-Mashape-Key
Yes
Unknown


Vimeo
Vimeo Developer API
OAuth
Yes
Unknown


YouTube
Add YouTube functionality to your sites and apps
OAuth
Yes
Unknown



⬆ Back to Index
Weather



API
Description
Auth
HTTPS
CORS




7Timer!
Weather, especially for Astroweather
No
No
Unknown


APIXU
Weather
apiKey
Yes
Unknown


Dark Sky
Weather
apiKey
Yes
No


MetaWeather
Weather
No
Yes
No


Meteorologisk Institutt
Weather and climate data
No
Yes
Unknown


NOAA Climate Data
Weather and climate data
apiKey
Yes
Unknown


ODWeather
Weather and weather webcams
No
No
Unknown


OpenUV
Real-time UV Index Forecast
apiKey
Yes
Unknown


OpenWeatherMap
Weather
apiKey
No
Unknown


Storm Glass
Global marine weather from multiple sources
apiKey
Yes
Yes


Weatherbit
Weather
apiKey
Yes
Unknown


Yahoo! Weather
Weather
apiKey
Yes
Unknown



⬆ Back to Index

"
27,"
The Go Programming Language
Go is an open source programming language that makes it easy to build simple,
reliable, and efficient software.

Gopher image by Renee French, licensed under Creative Commons 3.0 Attributions license.
Our canonical Git repository is located at https://go.googlesource.com/go.
There is a mirror of the repository at https://github.com/golang/go.
Unless otherwise noted, the Go source files are distributed under the
BSD-style license found in the LICENSE file.
Download and Install
Binary Distributions
Official binary distributions are available at https://golang.org/dl/.
After downloading a binary release, visit https://golang.org/doc/install
or load doc/install.html in your web browser for installation
instructions.
Install From Source
If a binary distribution is not available for your combination of
operating system and architecture, visit
https://golang.org/doc/install/source or load doc/install-source.html
in your web browser for source installation instructions.
Contributing
Go is the work of thousands of contributors. We appreciate your help!
To contribute, please read the contribution guidelines:
https://golang.org/doc/contribute.html
Note that the Go project uses the issue tracker for bug reports and
proposals only. See https://golang.org/wiki/Questions for a list of
places to ask questions about the Go language.

"
28,"
🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line
Note: I'm looking for a new (and potentially paid) lead author to help expand this to a more comprehensive Guide. While it's very popoular, it could be both deeper and more helpful. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –jlevy, Holloway

Meta
Basics
Everyday use
Processing files and data
System debugging
One-liners
Obscure but useful
macOS only
Windows only
More resources
Disclaimer


Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.
This work is the result of many authors and translators.
Some of this
originally
appeared
on Quora,
but it has since moved to GitHub, where people more talented than the original author have made numerous improvements.
Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!
Meta
Scope:

This guide is both for beginners and the experienced. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.
This is written for Linux, with the exception of the ""macOS only"" and ""Windows only"" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).
The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.
It includes both ""standard"" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.

Notes:

To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use apt, yum, dnf, pacman, pip or brew (as appropriate) to install new programs.
Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.

Basics


Learn basic Bash. Actually, type man bash and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).


Learn at least one text-based editor well. The nano editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (vi), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)


Finding documentation:

Know how to read official documentation with man (for the inquisitive, man man lists the section numbers, e.g. 1 is ""regular"" commands, 5 is files/conventions, and 8 are for administration). Find man pages with apropos.
Know that some commands are not executables, but Bash builtins, and that you can get help on them with help and help -d. You can find out whether a command is an executable, shell builtin or an alias by using type command.
curl cheat.sh/command will give a brief ""cheat sheet"" with common examples of how to use a shell command.



Learn about redirection of output and input using > and < and pipes using |. Know > overwrites the output file and >> appends. Learn about stdout and stderr.


Learn about file glob expansion with * (and perhaps ? and [...]) and quoting and the difference between double "" and single ' quotes. (See more on variable expansion below.)


Be familiar with Bash job management: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Know ssh, and the basics of passwordless authentication, via ssh-agent, ssh-add, etc.


Basic file management: ls and ls -l (in particular, learn what every column in ls -l means), less, head, tail and tail -f (or even better, less +F), ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -hs *). For filesystem management, df, mount, fdisk, mkfs, lsblk. Learn what an inode is (ls -i or df -i).


Basic network management: ip or ifconfig, dig, traceroute, route.


Learn and use a version control management system, such as git.


Know regular expressions well, and the various flags to grep/egrep. The -i, -o, -v, -A, -B, and -C options are worth knowing.


Learn to use apt-get, yum, dnf or pacman (depending on distro) to find and install packages. And make sure you have pip to install Python-based command-line tools (a few below are easiest to install via pip).


Everyday use


In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).


In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See man readline for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.


Alternatively, if you love vi-style key-bindings, use set -o vi (and set -o emacs to put it back).


For editing long commands, after setting your editor (for example export EDITOR=vim), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.


To see recent commands, use history. Follow with !n (where n is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being !$ for last argument and !! for last command (see ""HISTORY EXPANSION"" in the man page). However, these are often easily replaced with ctrl-r and alt-..


Go to your home directory with cd. Access files relative to your home directory with the ~ prefix (e.g. ~/.bashrc). In sh scripts refer to the home directory as $HOME.


To go back to the previous working directory: cd -.


If you are halfway through typing a command but change your mind, hit alt-# to add a # at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.


Use xargs (or parallel). It's very powerful. Note you can control how many items execute per line (-L) as well as parallelism (-P). If you're not sure if it'll do the right thing, use xargs echo first. Also, -I{} is handy. Examples:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p is a helpful display of the process tree.


Use pgrep and pkill to find or signal processes by name (-f is helpful).


Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid]. For the full list, see man 7 signal


Use nohup or disown if you want a background process to keep running forever.


Check what processes are listening via netstat -lntp or ss -plat (for TCP; add -u for UDP) or lsof -iTCP -sTCP:LISTEN -P -n (which also works on macOS).


See also lsof and fuser for open sockets and files.


See uptime or w to know how long the system has been running.


Use alias to create shortcuts for commonly used commands. For example, alias ll='ls -latr' creates a new alias ll.


Save aliases, shell settings, and functions you commonly use in ~/.bashrc, and arrange for login shells to source it. This will make your setup available in all your shell sessions.


Put the settings of environment variables as well as commands that should be executed when you login in ~/.bash_profile. Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs.


Synchronize your configuration files (e.g. .bashrc and .bash_profile) among various computers with Git.


Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. ""$FOO"". Prefer the -0 or -print0 options to enable null characters to delimit filenames, e.g. locate -0 pattern | xargs -0 ls -al or find / -print0 -type d | xargs -0 ls -al. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using IFS=$'\n'.


In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:


      set -euo pipefail
      trap ""echo 'error: Script failed: see failed command above'"" ERR

In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: ${name:?error message}. For example, if a Bash script requires a single argument, just write input_file=${1:?usage: $0 input_file}. Using a default value if a variable is empty: ${name:-default}. If you want to have an additional (optional) parameter added to the previous example, you can use something like output_file=${2:-logfile}. If $2 is omitted and thus empty, output_file will be set to logfile. Arithmetic expansion: i=$(( (i + 1) % 5 )). Sequences: {1..10}. Trimming of strings: ${var%suffix} and ${var#prefix}. For example if var=foo.pdf, then echo ${var%.pdf}.txt prints foo.txt.


Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.


The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like {1..20} cannot be expressed with variables using {$a..$b}. Use seq or a for loop instead, e.g., seq $a $b or for((i=a; i<=b; i++)); do ... ; done.)


The output of a command can be treated like a file via <(some command) (known as process substitution). For example, compare local /etc/hosts with a remote one:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:

{
      # Your code here
}

A ""here document"" allows redirection of multiple lines of input as if from a file:

cat <<EOF
input
on multiple lines
EOF



In Bash, redirect both standard output and standard error via: some-command >logfile 2>&1 or some-command &>logfile. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add </dev/null.


Use man ascii for a good ASCII table, with hex and decimal values. For general encoding info, man unicode, man utf-8, and man latin1 are helpful.


Use screen or tmux to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. byobu can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is dtach.


In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful, e.g. to access web sites from a remote server.


It can be useful to make a few optimizations to your ssh configuration; for example, this ~/.ssh/config contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: StrictHostKeyChecking=no, ForwardAgent=yes


Consider mosh an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).


To get the permissions on a file in octal form, which is useful for system configuration but not available in ls and easy to bungle, use something like


      stat -c '%A %a %n' /etc/timezone


For interactive selection of values from the output of another command, use percol or fzf.


For interaction with files based on the output of another command (like git), use fpp (PathPicker).


For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
python -m SimpleHTTPServer 7777 (for port 7777 and Python 2) and python -m http.server 7777 (for port 7777 and Python 3).


For running a command as another user, use sudo. Defaults to running as root; use -u to specify another user. Use -i to login as that user (you will be asked for your password).


For switching the shell to another user, use su username or su - username. The latter with ""-"" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.


Know about the 128K limit on command lines. This ""Argument list too long"" error is common when wildcard matching large numbers of files. (When this happens alternatives like find and xargs may help.)


For a basic calculator (and of course access to Python in general), use the python interpreter. For example,


>>> 2+3
5

Processing files and data


To locate a file by name in the current directory, find . -iname '*something*' (or similar). To find a file anywhere by name, use locate something (but bear in mind updatedb may not have indexed recently created files).


For general searching through source or data files, there are several options more advanced or faster than grep -r, including (in rough order from older to newer) ack, ag (""the silver searcher""), and rg (ripgrep).


To convert HTML to text: lynx -dump -stdin


For Markdown, HTML, and all kinds of document conversion, try pandoc. For example, to convert a Markdown document to Word format: pandoc README.md --from markdown --to docx -o temp.docx


If you must handle XML, xmlstarlet is old but good.


For JSON, use jq. For interactive use, also see jid and jiq.


For YAML, use shyaml.


For Excel or CSV files, csvkit provides in2csv, csvcut, csvjoin, csvgrep, etc.


For Amazon S3, s3cmd is convenient and s4cmd is faster. Amazon's aws and the improved saws are essential for other AWS-related tasks.


Know about sort and uniq, including uniq's -u and -d options -- see one-liners below. See also comm.


Know about cut, paste, and join to manipulate text files. Many people use cut but forget about join.


Know about wc to count newlines (-l), characters (-m), words (-w) and bytes (-c).


Know about tee to copy from stdin to a file and also to stdout, as in ls -al | tee file.txt.


For more complex calculations, including grouping, reversing fields, and statistical calculations, consider datamash.


Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set LANG or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using export LC_ALL=C.


You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in TZ=Pacific/Fiji date.


Know basic awk and sed for simple data munging. See One-liners for examples.


To replace all occurrences of a string in place, in one or more files:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

To rename multiple files and/or search and replace within files, try repren. (In some cases the rename command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


For monitoring progress when processing files, use pv, pycp, pmonitor, progress, rsync --progress, or, for block-level copying, dd status=progress.


Use shuf to shuffle or select random lines from a file.


Know sort's options. For numbers, use -n, or -h for handling human-readable numbers (e.g. from du -h). Know how keys work (-t and -k). In particular, watch out that you need to write -k1,1 to sort by only the first field; -k1 means sort according to the whole line. Stable sort (sort -s) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use sort -k1,1 | sort -s -k2,2.


If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write $'\t' (the latter is better as you can copy/paste it).


The standard tools for patching source code are diff and patch. See also diffstat for summary statistics of a diff and sdiff for a side-by-side diff. Note diff -r works for entire directories. Use diff -r tree1 tree2 | diffstat for a summary of changes. Use vimdiff to compare and edit files.


For binary files, use hd, hexdump or xxd for simple hex dumps and bvi, hexedit or biew for binary editing.


Also for binary files, strings (plus grep, etc.) lets you find bits of text.


For binary diffs (delta compression), use xdelta3.


To convert text encodings, try iconv. Or uconv for more advanced use; it supports some advanced Unicode things. For example:


      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt


To split files into pieces, see split (to split by size) and csplit (to split by a pattern).


Date and time: To get the current date and time in the helpful ISO 8601 format, use date -u +""%Y-%m-%dT%H:%M:%SZ"" (other options are problematic). To manipulate date and time expressions, use dateadd, datediff, strptime etc. from dateutils.


Use zless, zmore, zcat, and zgrep to operate on compressed files.


File attributes are settable via chattr and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  sudo chattr +i /critical/directory/or/file


Use getfacl and setfacl to save and restore file permissions. For example:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

To create empty files quickly, use truncate (creates sparse file), fallocate (ext4, xfs, btrfs and ocfs2 filesystems), xfs_mkfile (almost any filesystems, comes in xfsprogs package), mkfile (for Unix-like systems like Solaris, Mac OS).

System debugging


For web debugging, curl and curl -I are handy, or their wget equivalents, or the more modern httpie.


To know current cpu/disk status, the classic tools are top (or the better htop), iostat, and iotop. Use iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


For network connection details, use netstat and ss.


For a quick overview of what's happening on a system, dstat is especially useful. For broadest overview with details, use glances.


To know memory status, run and understand the output of free and vmstat. In particular, be aware the ""cached"" value is memory held by the Linux kernel as file cache, so effectively counts toward the ""free"" value.


Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run kill -3 <pid> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's jps, jstat, jstack, jmap are useful. SJK tools are more advanced.


Use mtr as a better traceroute, to identify network issues.


For looking at why a disk is full, ncdu saves time over the usual commands like du -sh *.


To find which socket or process is using bandwidth, try iftop or nethogs.


The ab tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try siege.


For more serious network debugging, wireshark, tshark, or ngrep.


Know about strace and ltrace. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (-c), and the ability to attach to a running process (-p). Use trace child option (-f) to avoid missing important calls.


Know about ldd to check shared libraries etc — but never run it on untrusted files.


Know how to connect to a running process with gdb and get its stack traces.


Use /proc. It's amazingly helpful sometimes when debugging live problems. Examples: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (where xxx is the process id or pid).


When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.


For deeper systems and performance analyses, look at stap (SystemTap), perf, and sysdig.


Check what OS you're on with uname or uname -a (general Unix/kernel info) or lsb_release -a (Linux distro info).


Use dmesg whenever something's acting really funny (it could be hardware or driver issues).


If you delete a file and it doesn't free up expected disk space as reported by du, check whether the file is in use by a process:
lsof | grep deleted | grep ""filename-of-my-big-file""


One-liners
A few examples of piecing together commands:

It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via sort/uniq. Suppose a and b are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the -T option if /tmp is on a small root partition.) See also the note about LC_ALL above and sort's -u option (left out for clarity below).

      sort a b | uniq > c   # c is a union b
      sort a b | uniq -d > c   # c is a intersect b
      sort a b b | uniq -u > c   # c is set difference a - b

Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Use grep . * to quickly examine the contents of all files in a directory (so each line is paired with the filename), or head -100 * (so each file has a heading). This can be useful for directories filled with config settings like those in /sys, /proc, /etc.


Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):


      awk '{ x += $3 } END { print x }' myfile

To see sizes/dates on a tree of files, this is like a recursive ls -l but is easier to read than ls -lR:

      find . -type f -ls

Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an acct_id parameter that is present in the URL. If you want a tally of how many requests for each acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


To continuously monitor changes, use watch, e.g. check changes to files in a directory with watch -d -n 2 'ls -rtlh | tail' or to network settings while troubleshooting your wifi settings with watch -d -n 2 ifconfig.


Run this function to get a random tip from this document (parses Markdown and extracts an item):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v ""(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]"" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscure but useful


expr: perform arithmetic or boolean operations or evaluate regular expressions


m4: simple macro processor


yes: print a string a lot


cal: nice calendar


env: run a command (useful in scripts)


printenv: print out environment variables (useful in debugging and scripts)


look: find English words (or lines in a file) beginning with a string


cut, paste and join: data manipulation


fmt: format text paragraphs


pr: format text into pages/columns


fold: wrap lines of text


column: format text fields into aligned, fixed-width columns or tables


expand and unexpand: convert between tabs and spaces


nl: add line numbers


seq: print numbers


bc: calculator


factor: factor integers


gpg: encrypt and sign files


toe: table of terminfo entries


nc: network debugging and data transfer


socat: socket relay and tcp port forwarder (similar to netcat)


slurm: network traffic visualization


dd: moving data between files or devices


file: identify type of a file


tree: display directories and subdirectories as a nesting tree; like ls but recursive


stat: file info


time: execute and time a command


timeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.


lockfile: create semaphore file that can only be removed by rm -f


logrotate: rotate, compress and mail logs.


watch: run a command repeatedly, showing results and/or highlighting changes


when-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.


tac: print files in reverse


comm: compare sorted files line by line


strings: extract text from binary files


tr: character translation or manipulation


iconv or uconv: conversion for text encodings


split and csplit: splitting files


sponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file


units: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)


apg: generates random passwords


xz: high-ratio file compression


ldd: dynamic library info


nm: symbols from object files


ab or wrk: benchmarking web servers


strace: system call debugging


mtr: better traceroute for network debugging


cssh: visual concurrent shell


rsync: sync files and folders over SSH or in local file system


wireshark and tshark: packet capture and network debugging


ngrep: grep for the network layer


host and dig: DNS lookups


lsof: process file descriptor and socket info


dstat: useful system stats


glances: high level, multi-subsystem overview


iostat: Disk usage stats


mpstat: CPU usage stats


vmstat: Memory usage stats


htop: improved version of top


last: login history


w: who's logged on


id: user/group identity info


sar: historic system stats


iftop or nethogs: network utilization by socket or process


ss: socket statistics


dmesg: boot and system error messages


sysctl: view and configure Linux kernel parameters at run time


hdparm: SATA/ATA disk manipulation/performance


lsblk: list block devices: a tree view of your disks and disk partitions


lshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.


lsmod and modinfo: List and show details of kernel modules.


fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations ""useful""


macOS only
These are items relevant only on macOS.


Package management with brew (Homebrew) and/or port (MacPorts). These can be used to install on macOS many of the above commands.


Copy output of any command to a desktop app with pbcopy and paste input from one with pbpaste.


To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -> Profiles -> Keyboard and select ""Use Option as Meta key"".


To open a file with a desktop app, use open or open -a /Applications/Whatever.app.


Spotlight: Search files with mdfind and list metadata (such as photo EXIF info) with mdls.


Be aware macOS is based on BSD Unix, and many commands (for example ps, ls, tail, awk, sed) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading ""BSD General Commands Manual."" In some cases GNU versions can be installed, too (such as gawk and gsed for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or perl) or test carefully.


To get macOS release information, use sw_vers.


Windows only
These items are relevant only on Windows.
Ways to obtain Unix tools under Windows


Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.


On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.


If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.


Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.


Useful Windows command-line tools


You can perform and script most Windows system administration tasks from the command line by learning and using wmic.


Native command-line Windows networking tools you may find useful include ping, ipconfig, tracert, and netstat.


You can perform many useful Windows tasks by invoking the Rundll32 command.


Cygwin tips and tricks


Install additional Unix programs with the Cygwin's package manager.


Use mintty as your command-line window.


Access the Windows clipboard through /dev/clipboard.


Run cygstart to open an arbitrary file through its registered application.


Access the Windows registry with regtool.


Note that a C:\ Windows drive path becomes /cygdrive/c under Cygwin, and that Cygwin's / appears under C:\cygwin on Windows. Convert between Cygwin and Windows-style file paths with cygpath. This is most useful in scripts that invoke Windows programs.


More resources

awesome-shell: A curated list of shell tools and resources.
awesome-osx-command-line: A more in-depth guide for the macOS command line.
Strict mode for writing better shell scripts.
shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.
Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.
Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name

Disclaimer
With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)
License

This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.

"
29,"





Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. For
more information on using Node.js, see the Node.js Website.
The Node.js project uses an open governance model. The
OpenJS Foundation provides support for the project.
This project is bound by a Code of Conduct.
Table of Contents

Support
Release Types

Download

Current and LTS Releases
Nightly Releases
API Documentation


Verifying Binaries


Building Node.js
Security
Contributing to Node.js
Current Project Team Members

TSC (Technical Steering Committee)
Collaborators
Release Keys



Support
Looking for help? Check out the
instructions for getting support.
Release Types

Current: Under active development. Code for the Current release is in the
branch for its major version number (for example,
v10.x). Node.js releases a new
major version every 6 months, allowing for breaking changes. This happens in
April and October every year. Releases appearing each October have a support
life of 8 months. Releases appearing each April convert to LTS (see below)
each October.
LTS: Releases that receive Long-term Support, with a focus on stability
and security. Every even-numbered major version will become an LTS release.
LTS releases receive 12 months of Active LTS support and a further 18 months
of Maintenance. LTS release lines have alphabetically-ordered codenames,
beginning with v4 Argon. There are no breaking changes or feature additions,
except in some special circumstances.
Nightly: Code from the Current branch built every 24-hours when there are
changes. Use with caution.

Current and LTS releases follow Semantic Versioning. A
member of the Release Team signs each Current and LTS release.
For more information, see the
Release README.
Download
Binaries, installers, and source tarballs are available at
https://nodejs.org/en/download/.
Current and LTS Releases
https://nodejs.org/download/release/
The latest directory is an
alias for the latest Current release. The latest-codename directory is an
alias for the latest release from an LTS line. For example, the
latest-carbon directory
contains the latest Carbon (Node.js 8) release.
Nightly Releases
https://nodejs.org/download/nightly/
Each directory name and filename contains a date (in UTC time) and the commit
SHA at the HEAD of the release.
API Documentation
Documentation for the latest Current release is at https://nodejs.org/api/.
Version-specific documentation is available in each release directory in the
docs subdirectory. Version-specific documentation is also at
https://nodejs.org/download/docs/.
Verifying Binaries
Download directories contain a SHASUMS256.txt file with SHA checksums for the
files.
To download SHASUMS256.txt using curl:
$ curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txt
To check that a downloaded file matches the checksum, run
it through sha256sum with a command such as:
$ grep node-vx.y.z.tar.gz SHASUMS256.txt | sha256sum -c -
For Current and LTS, the GPG detached signature of SHASUMS256.txt is in
SHASUMS256.txt.sig. You can use it with gpg to verify the integrity of
SHASUM256.txt. You will first need to import
the GPG keys of individuals authorized to create releases. To
import the keys:
$ gpg --keyserver pool.sks-keyservers.net --recv-keys DD8F2338BAE7501E3DD5AC78C273792F7D83545D
See the bottom of this README for a full script to import active release keys.
Next, download the SHASUMS256.txt.sig for the release:
$ curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txt.sig
Then use gpg --verify SHASUMS256.txt.sig SHASUMS256.txt to verify
the file's signature.
Building Node.js
See BUILDING.md for instructions on how to build Node.js from
source and a list of supported platforms.
Security
For information on reporting security vulnerabilities in Node.js, see
SECURITY.md.
Contributing to Node.js

Contributing to the project
Working Groups
Strategic Initiatives

Current Project Team Members
For information about the governance of the Node.js project, see
GOVERNANCE.md.
TSC (Technical Steering Committee)

addaleax -
Anna Henningsen <anna@addaleax.net> (she/her)
apapirovski -
Anatoli Papirovski <apapirovski@mac.com> (he/him)
BethGriggs -
Beth Griggs <Bethany.Griggs@uk.ibm.com> (she/her)
ChALkeR -
Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)
cjihrig -
Colin Ihrig <cjihrig@gmail.com> (he/him)
danbev -
Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)
fhinkel -
Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)
Fishrock123 -
Jeremiah Senkpiel <fishrock123@rocketmail.com>
gabrielschulhof -
Gabriel Schulhof <gabriel.schulhof@intel.com>
gireeshpunathil -
Gireesh Punathil <gpunathi@in.ibm.com> (he/him)
jasnell -
James M Snell <jasnell@gmail.com> (he/him)
joyeecheung -
Joyee Cheung <joyeec9h3@gmail.com> (she/her)
mcollina -
Matteo Collina <matteo.collina@gmail.com> (he/him)
mhdawson -
Michael Dawson <michael_dawson@ca.ibm.com> (he/him)
MylesBorins -
Myles Borins <myles.borins@gmail.com> (he/him)
sam-github -
Sam Roberts <vieuxtech@gmail.com>
targos -
Michaël Zasso <targos@protonmail.com> (he/him)
thefourtheye -
Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)
tniessen -
Tobias Nießen <tniessen@tnie.de>
Trott -
Rich Trott <rtrott@gmail.com> (he/him)

TSC Emeriti

bnoordhuis -
Ben Noordhuis <info@bnoordhuis.nl>
chrisdickinson -
Chris Dickinson <christopher.s.dickinson@gmail.com>
evanlucas -
Evan Lucas <evanlucas@me.com> (he/him)
gibfahn -
Gibson Fahnestock <gibfahn@gmail.com> (he/him)
indutny -
Fedor Indutny <fedor.indutny@gmail.com>
isaacs -
Isaac Z. Schlueter <i@izs.me>
joshgav -
Josh Gavant <josh.gavant@outlook.com>
mscdex -
Brian White <mscdex@mscdex.net>
nebrius -
Bryan Hughes <bryan@nebri.us>
ofrobots -
Ali Ijaz Sheikh <ofrobots@google.com> (he/him)
orangemocha -
Alexis Campailla <orangemocha@nodejs.org>
piscisaureus -
Bert Belder <bertbelder@gmail.com>
rvagg -
Rod Vagg <r@va.gg>
shigeki -
Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)
TimothyGu -
Tiancheng ""Timothy"" Gu <timothygu99@gmail.com> (he/him)
trevnorris -
Trevor Norris <trev.norris@gmail.com>

Collaborators

addaleax -
Anna Henningsen <anna@addaleax.net> (she/her)
ak239 -
Aleksei Koziatinskii <ak239spb@gmail.com>
AndreasMadsen -
Andreas Madsen <amwebdk@gmail.com> (he/him)
antsmartian -
Anto Aravinth <anto.aravinth.cse@gmail.com> (he/him)
apapirovski -
Anatoli Papirovski <apapirovski@mac.com> (he/him)
aqrln -
Alexey Orlenko <eaglexrlnk@gmail.com> (he/him)
bcoe -
Ben Coe <bencoe@gmail.com> (he/him)
bengl -
Bryan English <bryan@bryanenglish.com> (he/him)
benjamingr -
Benjamin Gruenbaum <benjamingr@gmail.com>
BethGriggs -
Beth Griggs <Bethany.Griggs@uk.ibm.com> (she/her)
bmeck -
Bradley Farias <bradley.meck@gmail.com>
bmeurer -
Benedikt Meurer <benedikt.meurer@gmail.com>
bnoordhuis -
Ben Noordhuis <info@bnoordhuis.nl>
boneskull -
Christopher Hiller <boneskull@boneskull.com> (he/him)
BridgeAR -
Ruben Bridgewater <ruben@bridgewater.de> (he/him)
bzoz -
Bartosz Sosnowski <bartosz@janeasystems.com>
calvinmetcalf -
Calvin Metcalf <calvin.metcalf@gmail.com>
cclauss -
Christian Clauss <cclauss@me.com> (he/him)
ChALkeR -
Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)
cjihrig -
Colin Ihrig <cjihrig@gmail.com> (he/him)
claudiorodriguez -
Claudio Rodriguez <cjrodr@yahoo.com>
codebytere -
Shelley Vohr <codebytere@gmail.com> (she/her)
danbev -
Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)
davisjam -
Jamie Davis <davisjam@vt.edu> (he/him)
devnexen -
David Carlier <devnexen@gmail.com>
devsnek -
Gus Caplan <me@gus.host> (he/him)
digitalinfinity -
Hitesh Kanwathirtha <digitalinfinity@gmail.com> (he/him)
edsadr -
Adrian Estrada <edsadr@gmail.com> (he/him)
eljefedelrodeodeljefe -
Robert Jefe Lindstaedt <robert.lindstaedt@gmail.com>
eugeneo -
Eugene Ostroukhov <eostroukhov@google.com>
evanlucas -
Evan Lucas <evanlucas@me.com> (he/him)
fhinkel -
Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)
Fishrock123 -
Jeremiah Senkpiel <fishrock123@rocketmail.com>
gabrielschulhof -
Gabriel Schulhof <gabriel.schulhof@intel.com>
gdams -
George Adams <george.adams@uk.ibm.com> (he/him)
geek -
Wyatt Preul <wpreul@gmail.com>
gengjiawen -
Jiawen Geng <technicalcute@gmail.com>
gibfahn -
Gibson Fahnestock <gibfahn@gmail.com> (he/him)
gireeshpunathil -
Gireesh Punathil <gpunathi@in.ibm.com> (he/him)
guybedford -
Guy Bedford <guybedford@gmail.com> (he/him)
hashseed -
Yang Guo <yangguo@chromium.org> (he/him)
hiroppy -
Yuta Hiroto <hello@hiroppy.me> (he/him)
iarna -
Rebecca Turner <me@re-becca.org>
indutny -
Fedor Indutny <fedor.indutny@gmail.com>
italoacasas -
Italo A. Casas <me@italoacasas.com> (he/him)
JacksonTian -
Jackson Tian <shyvo1987@gmail.com>
jasnell -
James M Snell <jasnell@gmail.com> (he/him)
jbergstroem -
Johan Bergström <bugs@bergstroem.nu>
jdalton -
John-David Dalton <john.david.dalton@gmail.com>
jkrems -
Jan Krems <jan.krems@gmail.com> (he/him)
joaocgreis -
João Reis <reis@janeasystems.com>
joyeecheung -
Joyee Cheung <joyeec9h3@gmail.com> (she/her)
julianduque -
Julian Duque <julianduquej@gmail.com> (he/him)
JungMinu -
Minwoo Jung <nodecorelab@gmail.com> (he/him)
kfarnung -
Kyle Farnung <kfarnung@microsoft.com> (he/him)
lance -
Lance Ball <lball@redhat.com> (he/him)
legendecas -
Chengzhong Wu <legendecas@gmail.com> (he/him)
Leko -
Shingo Inoue <leko.noor@gmail.com> (he/him)
lpinca -
Luigi Pinca <luigipinca@gmail.com> (he/him)
lundibundi -
Denys Otrishko <shishugi@gmail.com> (he/him)
maclover7 -
Jon Moss <me@jonathanmoss.me> (he/him)
mafintosh
Mathias Buus <mathiasbuus@gmail.com> (he/him)
mcollina -
Matteo Collina <matteo.collina@gmail.com> (he/him)
mhdawson -
Michael Dawson <michael_dawson@ca.ibm.com> (he/him)
misterdjules -
Julien Gilli <jgilli@nodejs.org>
mmarchini -
Matheus Marchini <mat@mmarchini.me>
MoonBall -
Chen Gang <gangc.cxy@foxmail.com>
mscdex -
Brian White <mscdex@mscdex.net>
MylesBorins -
Myles Borins <myles.borins@gmail.com> (he/him)
not-an-aardvark -
Teddy Katz <teddy.katz@gmail.com> (he/him)
ofrobots -
Ali Ijaz Sheikh <ofrobots@google.com> (he/him)
oyyd -
Ouyang Yadong <oyydoibh@gmail.com> (he/him)
princejwesley -
Prince John Wesley <princejohnwesley@gmail.com>
psmarshall -
Peter Marshall <petermarshall@chromium.org> (he/him)
Qard -
Stephen Belanger <admin@stephenbelanger.com> (he/him)
refack -
Refael Ackermann (רפאל פלחי) <refack@gmail.com> (he/him/הוא/אתה)
richardlau -
Richard Lau <riclau@uk.ibm.com>
ronkorving -
Ron Korving <ron@ronkorving.nl>
rubys -
Sam Ruby <rubys@intertwingly.net>
rvagg -
Rod Vagg <rod@vagg.org>
ryzokuken -
Ujjwal Sharma <usharma1998@gmail.com> (he/him)
saghul -
Saúl Ibarra Corretgé <saghul@gmail.com>
sam-github -
Sam Roberts <vieuxtech@gmail.com>
santigimeno -
Santiago Gimeno <santiago.gimeno@gmail.com>
sebdeckers -
Sebastiaan Deckers <sebdeckers83@gmail.com>
seishun -
Nikolai Vavilov <vvnicholas@gmail.com>
shigeki -
Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)
shisama -
Masashi Hirano <shisama07@gmail.com> (he/him)
silverwind -
Roman Reiss <me@silverwind.io>
srl295 -
Steven R Loomis <srloomis@us.ibm.com>
starkwang -
Weijia Wang <starkwang@126.com>
targos -
Michaël Zasso <targos@protonmail.com> (he/him)
thefourtheye -
Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)
thekemkid -
Glen Keane <glenkeane.94@gmail.com> (he/him)
TimothyGu -
Tiancheng ""Timothy"" Gu <timothygu99@gmail.com> (he/him)
tniessen -
Tobias Nießen <tniessen@tnie.de>
trevnorris -
Trevor Norris <trev.norris@gmail.com>
trivikr -
Trivikram Kamat <trivikr.dev@gmail.com>
Trott -
Rich Trott <rtrott@gmail.com> (he/him)
vdeturckheim -
Vladimir de Turckheim <vlad2t@hotmail.com> (he/him)
vkurchatkin -
Vladimir Kurchatkin <vladimir.kurchatkin@gmail.com>
watilde -
Daijiro Wachi <daijiro.wachi@gmail.com> (he/him)
watson -
Thomas Watson <w@tson.dk>
XadillaX -
Khaidi Chu <i@2333.moe> (he/him)
yhwang -
Yihong Wang <yh.wang@ibm.com>
yorkie -
Yorkie Liu <yorkiefixer@gmail.com>
yosuke-furukawa -
Yosuke Furukawa <yosuke.furukawa@gmail.com>
ZYSzys -
Yongsheng Zhang <zyszys98@gmail.com> (he/him)

Collaborator Emeriti

andrasq -
Andras <andras@kinvey.com>
AnnaMag -
Anna M. Kedzierska <anna.m.kedzierska@gmail.com>
brendanashworth -
Brendan Ashworth <brendan.ashworth@me.com>
estliberitas -
Alexander Makarenko <estliberitas@gmail.com>
chrisdickinson -
Chris Dickinson <christopher.s.dickinson@gmail.com>
DavidCai1993 -
David Cai <davidcai1993@yahoo.com> (he/him)
firedfox -
Daniel Wang <wangyang0123@gmail.com>
imran-iq -
Imran Iqbal <imran@imraniqbal.org>
imyller -
Ilkka Myller <ilkka.myller@nodefield.com>
isaacs -
Isaac Z. Schlueter <i@izs.me>
jasongin -
Jason Ginchereau <jasongin@microsoft.com>
jhamhader -
Yuval Brik <yuval@brik.org.il>
joshgav -
Josh Gavant <josh.gavant@outlook.com>
kunalspathak -
Kunal Pathak <kunal.pathak@microsoft.com>
lucamaraschi -
Luca Maraschi <luca.maraschi@gmail.com> (he/him)
lxe -
Aleksey Smolenchuk <lxe@lxe.co>
matthewloring -
Matthew Loring <mattloring@google.com>
micnic -
Nicu Micleușanu <micnic90@gmail.com> (he/him)
mikeal -
Mikeal Rogers <mikeal.rogers@gmail.com>
monsanto -
Christopher Monsanto <chris@monsan.to>
Olegas -
Oleg Elifantiev <oleg@elifantiev.ru>
orangemocha -
Alexis Campailla <orangemocha@nodejs.org>
othiym23 -
Forrest L Norvell <ogd@aoaioxxysz.net> (he/him)
petkaantonov -
Petka Antonov <petka_antonov@hotmail.com>
phillipj -
Phillip Johnsen <johphi@gmail.com>
piscisaureus -
Bert Belder <bertbelder@gmail.com>
pmq20 -
Minqi Pan <pmq2001@gmail.com>
rlidwka -
Alex Kocharin <alex@kocharin.ru>
rmg -
Ryan Graham <r.m.graham@gmail.com>
robertkowalski -
Robert Kowalski <rok@kowalski.gd>
romankl -
Roman Klauke <romaaan.git@gmail.com>
RReverser -
Ingvar Stepanyan <me@rreverser.com>
stefanmb -
Stefan Budeanu <stefan@budeanu.com>
tellnes -
Christian Tellnes <christian@tellnes.no>
thlorenz -
Thorsten Lorenz <thlorenz@gmx.de>
tunniclm -
Mike Tunnicliffe <m.j.tunnicliffe@gmail.com>
vsemozhetbyt -
Vse Mozhet Byt <vsemozhetbyt@gmail.com> (he/him)
whitlockjc -
Jeremy Whitlock <jwhitlock@apache.org>

Collaborators follow the COLLABORATOR_GUIDE.md in
maintaining the Node.js project.
Release Keys
GPG keys used to sign Node.js releases:

Beth Griggs <bethany.griggs@uk.ibm.com>
4ED778F539E3634C779C87C6D7062848A1AB005C
Colin Ihrig <cjihrig@gmail.com>
94AE36675C464D64BAFA68DD7434390BDBE9B9C5
Evan Lucas <evanlucas@me.com>
B9AE9905FFD7803F25714661B63B535A4C206CA9
Gibson Fahnestock <gibfahn@gmail.com>
77984A986EBC2AA786BC0F66B01FBB92821C587A
James M Snell <jasnell@keybase.io>
71DCFD284A79C3B38668286BC97EC7A07EDE3FC1
Jeremiah Senkpiel <fishrock@keybase.io>
FD3A5288F042B6850C66B31F09FE44734EB7990E
Michaël Zasso <targos@protonmail.com>
8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600
Myles Borins <myles.borins@gmail.com>
C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8
Rod Vagg <rod@vagg.org>
DD8F2338BAE7501E3DD5AC78C273792F7D83545D
Ruben Bridgewater <ruben@bridgewater.de>
A48C2BEE680E841632CD4E44F07496B3EB3C1762
Shelley Vohr <shelley.vohr@gmail.com>
B9E2F5981AA6E0CD28160D9FF13993A75599653C

To import the full set of trusted release keys:
gpg --keyserver pool.sks-keyservers.net --recv-keys 4ED778F539E3634C779C87C6D7062848A1AB005C
gpg --keyserver pool.sks-keyservers.net --recv-keys B9E2F5981AA6E0CD28160D9FF13993A75599653C
gpg --keyserver pool.sks-keyservers.net --recv-keys 94AE36675C464D64BAFA68DD7434390BDBE9B9C5
gpg --keyserver pool.sks-keyservers.net --recv-keys B9AE9905FFD7803F25714661B63B535A4C206CA9
gpg --keyserver pool.sks-keyservers.net --recv-keys 77984A986EBC2AA786BC0F66B01FBB92821C587A
gpg --keyserver pool.sks-keyservers.net --recv-keys 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1
gpg --keyserver pool.sks-keyservers.net --recv-keys FD3A5288F042B6850C66B31F09FE44734EB7990E
gpg --keyserver pool.sks-keyservers.net --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600
gpg --keyserver pool.sks-keyservers.net --recv-keys C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8
gpg --keyserver pool.sks-keyservers.net --recv-keys DD8F2338BAE7501E3DD5AC78C273792F7D83545D
gpg --keyserver pool.sks-keyservers.net --recv-keys A48C2BEE680E841632CD4E44F07496B3EB3C1762
See the section above on Verifying Binaries for how to
use these keys to verify a downloaded file.
Other keys used to sign some previous releases:

Chris Dickinson <christopher.s.dickinson@gmail.com>
9554F04D7259F04124DE6B476D5A82AC7E37093B
Isaac Z. Schlueter <i@izs.me>
93C7E9E91B49E432C2F75674B0A78B0A6C481CF6
Italo A. Casas <me@italoacasas.com>
56730D5401028683275BD23C23EFEFE93C4CFFFE
Julien Gilli <jgilli@fastmail.fm>
114F43EE0176B71C7BC219DD50A3051F888C628D
Timothy J Fontaine <tjfontaine@gmail.com>
7937DFD2AB06298B2293C3187D33FF9D0246406D


"
30,"
点击关注公众号及时获取笔主最新更新文章，并可免费领取本文档配套的《Java面试突击》以及Java工程师必备学习资源。
推荐一下阿里云双12的活动，优惠福利比双11还大系列，新老用户同享！（新用户 ECS 1 核 2g 一年只要 89!）













Sponsor





推荐使用  https://snailclimb.gitee.io/javaguide 在线阅读，在线阅读内容本仓库同步一致。这种方式阅读的优势在于：阅读体验会更好。
目录

Java

基础
容器
并发
JVM
I/O
Java 8
优雅 Java 代码必备实践(Java编程规范)


网络
操作系统

Linux相关


数据结构与算法

数据结构
算法


数据库

MySQL
Redis
数据库扩展


系统设计

常用框架(Spring/SpringBoot、Zookeeper ... )
数据通信/中间件(消息队列、RPC ... )
权限认证
分布式 & 微服务

API 网关
配置中心
唯一 id 生成
服务治理：服务注册与发现、服务路由控制


架构
设计模式(工厂模式、单例模式 ... )


面试指南

备战面试
面经


Java学习常见问题汇总
工具

Git
Docker


资源

书单
Github榜单


待办
说明

Java
基础

Java 基础知识回顾
Java 基础知识疑难点/易错点
一些重要的Java程序设计题
J2EE 基础知识回顾

容器

Java容器常见面试题/知识点总结
ArrayList 源码学习
LinkedList 源码学习
HashMap(JDK1.8)源码学习

并发

Java 并发基础常见面试题总结
Java 并发进阶常见面试题总结
并发容器总结
Java线程池学习总结
乐观锁与悲观锁
JUC 中的 Atomic 原子类总结
AQS 原理以及 AQS 同步组件总结

JVM

一 Java内存区域
二 JVM垃圾回收
三 JDK 监控和故障处理工具
四 类文件结构
五 类加载过程
六 类加载器
【待完成】八 最重要的 JVM 参数指南（翻译完善了一半）
九 JVM 配置常用参数和常用 GC 调优策略

I/O

BIO,NIO,AIO 总结 
Java IO 与 NIO系列文章

Java 8

Java 8 新特性总结
Java 8 学习资源推荐
Java8 forEach 指南

优雅 Java 代码必备实践(Java编程规范)

Java 编程规范以及优雅 Java 代码实践总结

网络

计算机网络常见面试题
计算机网络基础知识总结
HTTPS中的TLS

操作系统
Linux相关

后端程序员必备的 Linux 基础知识
Shell 编程入门

数据结构与算法
数据结构

不了解布隆过滤器？一文给你整的明明白白！
数据结构知识学习与面试

算法

算法学习资源推荐
几道常见的字符串算法题总结 
几道常见的链表算法题总结 
剑指offer部分编程题
公司真题
回溯算法经典案例之N皇后问题

数据库
MySQL

【推荐】MySQL/数据库 知识点总结
阿里巴巴开发手册数据库部分的一些最佳实践
一千行MySQL学习笔记
MySQL高性能优化规范建议
数据库索引总结
事务隔离级别(图文详解)
一条SQL语句在MySQL中如何执行的

Redis

Redis 总结
Redlock分布式锁
如何做可靠的分布式锁，Redlock真的可行么
几种常见的 Redis 集群以及使用场景

数据库扩展
代办......
系统设计
常用框架
Spring/SpringBoot

Spring 学习与面试
Spring 常见问题总结
SpringBoot 指南/常见面试题总结
Spring中bean的作用域与生命周期
SpringMVC 工作原理详解
Spring中都用到了那些设计模式?

ZooKeeper

ZooKeeper 相关概念总结
ZooKeeper 数据模型和常见命令

数据通信/中间件

数据通信(RESTful、RPC、消息队列)相关知识点总结

RPC

Dubbo 总结：关于 Dubbo 的重要知识点
服务之间的调用为啥不直接用 HTTP 而用 RPC？

消息队列

消息队列总结
RabbitMQ 入门
RocketMQ的几个简单问题与答案
Kafka入门看这一篇就够了
Kafka系统设计开篇-面试看这篇就够了

权限认证

权限认证基础:区分Authentication,Authorization以及Cookie、Session、Token
JWT 优缺点分析以及常见问题解决方案
适合初学者入门 Spring Security With JWT 的 Demo

分布式 & 微服务

分布式应该学什么

API 网关
网关主要用于请求转发、安全认证、协议转换、容灾。

浅析如何设计一个亿级网关(API Gateway)

配置中心
代办......
唯一 id 生成
分布式id生成方案总结
服务治理：服务注册与发现、服务路由控制
代办......
架构

8 张图读懂大型网站技术架构
【面试精选】关于大型网站系统架构你不得不懂的10个问题

设计模式

设计模式系列文章

面试指南
备战面试

【备战面试1】程序员的简历就该这样写
【备战面试2】初出茅庐的程序员该如何准备面试？
【备战面试3】7个大部分程序员在面试前很关心的问题
【备战面试4】Github上开源的Java面试/学习相关的仓库推荐
【备战面试5】如果面试官问你“你有什么问题问我吗？”时，你该如何回答
【备战面试6】应届生面试最爱问的几道 Java 基础问题
【备战面试6】美团面试常见问题总结(附详解答案)
【备战面试7】一些刁难的面试问题总结

真实面试经历分析

我和阿里面试官的一次“邂逅”(附问题详解)

面经

5面阿里,终获offer(2018年秋招)
蚂蚁金服2019实习生面经总结(已拿口头offer)
2019年蚂蚁金服、头条、拼多多的面试总结

Java学习常见问题汇总

Java学习路线和方法推荐
Java培训四个月能学会吗？
新手学习Java，有哪些Java相关的博客，专栏，和技术学习网站推荐？

工具
Git

Git入门

Docker

Docker 基本概念解读
一文搞懂 Docker 镜像的常用操作！

其他

阿里云服务器使用经验

资源
书单

Java程序员必备书单

实战项目推荐

Github 上热门的 Spring Boot 项目实战推荐

Github

Github 上 Star 数最多的 10 个项目，看完之后很意外!
Java 项目月榜单


待办

 Java 多线程类别知识重构
 Netty 总结(---正在进行中---)
 数据结构总结重构(---正在进行中---)

说明
JavaGuide介绍

对于 Java 初学者来说： 本文档倾向于给你提供一个比较详细的学习路径，让你对于Java整体的知识体系有一个初步认识。另外，本文的一些文章
也是你学习和复习 Java 知识不错的实践；
对于非 Java 初学者来说： 本文档更适合回顾知识，准备面试，搞清面试应该把重心放在那些问题上。要搞清楚这个道理：提前知道那些面试常见，不是为了背下来应付面试，而是为了让你可以更有针对的学习重点。

Markdown 格式参考：Github Markdown格式，表情素材来自：EMOJI CHEAT SHEET。
利用 docsify 生成文档部署在 Github pages: docsify 官网介绍
作者的其他开源项目推荐

springboot-guide : 适合新手入门以及有经验的开发人员查阅的 Spring Boot 教程（业余时间维护中，欢迎一起维护）。
programmer-advancement : 我觉得技术人员应该有的一些好习惯！
spring-security-jwt-guide :从零入门 ！Spring Security With JWT（含权限验证）后端部分代码。

关于转载
如果你需要转载本仓库的一些文章到自己的博客的话，记得注明原文地址就可以了。
如何对该开源文档进行贡献

笔记内容大多是手敲，所以难免会有笔误，你可以帮我找错别字。
很多知识点我可能没有涉及到，所以你可以对其他知识点进行补充。
现有的知识点难免存在不完善或者错误，所以你可以对已有知识点进行修改/补充。

为什么要做这个开源文档？
初始想法源于自己的个人那一段比较迷茫的学习经历。主要目的是为了通过这个开源平台来帮助一些在学习 Java 或者面试过程中遇到问题的小伙伴。
投稿
由于我个人能力有限，很多知识点我可能没有涉及到，所以你可以对其他知识点进行补充。大家也可以对自己的文章进行自荐，对于不错的文章不仅可以成功在本仓库展示出来更可以获得作者送出的 50 元左右的任意书籍进行奖励(当然你也可以直接折现50元)。
联系我
添加我的微信备注“Github”,回复关键字 “加群” 即可入群。

Contributor
下面是笔主收集的一些对本仓库提过有价值的pr或者issue的朋友，人数较多，如果你也对本仓库提过不错的pr或者issue的话，你可以加我的微信与我联系。下面的排名不分先后！



























""





















公众号
如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号。
《Java面试突击》: 由本文档衍生的专为面试而生的《Java面试突击》V2.0 PDF 版本公众号后台回复 ""Java面试突击"" 即可免费领取！
Java工程师必备学习资源: 一些Java工程师常用学习资源公众号后台回复关键字 “1” 即可免费无套路获取。


"
31,"
The Algorithms - Python
 
 
 
 
 
 
All algorithms implemented in Python (for education)
These implementations are for learning purposes. They may be less efficient than the implementations in the Python standard library.
Contribution Guidelines
Read our Contribution Guidelines before you contribute.
Community Channel
We're on Gitter! Please join us.
List of Algorithms
See our directory.


"
32,"
Animate.css      

We need your help! animate.css v4 is in the work with lots of improvements and some breaking changes, including CSS custom properties support (aka CSS variables) and classes prefix for a safer use. We need your feedback! You can follow the development on the dev branch and give your feedback on the issue tracker.
Every feedback is welcome!

Just-add-water CSS animation
animate.css is a bunch of cool, fun, and cross-browser animations for you to use in your projects. Great for emphasis, home pages, sliders, and general just-add-water-awesomeness.
Installation
Install via npm:
$ npm install animate.css --save
or yarn:
$ yarn add animate.css
Usage
To use animate.css in your website, simply drop the stylesheet into your document's <head>, and add the class animated to an element, along with any of the animation names. That's it! You've got a CSS animated element. Super!
<head>
  <link rel=""stylesheet"" href=""animate.min.css"">
</head>
or use a CDN hosted version by CDNJS
<head>
  <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css"">
</head>
Animations
To animate an element, add the class animated to an element. You can include the class infinite for an infinite loop. Finally you need to add one of the following classes to the element:



Class Name







bounce
flash
pulse
rubberBand


shake
headShake
swing
tada


wobble
jello
bounceIn
bounceInDown


bounceInLeft
bounceInRight
bounceInUp
bounceOut


bounceOutDown
bounceOutLeft
bounceOutRight
bounceOutUp


fadeIn
fadeInDown
fadeInDownBig
fadeInLeft


fadeInLeftBig
fadeInRight
fadeInRightBig
fadeInUp


fadeInUpBig
fadeOut
fadeOutDown
fadeOutDownBig


fadeOutLeft
fadeOutLeftBig
fadeOutRight
fadeOutRightBig


fadeOutUp
fadeOutUpBig
flipInX
flipInY


flipOutX
flipOutY
lightSpeedIn
lightSpeedOut


rotateIn
rotateInDownLeft
rotateInDownRight
rotateInUpLeft


rotateInUpRight
rotateOut
rotateOutDownLeft
rotateOutDownRight


rotateOutUpLeft
rotateOutUpRight
hinge
jackInTheBox


rollIn
rollOut
zoomIn
zoomInDown


zoomInLeft
zoomInRight
zoomInUp
zoomOut


zoomOutDown
zoomOutLeft
zoomOutRight
zoomOutUp


slideInDown
slideInLeft
slideInRight
slideInUp


slideOutDown
slideOutLeft
slideOutRight
slideOutUp


heartBeat






Full example:
<h1 class=""animated infinite bounce delay-2s"">Example</h1>
Check out all the animations here!
It's possible to change the duration of your animations, add a delay or change the number of times that it plays:
.yourElement {
  animation-duration: 3s;
  animation-delay: 2s;
  animation-iteration-count: infinite;
}
Usage with Javascript
You can do a whole bunch of other stuff with animate.css when you combine it with Javascript. A simple example:
const element =  document.querySelector('.my-element')
element.classList.add('animated', 'bounceOutLeft')
You can also detect when an animation ends:
const element =  document.querySelector('.my-element')
element.classList.add('animated', 'bounceOutLeft')

element.addEventListener('animationend', function() { doSomething() })
You can use this simple function to add and remove the animations:
function animateCSS(element, animationName, callback) {
    const node = document.querySelector(element)
    node.classList.add('animated', animationName)

    function handleAnimationEnd() {
        node.classList.remove('animated', animationName)
        node.removeEventListener('animationend', handleAnimationEnd)

        if (typeof callback === 'function') callback()
    }

    node.addEventListener('animationend', handleAnimationEnd)
}
And use it like this:
animateCSS('.my-element', 'bounce')

// or
animateCSS('.my-element', 'bounce', function() {
  // Do something after animation
})
Notice that the examples are using ES6's const declaration, dropping support for IE10 and some aging browsers. If you prefer, switch the const to var declarations and IE10 and some old browsers will get support (they still have to provide classList support, so do your research).
Setting Delay and Speed
Delay Class
It's possible to add delays directly on the element's class attribute, just like this:
<div class=""animated bounce delay-2s"">Example</div>



Class Name
Delay Time




delay-1s
1s


delay-2s
2s


delay-3s
3s


delay-4s
4s


delay-5s
5s




Note: The default delays are from 1 second to 5 seconds only. If you need custom delays, add it directly to your own CSS code.

Slow, Slower, Fast, and Faster Class
It's possible to control the speed of the animation by adding these classes, as a sample below:
<div class=""animated bounce faster"">Example</div>



Class Name
Speed Time




slow
2s


slower
3s


fast
800ms


faster
500ms




Note: The animated class has a default speed of 1s. If you need custom duration, add it directly to your own CSS code.

Custom Builds
Animate.css is powered by gulp.js, which means you can create custom builds pretty easily. First of all, you’ll need Gulp and all other dependencies:
$ cd path/to/animate.css/
$ npm install
Next, run npx gulp to compile your custom builds. For example, if you want only some of the “attention seekers”, simply edit the animate-config.json file to select only the animations you want to use.
""attention_seekers"": {
  ""bounce"": true,
  ""flash"": false,
  ""pulse"": false,
  ""shake"": true,
  ""headShake"": true,
  ""swing"": true,
  ""tada"": true,
  ""wobble"": true,
  ""jello"":true
}
Accessibility
Animate.css supports the prefers-reduced-motion media query so that users with motion sensitivity can opt out of animations. On supported platforms (currently all the majors browsers and OS), users can select ""reduce motion"" on their operating system preferences and it will turn off CSS transitions for them without any further work required.
License
Animate.css is licensed under the MIT license. (https://opensource.org/licenses/MIT)
Code of Conduct
This project and everyone participating in it is governed by the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to callmeelton@gmail.com.
Contributing
Pull requests are the way to go here. We only have two rules for submitting a pull request: match the naming convention (camelCase, categorised [fades, bounces, etc]) and let us see a demo of submitted animations in a pen. That last one is important.

"
33,"


Version 5 – the iconic SVG, font, and CSS framework

The internet's most popular icon toolkit has been redesigned and built from
scratch. On top of this, features like icon font ligatures, an SVG framework,
official NPM packages for popular frontend libraries like React, and access to
a new CDN.
Not familiar with Font Awesome 5? Learn
more about our
successful Kickstarter and plan. You can also order Font Awesome
Pro which includes tons more icons directly
from fontawesome.com.
Documentation
Learn how to get started with Font Awesome and then dive deeper into other and advanced topics:
Using Font Awesome on the Web

With SVG with JavaScript
With web fonts with CSS
Upgrading from version 4
Installing Font Awesome with a package manager
Downloading + hosting Font Awesome yourself
Performance and security
Accessibility
Troubleshooting

Advanced Options & Techniques

Using CSS pseudo-elements
SVG sprites
The Font Awesome API
SVG symbols
SVG JavaScript Core
Server side rendering

Using Font Awesome on the Desktop

Getting started
Upgrading from version 4
Using ligatures
Using glyphs
Troubleshooting

Where did Font Awesome 4 (or 3) go?
Now that Font Awesome 5 has been released we are marking version 4 as
end-of-life. We don't plan on releasing any further versions of the 4.x or 3.x.
Documentation is still available but it's moved to
https://fontawesome.com/v4.7.0 and
https://fontawesome.com/v3.2.1.
The Git repository for
v4.7.0 and
v3.2.1 can
be found in our GitHub releases.
Change log
We'll keep track of each release in the CHANGELOG.md
Looking for older versions of Font Awesome? Check the releases.
Upgrading
From time-to-time we'll have special upgrading instructions from one version to the next.
Check out the UPGRADING.md guide when you upgrade your dependencies.
Code of conduct
We will behave ourselves if you behave yourselves. For more details see our
CODE_OF_CONDUCT.md.
Contributing
Please read through our contributing guidelines.  Included
are directions for opening issues.
Versioning
Font Awesome will be maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered
with the following format:
<major>.<minor>.<patch>
For more information on SemVer, please visit http://semver.org.
The major version ""5"" is part of an umbrella release.  It includes many different types of files and technologies. Therefore
we deviate from normal SemVer in the following ways:

Any release may update the design, look-and-feel, or branding of an existing
icon
We will never intentionally release a patch version update that breaks
backward compatibility
A minor release may include backward-incompatible changes but we will
write clear upgrading instructions in UPGRADING.md
A minor or patch release will never remove icons
Bug fixes will be addressed as patch releases unless they include backward
incompatibility then they will be minor releases

License
Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.

Icons — CC BY 4.0 License

In the Font Awesome Free download, the CC BY 4.0 license applies to all icons packaged as .svg and .js files types.


Fonts — SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OLF license applies to all icons packaged as web and desktop font files.


Code — MIT License

In the Font Awesome Free download, the MIT license applies to all non-font and non-icon files.



Attribution is required by MIT, SIL OLF, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.
We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.
Team

Dave Gandy
Travis Chase
Rob Madole
Brian Talbot
Jory Raphael
Mike Wilkerson
Trevor Chase
Jason Lundien
Jason Otero
Edward Emanuel
Geremia Taglialatela


"
34,"
Kubernetes
 


Kubernetes is an open source system for managing containerized applications
across multiple hosts. It provides basic mechanisms for deployment, maintenance,
and scaling of applications.
Kubernetes builds upon a decade and a half of experience at Google running
production workloads at scale using a system called Borg,
combined with best-of-breed ideas and practices from the community.
Kubernetes is hosted by the Cloud Native Computing Foundation (CNCF).
If your company wants to help shape the evolution of
technologies that are container-packaged, dynamically scheduled,
and microservices-oriented, consider joining the CNCF.
For details about who's involved and how Kubernetes plays a role,
read the CNCF announcement.

To start using Kubernetes
See our documentation on kubernetes.io.
Try our interactive tutorial.
Take a free course on Scalable Microservices with Kubernetes.
To use Kubernetes code as a library in other applications, see the list of published components.
Use of the k8s.io/kubernetes module or k8s.io/kubernetes/... packages as libraries is not supported.
To start developing Kubernetes
The community repository hosts all information about
building Kubernetes from source, how to contribute code
and documentation, who to contact about what, etc.
If you want to build Kubernetes right away there are two options:
You have a working Go environment.
mkdir -p $GOPATH/src/k8s.io
cd $GOPATH/src/k8s.io
git clone https://github.com/kubernetes/kubernetes
cd kubernetes
make

You have a working Docker environment.
git clone https://github.com/kubernetes/kubernetes
cd kubernetes
make quick-release

For the full story, head over to the developer's documentation.
Support
If you need support, start with the troubleshooting guide,
and work your way through the process that we've outlined.
That said, if you have questions, reach out to us
one way or another.


"
35,"
免费的编程中文书籍索引
    
免费的编程中文书籍索引，欢迎投稿。

国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。
stackoverflow 上的程序员应该阅读的非编程类书籍有哪些？ 中文版
github 上的一个流行的编程书籍索引  中文版

欢迎订阅我的微信公众帐号，只推送原创文字。欢迎扫描二维码订阅：

参与交流
欢迎大家将珍藏已久的经典免费书籍共享出来，您可以：

使用 Issues 以及 Pull Request

贡献者名单: https://github.com/justjavac/free-programming-books-zh_CN/graphs/contributors
目录


语言无关类

操作系统
智能系统
分布式系统
编译原理
函数式概念
计算机图形学
WEB服务器
版本控制
编辑器
NoSQL
PostgreSQL
MySQL
管理和监控
项目相关
设计模式
Web
大数据
编程艺术
其它



语言相关类

Android
APP
AWK
C/C++
C#
Clojure
CSS/HTML
Dart
Elixir
Erlang
Fortran
Go
Groovy
Haskell
iOS
Java
JavaScript
Kotlin
LaTeX
LISP
Lua
OCaml
Perl
PHP
Prolog
Python
R
Ruby
Rust
Scala
Shell
Swift



读书笔记及其它


测试相关


置顶

[笔记]前端工程师的入门与进阶 💯
[全文]如何正确的学习 Node.js 💯

操作系统

开源世界旅行手册
鸟哥的Linux私房菜
The Linux Command Line (中英文版)
Linux 设备驱动 (第三版)
深入分析Linux内核源码
UNIX TOOLBOX
Docker中文指南
Docker —— 从入门到实践
Docker入门实战
Docker Cheat Sheet
FreeRADIUS新手入门
Mac 开发配置手册
FreeBSD 使用手册
Linux 命令行(中文版)
Linux 构建指南
Linux工具快速教程
Linux Documentation (中文版)
嵌入式 Linux 知识库 (eLinux.org 中文版)
理解Linux进程
命令行的艺术
SystemTap新手指南
操作系统思考

返回目录
智能系统

一步步搭建物联网系统

返回目录
分布式系统

走向分布式

返回目录
编译原理

《计算机程序的结构和解释》公开课 翻译项目

返回目录
函数式概念

傻瓜函数编程

返回目录
计算机图形学

OpenGL 教程
WebGL自学网
《Real-Time Rendering 3rd》提炼总结

返回目录
WEB服务器

Nginx开发从入门到精通 (淘宝团队出品)
Nginx教程从入门到精通(PDF版本，运维生存时间出品)
OpenResty最佳实践
Apache 中文手册

返回目录
版本控制

Git教程 （本文由 廖雪峰 创作，如果觉得本教程对您有帮助，可以去 iTunes 购买）
git - 简易指南
猴子都能懂的GIT入门
Git 参考手册
Pro Git
Pro Git 中文版 (整理在gitbook上)
Git Magic
GotGitHub
Git权威指南
Git Community Book 中文版
Mercurial 使用教程
HgInit (中文版)
沉浸式学 Git
Git-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版）
GitHub秘籍
GitHub帮助文档
git-flow 备忘清单
svn 手册
GitHub漫游指南

返回目录
编辑器

exvim--vim 改良成IDE项目
笨方法学Vimscript 中译本
Vim中文文档
所需即所获：像 IDE 一样使用 vim
vim 实操教程
Atom飞行手册中文版
Markdown·简单的世界
一年成为 Emacs 高手
Emacs 生存指南
Atom官方手册

返回目录
NoSQL

NoSQL数据库笔谈
Redis 设计与实现
Redis 命令参考
带有详细注释的 Redis 3.0 代码
带有详细注释的 Redis 2.6 代码
The Little MongoDB Book
The Little Redis Book
Neo4j 简体中文手册 v1.8
Neo4j .rb 中文資源
Disque 使用教程
Apache Spark 设计与实现

返回目录
PostgreSQL

PostgreSQL 8.2.3 中文文档
PostgreSQL 9.3.1 中文文档
PostgreSQL 9.5.3 中文文档

返回目录
MySQL

MySQL索引背后的数据结构及算法原理
21分钟MySQL入门教程

返回目录
管理和监控

ELKstack 中文指南
Mastering Elasticsearch(中文版)
ElasticSearch 权威指南
Elasticsearch 权威指南（中文版）
Logstash 最佳实践
Puppet 2.7 Cookbook 中文版

返回目录
项目相关

持续集成（第二版） (译言网)
让开发自动化系列专栏
追求代码质量
selenium 中文文档
Selenium Webdriver 简易教程
Joel谈软件
約耳談軟體(Joel on Software)
Gradle 2 用户指南
Gradle 中文使用文档
编码规范
开源软件架构
GNU make 指南
GNU make 中文手册
The Twelve-Factor App

返回目录
设计模式

图说设计模式
史上最全设计模式导学目录
design pattern 包教不包会
设计模式 Java 版

返回目录
Web

关于浏览器和网络的 20 项须知
浏览器开发工具的秘密
Chrome 开发者工具中文手册
Chrome扩展开发文档
Grunt中文文档
gulp中文文档
Gulp 入门指南
移动Web前端知识库
正则表达式30分钟入门教程
前端开发体系建设日记
移动前端开发收藏夹
JSON风格指南
HTTP 接口设计指北
前端资源分享（一）
前端资源分享（二）
前端代码规范 及 最佳实践
前端开发者手册
前端工程师手册
w3school教程整理
Wireshark用户手册
一站式学习Wireshark
HTTP 下午茶
HTTP/2.0 中文翻译
RFC 7540 - HTTP/2 中文翻译版
http2讲解
3 Web Designs in 3 Weeks
站点可靠性工程

返回目录
大数据

大数据/数据挖掘/推荐系统/机器学习相关资源
面向程序员的数据挖掘指南
大型集群上的快速和通用数据处理架构
数据挖掘中经典的算法实现和详细的注释
Spark 编程指南简体中文版

返回目录
编程艺术

程序员编程艺术
每个程序员都应该了解的内存知识(译)【第一部分】
取悦的工序：如何理解游戏 (豆瓣阅读，免费书籍)

返回目录
其它

OpenWrt智能、自动、透明翻墙路由器教程
SAN 管理入门系列
Sketch 中文手册
深入理解并行编程
程序员的自我修养
Growth: 全栈增长工程师指南

返回目录
Android

Android Design(中文版)
Google Material Design 正體中文版 (译本一 译本二)
Material Design 中文版
Google Android官方培训课程中文版
Android学习之路
Android开发技术前线(android-tech-frontier)
Point-of-Android Android 一些重要知识点解析整理
Android6.0新特性详解

返回目录
APP

Apache Cordova 开发指南

返回目录
AWK

awk程序设计语言
awk中文指南

返回目录
C/C++

C/C++ 中文参考手册 (欢迎大家参与在线翻译和校对)
C 语言编程透视
C++ 并发编程指南
Linux C编程一站式学习 (宋劲杉, 北京亚嵌教育研究中心)
CGDB中文手册
100个gdb小技巧
100个gcc小技巧
ZMQ 指南
How to Think Like a Computer Scientist (中英文版)
跟我一起写Makefile(PDF)
GNU make中文手册
GNU make 指南
Google C++ 风格指南
C/C++ Primer (by @andycai)
简单易懂的C魔法
C++ FAQ LITE(中文版)
C++ Primer 5th Answers
C++ 并发编程(基于C++11)
QT 教程
DevBean的《Qt学习之路2》(Qt5)
C++ Template 进阶指南
libuv中文教程
Boost 库中文教程
笨办法学C
高速上手 C++11/14/17

返回目录
C#

MSDN C# 中文文档
.NET 类库参考
ASP.NET MVC 5 入门指南
超全面的 .NET GDI+ 图形图像编程教程
.NET控件开发基础
.NET开发要点精讲（初稿）

返回目录
Clojure

Clojure入门教程

返回目录
CSS/HTML

学习CSS布局
通用 CSS 笔记、建议与指导
CSS参考手册
Emmet 文档
前端代码规范 (腾讯 AlloyTeam 团队)
HTML和CSS编码规范
Sass Guidelines 中文
CSS3 Tutorial 《CSS3 教程》
MDN HTML 中文文档
MDN CSS 中文文档

返回目录
Dart

Dart 语言导览

返回目录
Elixir

Elixir编程入门

返回目录
Erlang

21天学通Erlang

返回目录
Fortran

Fortran77和90/95编程入门

返回目录
Go

Go编程基础
Go入门指南
学习Go语言
Go Web 编程 (此书已经出版，希望开发者们去购买，支持作者的创作)
Go实战开发 (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者捐赠，以鼓励作者的继续创作)
Network programming with Go 中文翻译版本
Effective Go
Go 语言标准库
Golang标准库文档
Revel 框架手册
Java程序员的Golang入门指南
Go命令教程
Go语言博客实践
Go 官方文档翻译
深入解析Go
Go语言圣经(中文版) (GitBook)

返回目录
Groovy

实战 Groovy 系列

返回目录
Haskell

Real World Haskell 中文版
Haskell趣学指南

返回目录
iOS

iOS开发60分钟入门
iOS7人机界面指南
Google Objective-C Style Guide 中文版
iPhone 6 屏幕揭秘
Apple Watch开发初探
马上着手开发 iOS 应用程序
网易斯坦福大学公开课：iOS 7应用开发字幕文件

返回目录
Java

Apache Shiro 用户指南
Jersey 2.x 用户指南
Spring Framework 4.x参考文档
Spring Boot参考指南 (翻译中)
MyBatis中文文档
MyBatis Generator 中文文档
用jersey构建REST服务
Activiti 5.x 用户指南
Google Java编程风格指南
Netty 4.x 用户指南
Netty 实战(精髓)
REST 实战
Java 编码规范
Apache MINA 2 用户指南
H2 Database 教程
Java Servlet 3.1 规范
JSSE 参考指南
Java开源实现及最佳实践
Java 编程要点
Think Java
Java 8 简明教程
On Java 8 中文版 (翻译中)

返回目录
JavaScript

现代 Javascript 教程
Google JavaScript 代码风格指南
Google JSON 风格指南
Airbnb JavaScript 规范
JavaScript 标准参考教程（alpha）
Javascript编程指南 (源码)
javascript 的 12 个怪癖
JavaScript 秘密花园
JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)
《JavaScript 模式》 “JavaScript patterns”中译本
命名函数表达式探秘  (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份)
学用 JavaScript 设计模式 (开源中国)
深入理解JavaScript系列
ECMAScript 5.1 中文版
ECMAScript 6 入门 (作者：阮一峰)
JavaScript Promise迷你书
You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书)
JavaScript 教程 廖雪峰
MDN JavaScript 中文文档
jQuery

jQuery 解构
简单易懂的JQuery魔法
How to write jQuery plugin
You Don't Need jQuery
如何实现一个类jQuery？


Node.js

Node入门
七天学会NodeJS
Nodejs Wiki Book (繁体中文)
express.js 中文文档
koa 中文文档
一起学koa
使用 Express + MongoDB 搭建多人博客
Express框架
Node.js 包教不包会
Learn You The Node.js For Much Win! (中文版)
Node debug 三法三例
nodejs中文文档
orm2 中文文档
一起学 Node.js


underscore.js

Underscore.js中文文档


backbone.js

backbone.js中文文档
backbone.js入门教程 (PDF)
Backbone.js入门教程第二版
Developing Backbone.js Applications(中文版)


AngularJS

AngularJS最佳实践和风格指南
AngularJS中译本
AngularJS入门教程
构建自己的AngularJS
在Windows环境下用Yeoman构建AngularJS项目


Zepto.js

Zepto.js 中文文档


Sea.js

Hello Sea.js


React.js

React 学习之道
React.js 小书
React.js 中文文档
React webpack-cookbook
React 入门教程
React Native 中文文档(含最新Android内容)
Learn React & Webpack by building the Hacker News front page


impress.js

impress.js的中文教程


CoffeeScript

CoffeeScript Cookbook
The Little Book on CoffeeScript中文版
CoffeeScript 编码风格指南


TypeScipt

TypeScript Handbook


ExtJS

Ext4.1.0 中文文档


Meteor

Discover Meteor
Meteor 中文文档
Angular-Meteor 中文教程


Chrome扩展及应用开发

返回目录
Kotlin

developing-android-apps-with-kotlin

返回目录
LaTeX

一份其实很短的 LaTeX 入门文档
一份不太简短的 LATEX 2ε 介绍 （PDF版）

返回目录
LISP

Common Lisp

ANSI Common Lisp 中文翻譯版
On Lisp 中文翻译版本


Scheme

Yet Another Scheme Tutorial Scheme入门教程
Scheme语言简明教程
Racket

Racket book





返回目录
Lua

Lua编程入门
Lua 5.1 参考手册 中文翻译
Lua 5.3 参考手册 中文翻译
Lua源码欣赏

返回目录
OCaml

Real World OCaml

返回目录
Perl

Modern Perl 中文版
Perl 程序员应该知道的事

返回目录
PHP

PHP 官方手册
PHP调试技术手册(PDF)
PHP之道：php-the-right-way (@wulijun版 PHPHub版)
PHP 最佳实践
PHP 开发者实践
深入理解PHP内核
PHP扩展开发及内核应用
Laravel5.1 中文文档
Laravel 5.1 LTS 速查表
Symfony2 Cookbook 中文版(版本 2.7.0 LTS)
Symfony2中文文档 (未译完)
YiiBook几本Yii框架的在线教程
深入理解 Yii 2.0
Yii 框架中文文檔
简单易懂的PHP魔法
swoole文档及入门教程
Composer 中文网
Slim 中文文档
Lumen 中文文档
PHPUnit 中文文档

返回目录
Prolog

笨办法学Prolog

返回目录
Python

廖雪峰 Python 2.7 中文教程
廖雪峰 Python 3 中文教程
简明Python教程
简明 Python 教程(Python 3)
零基础学 Python 第一版
零基础学 Python 第二版
可爱的 Python
Python 2.7 官方教程中文版
Python 3.3 官方教程中文版
Python Cookbook 中文版
Python3 Cookbook 中文版
深入 Python
深入 Python 3
PEP8 Python代码风格规范
Google Python 风格指南 中文版
Python入门教程 (PDF)
笨办法学 Python (PDF EPUB)
Python自然语言处理中文版 （感谢陈涛同学的翻译，也谢谢 @shwley 联系了作者）
Python 绘图库 matplotlib 官方指南中文翻译
Scrapy 0.25 文档
ThinkPython
ThinkPython 2ed
Python快速教程
Python 正则表达式操作指南
python初级教程：入门详解
Twisted 与异步编程入门
TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 )
Requests: HTTP for Humans
Pillow 中文文档
PyMOTW 中文版
Python 官方文档中文版
Fabric 中文文档
Beautiful Soup 4.2.0 中文文档
Python 中的 Socket 编程
用Python做科学计算
Sphinx 中文文档
精通 Python 设计模式
python 安全编程教程
程序设计思想与方法
知乎周刊·编程小白学Python
Scipy 讲义
Python 学习笔记 基础篇
Python 学习笔记 模块篇
Python 标准库 中文版
Python进阶
Python 核心编程 第二版 CPyUG译
Python最佳实践指南
Python 精要教程
Python 量化交易教程
Django

Django 1.5 文档中文版 正在翻译中
Django 2.0 文档中文版
Django 最佳实践
Django 2.1 搭建个人博客教程 ( 编写中 )
Django搭建简易博客教程
The Django Book 中文版
Django 设计模式与最佳实践
Django 网站开发 Cookbook
Django Girls 學習指南


Flask

Flask 文档中文版
Jinja2 文档中文版
Werkzeug 文档中文版
Flask之旅
Flask 扩展文档汇总
Flask 大型教程
SQLAlchemy 中文文档


web.py

web.py 0.3 新手指南
Web.py Cookbook 简体中文版


Tornado

Introduction to Tornado 中文翻译
Tornado源码解析
Tornado 4.3 文档中文版



返回目录
R

R语言忍者秘笈

返回目录
Ruby

Ruby 风格指南
Rails 风格指南
笨方法學 Ruby
Ruby on Rails 指南
Ruby on Rails 實戰聖經
Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)
Rails 实践
Rails 5 开发进阶(Beta)
Rails 102
编写Ruby的C拓展
Ruby 源码解读
Ruby中的元编程

返回目录
Rust

Rust编程语言 中文翻译
Rust Primer

返回目录
Scala

Scala课堂 (Twitter的Scala中文教程)
Effective Scala(Twitter的Scala最佳实践的中文翻译)
Scala指南

返回目录
Shell

Shell脚本编程30分钟入门
Bash脚本15分钟进阶教程
Linux工具快速教程
shell十三问
Shell编程范例

返回目录
Swift

The Swift Programming Language 中文版
Swift 语言指南
Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件
C4iOS - COSMOS

返回目录
读书笔记及其它

编译原理（紫龙书）中文第2版习题答案
把《编程珠玑》读薄
Effective C++读书笔记
Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF)
Jsoup 学习笔记
学习笔记: Vim、Python、memcached
图灵开放书翻译计划--C++、Python、Java等
蒂姆·奥莱利随笔 （由译言网翻译，电子版免费）
SICP 解题集
精彩博客集合
中文文案排版指北
Standard C 语言标准函数库速查 (Cheat Sheet)
Git Cheatsheet Chs
GitBook简明教程
JavaScript语言精粹
制造开源软件
提问的智慧
Markdown 入门参考
AsciiDoc简明指南
背包问题九讲
老齐的技术资料
前端技能汇总
借助开源项目，学习软件开发
前端工作面试问题
leetcode/lintcode题解/算法学习笔记
前端开发笔记本
LeetCode题解
《不可替代的团队领袖培养计划》

返回目录
测试相关

"
36,"
TensorFlow Models
This repository contains a number of different models implemented in TensorFlow:
The official models are a collection of example models that use TensorFlow's high-level APIs. They are intended to be well-maintained, tested, and kept up to date with the latest stable TensorFlow API. They should also be reasonably optimized for fast performance while still being easy to read. We especially recommend newer TensorFlow users to start here.
The research models are a large collection of models implemented in TensorFlow by researchers. They are not officially supported or available in release branches; it is up to the individual researchers to maintain the models and/or provide support on issues and pull requests.
The samples folder contains code snippets and smaller models that demonstrate features of TensorFlow, including code presented in various blog posts.
The tutorials folder is a collection of models described in the TensorFlow tutorials.
Contribution guidelines
If you want to contribute to models, be sure to review the contribution guidelines.
License
Apache License 2.0

"
37,"
AngularJS 
AngularJS lets you write client-side web applications as if you had a smarter browser.  It lets you
use good old HTML (or HAML, Jade/Pug and friends!) as your template language and lets you extend HTML’s
syntax to express your application’s components clearly and succinctly.  It automatically
synchronizes data from your UI (view) with your JavaScript objects (model) through 2-way data
binding. To help you structure your application better and make it easy to test, AngularJS teaches
the browser how to do dependency injection and inversion of control.
It also helps with server-side communication, taming async callbacks with promises and deferred objects,
and it makes client-side navigation and deep linking with hashbang urls or HTML5 pushState a
piece of cake. Best of all? It makes development fun!

On July 1, 2018 AngularJS entered a 3 year Long Term Support period: Find out more
Looking for the new Angular? Go here: https://github.com/angular/angular


Web site: https://angularjs.org
Tutorial: https://docs.angularjs.org/tutorial
API Docs: https://docs.angularjs.org/api
Developer Guide: https://docs.angularjs.org/guide
Contribution guidelines: CONTRIBUTING.md
Core Development: DEVELOPERS.md
Dashboard: https://dashboard.angularjs.org

Documentation
Go to https://docs.angularjs.org
Contribute
We've set up a separate document for our
contribution guidelines.
Develop
We've set up a separate document for
developers.

What to use AngularJS for and when to use it
AngularJS is the next generation framework where each component is designed to work with every other
component in an interconnected way like a well-oiled machine. AngularJS is JavaScript MVC made easy
and done right. (Well it is not really MVC, read on, to understand what this means.)
MVC, no, MV* done the right way!
MVC, short for Model-View-Controller, is a design pattern, i.e. how the code should be organized and
how the different parts of an application separated for proper readability and debugging. Model is
the data and the database. View is the user interface and what the user sees. Controller is the main
link between Model and View. These are the three pillars of major programming frameworks present on
the market today. On the other hand AngularJS works on MV*, short for Model-View-Whatever. The
Whatever is AngularJS's way of telling that you may create any kind of linking between the Model
and the View here.
Unlike other frameworks in any programming language, where MVC, the three separate components, each
one has to be written and then connected by the programmer, AngularJS helps the programmer by asking
him/her to just create these and everything else will be taken care of by AngularJS.
Interconnection with HTML at the root level
AngularJS uses HTML to define the user's interface. AngularJS also enables the programmer to write
new HTML tags (AngularJS Directives) and increase the readability and understandability of the HTML
code. Directives are AngularJS’s way of bringing additional functionality to HTML. Directives
achieve this by enabling us to invent our own HTML elements. This also helps in making the code DRY
(Don't Repeat Yourself), which means once created, a new directive can be used anywhere within the
application.
HTML is also used to determine the wiring of the app. Special attributes in the HTML determine where
to load the app, which components or controllers to use for each element, etc. We specify ""what""
gets loaded, but not ""how"". This declarative approach greatly simplifies app development in a sort
of WYSIWYG way. Rather than spending time on how the program flows and orchestrating the various
moving parts, we simply define what we want and AngularJS will take care of the dependencies.
Data Handling made simple
Data and Data Models in AngularJS are plain JavaScript objects and one can add and change properties
directly on it and loop over objects and arrays at will.
Two-way Data Binding
One of AngularJS's strongest features. Two-way Data Binding means that if something changes in the
Model, the change gets reflected in the View instantaneously, and the same happens the other way
around. This is also referred to as Reactive Programming, i.e. suppose a = b + c is being
programmed and after this, if the value of b and/or c is changed then the value of a will be
automatically updated to reflect the change. AngularJS uses its ""scopes"" as a glue between the Model
and View and makes these updates in one available for the other.
Less Written Code and Easily Maintainable Code
Everything in AngularJS is created to enable the programmer to end up writing less code that is
easily maintainable and readable by any other new person on the team. Believe it or not, one can
write a complete working two-way data binded application in less than 10 lines of code. Try and see
for yourself!
Testing Ready
AngularJS has Dependency Injection, i.e. it takes care of providing all the necessary dependencies
to its controllers and services whenever required. This helps in making the AngularJS code ready for
unit testing by making use of mock dependencies created and injected. This makes AngularJS more
modular and easily testable thus in turn helping a team create more robust applications.

"
38,"

youtube-dl - download videos from youtube.com or other video platforms

INSTALLATION
DESCRIPTION
OPTIONS
CONFIGURATION
OUTPUT TEMPLATE
FORMAT SELECTION
VIDEO SELECTION
FAQ
DEVELOPER INSTRUCTIONS
EMBEDDING YOUTUBE-DL
BUGS
COPYRIGHT

INSTALLATION
To install it right away for all UNIX users (Linux, macOS, etc.), type:
sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl

If you do not have curl, you can alternatively use a recent wget:
sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl

Windows users can download an .exe file and place it in any location on their PATH except for %SYSTEMROOT%\System32 (e.g. do not put in C:\Windows\System32).
You can also use pip:
sudo -H pip install --upgrade youtube-dl

This command will update youtube-dl if you have already installed it. See the pypi page for more information.
macOS users can install youtube-dl with Homebrew:
brew install youtube-dl

Or with MacPorts:
sudo port install youtube-dl

Alternatively, refer to the developer instructions for how to check out and work with the git repository. For further options, including PGP signatures, see the youtube-dl Download Page.
DESCRIPTION
youtube-dl is a command-line program to download videos from YouTube.com and a few more sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS. It is released to the public domain, which means you can modify it, redistribute it or use it however you like.
youtube-dl [OPTIONS] URL [URL...]

OPTIONS
-h, --help                       Print this help text and exit
--version                        Print program version and exit
-U, --update                     Update this program to latest version. Make
                                 sure that you have sufficient permissions
                                 (run with sudo if needed)
-i, --ignore-errors              Continue on download errors, for example to
                                 skip unavailable videos in a playlist
--abort-on-error                 Abort downloading of further videos (in the
                                 playlist or the command line) if an error
                                 occurs
--dump-user-agent                Display the current browser identification
--list-extractors                List all supported extractors
--extractor-descriptions         Output descriptions of all supported
                                 extractors
--force-generic-extractor        Force extraction to use the generic
                                 extractor
--default-search PREFIX          Use this prefix for unqualified URLs. For
                                 example ""gvsearch2:"" downloads two videos
                                 from google videos for youtube-dl ""large
                                 apple"". Use the value ""auto"" to let
                                 youtube-dl guess (""auto_warning"" to emit a
                                 warning when guessing). ""error"" just throws
                                 an error. The default value ""fixup_error""
                                 repairs broken URLs, but emits an error if
                                 this is not possible instead of searching.
--ignore-config                  Do not read configuration files. When given
                                 in the global configuration file
                                 /etc/youtube-dl.conf: Do not read the user
                                 configuration in ~/.config/youtube-
                                 dl/config (%APPDATA%/youtube-dl/config.txt
                                 on Windows)
--config-location PATH           Location of the configuration file; either
                                 the path to the config or its containing
                                 directory.
--flat-playlist                  Do not extract the videos of a playlist,
                                 only list them.
--mark-watched                   Mark videos watched (YouTube only)
--no-mark-watched                Do not mark videos watched (YouTube only)
--no-color                       Do not emit color codes in output

Network Options:
--proxy URL                      Use the specified HTTP/HTTPS/SOCKS proxy.
                                 To enable SOCKS proxy, specify a proper
                                 scheme. For example
                                 socks5://127.0.0.1:1080/. Pass in an empty
                                 string (--proxy """") for direct connection
--socket-timeout SECONDS         Time to wait before giving up, in seconds
--source-address IP              Client-side IP address to bind to
-4, --force-ipv4                 Make all connections via IPv4
-6, --force-ipv6                 Make all connections via IPv6

Geo Restriction:
--geo-verification-proxy URL     Use this proxy to verify the IP address for
                                 some geo-restricted sites. The default
                                 proxy specified by --proxy (or none, if the
                                 option is not present) is used for the
                                 actual downloading.
--geo-bypass                     Bypass geographic restriction via faking
                                 X-Forwarded-For HTTP header
--no-geo-bypass                  Do not bypass geographic restriction via
                                 faking X-Forwarded-For HTTP header
--geo-bypass-country CODE        Force bypass geographic restriction with
                                 explicitly provided two-letter ISO 3166-2
                                 country code
--geo-bypass-ip-block IP_BLOCK   Force bypass geographic restriction with
                                 explicitly provided IP block in CIDR
                                 notation

Video Selection:
--playlist-start NUMBER          Playlist video to start at (default is 1)
--playlist-end NUMBER            Playlist video to end at (default is last)
--playlist-items ITEM_SPEC       Playlist video items to download. Specify
                                 indices of the videos in the playlist
                                 separated by commas like: ""--playlist-items
                                 1,2,5,8"" if you want to download videos
                                 indexed 1, 2, 5, 8 in the playlist. You can
                                 specify range: ""--playlist-items
                                 1-3,7,10-13"", it will download the videos
                                 at index 1, 2, 3, 7, 10, 11, 12 and 13.
--match-title REGEX              Download only matching titles (regex or
                                 caseless sub-string)
--reject-title REGEX             Skip download for matching titles (regex or
                                 caseless sub-string)
--max-downloads NUMBER           Abort after downloading NUMBER files
--min-filesize SIZE              Do not download any videos smaller than
                                 SIZE (e.g. 50k or 44.6m)
--max-filesize SIZE              Do not download any videos larger than SIZE
                                 (e.g. 50k or 44.6m)
--date DATE                      Download only videos uploaded in this date
--datebefore DATE                Download only videos uploaded on or before
                                 this date (i.e. inclusive)
--dateafter DATE                 Download only videos uploaded on or after
                                 this date (i.e. inclusive)
--min-views COUNT                Do not download any videos with less than
                                 COUNT views
--max-views COUNT                Do not download any videos with more than
                                 COUNT views
--match-filter FILTER            Generic video filter. Specify any key (see
                                 the ""OUTPUT TEMPLATE"" for a list of
                                 available keys) to match if the key is
                                 present, !key to check if the key is not
                                 present, key > NUMBER (like ""comment_count
                                 > 12"", also works with >=, <, <=, !=, =) to
                                 compare against a number, key = 'LITERAL'
                                 (like ""uploader = 'Mike Smith'"", also works
                                 with !=) to match against a string literal
                                 and & to require multiple matches. Values
                                 which are not known are excluded unless you
                                 put a question mark (?) after the operator.
                                 For example, to only match videos that have
                                 been liked more than 100 times and disliked
                                 less than 50 times (or the dislike
                                 functionality is not available at the given
                                 service), but who also have a description,
                                 use --match-filter ""like_count > 100 &
                                 dislike_count <? 50 & description"" .
--no-playlist                    Download only the video, if the URL refers
                                 to a video and a playlist.
--yes-playlist                   Download the playlist, if the URL refers to
                                 a video and a playlist.
--age-limit YEARS                Download only videos suitable for the given
                                 age
--download-archive FILE          Download only videos not listed in the
                                 archive file. Record the IDs of all
                                 downloaded videos in it.
--include-ads                    Download advertisements as well
                                 (experimental)

Download Options:
-r, --limit-rate RATE            Maximum download rate in bytes per second
                                 (e.g. 50K or 4.2M)
-R, --retries RETRIES            Number of retries (default is 10), or
                                 ""infinite"".
--fragment-retries RETRIES       Number of retries for a fragment (default
                                 is 10), or ""infinite"" (DASH, hlsnative and
                                 ISM)
--skip-unavailable-fragments     Skip unavailable fragments (DASH, hlsnative
                                 and ISM)
--abort-on-unavailable-fragment  Abort downloading when some fragment is not
                                 available
--keep-fragments                 Keep downloaded fragments on disk after
                                 downloading is finished; fragments are
                                 erased by default
--buffer-size SIZE               Size of download buffer (e.g. 1024 or 16K)
                                 (default is 1024)
--no-resize-buffer               Do not automatically adjust the buffer
                                 size. By default, the buffer size is
                                 automatically resized from an initial value
                                 of SIZE.
--http-chunk-size SIZE           Size of a chunk for chunk-based HTTP
                                 downloading (e.g. 10485760 or 10M) (default
                                 is disabled). May be useful for bypassing
                                 bandwidth throttling imposed by a webserver
                                 (experimental)
--playlist-reverse               Download playlist videos in reverse order
--playlist-random                Download playlist videos in random order
--xattr-set-filesize             Set file xattribute ytdl.filesize with
                                 expected file size
--hls-prefer-native              Use the native HLS downloader instead of
                                 ffmpeg
--hls-prefer-ffmpeg              Use ffmpeg instead of the native HLS
                                 downloader
--hls-use-mpegts                 Use the mpegts container for HLS videos,
                                 allowing to play the video while
                                 downloading (some players may not be able
                                 to play it)
--external-downloader COMMAND    Use the specified external downloader.
                                 Currently supports
                                 aria2c,avconv,axel,curl,ffmpeg,httpie,wget
--external-downloader-args ARGS  Give these arguments to the external
                                 downloader

Filesystem Options:
-a, --batch-file FILE            File containing URLs to download ('-' for
                                 stdin), one URL per line. Lines starting
                                 with '#', ';' or ']' are considered as
                                 comments and ignored.
--id                             Use only video ID in file name
-o, --output TEMPLATE            Output filename template, see the ""OUTPUT
                                 TEMPLATE"" for all the info
--autonumber-start NUMBER        Specify the start value for %(autonumber)s
                                 (default is 1)
--restrict-filenames             Restrict filenames to only ASCII
                                 characters, and avoid ""&"" and spaces in
                                 filenames
-w, --no-overwrites              Do not overwrite files
-c, --continue                   Force resume of partially downloaded files.
                                 By default, youtube-dl will resume
                                 downloads if possible.
--no-continue                    Do not resume partially downloaded files
                                 (restart from beginning)
--no-part                        Do not use .part files - write directly
                                 into output file
--no-mtime                       Do not use the Last-modified header to set
                                 the file modification time
--write-description              Write video description to a .description
                                 file
--write-info-json                Write video metadata to a .info.json file
--write-annotations              Write video annotations to a
                                 .annotations.xml file
--load-info-json FILE            JSON file containing the video information
                                 (created with the ""--write-info-json""
                                 option)
--cookies FILE                   File to read cookies from and dump cookie
                                 jar in
--cache-dir DIR                  Location in the filesystem where youtube-dl
                                 can store some downloaded information
                                 permanently. By default
                                 $XDG_CACHE_HOME/youtube-dl or
                                 ~/.cache/youtube-dl . At the moment, only
                                 YouTube player files (for videos with
                                 obfuscated signatures) are cached, but that
                                 may change.
--no-cache-dir                   Disable filesystem caching
--rm-cache-dir                   Delete all filesystem cache files

Thumbnail images:
--write-thumbnail                Write thumbnail image to disk
--write-all-thumbnails           Write all thumbnail image formats to disk
--list-thumbnails                Simulate and list all available thumbnail
                                 formats

Verbosity / Simulation Options:
-q, --quiet                      Activate quiet mode
--no-warnings                    Ignore warnings
-s, --simulate                   Do not download the video and do not write
                                 anything to disk
--skip-download                  Do not download the video
-g, --get-url                    Simulate, quiet but print URL
-e, --get-title                  Simulate, quiet but print title
--get-id                         Simulate, quiet but print id
--get-thumbnail                  Simulate, quiet but print thumbnail URL
--get-description                Simulate, quiet but print video description
--get-duration                   Simulate, quiet but print video length
--get-filename                   Simulate, quiet but print output filename
--get-format                     Simulate, quiet but print output format
-j, --dump-json                  Simulate, quiet but print JSON information.
                                 See the ""OUTPUT TEMPLATE"" for a description
                                 of available keys.
-J, --dump-single-json           Simulate, quiet but print JSON information
                                 for each command-line argument. If the URL
                                 refers to a playlist, dump the whole
                                 playlist information in a single line.
--print-json                     Be quiet and print the video information as
                                 JSON (video is still being downloaded).
--newline                        Output progress bar as new lines
--no-progress                    Do not print progress bar
--console-title                  Display progress in console titlebar
-v, --verbose                    Print various debugging information
--dump-pages                     Print downloaded pages encoded using base64
                                 to debug problems (very verbose)
--write-pages                    Write downloaded intermediary pages to
                                 files in the current directory to debug
                                 problems
--print-traffic                  Display sent and read HTTP traffic
-C, --call-home                  Contact the youtube-dl server for debugging
--no-call-home                   Do NOT contact the youtube-dl server for
                                 debugging

Workarounds:
--encoding ENCODING              Force the specified encoding (experimental)
--no-check-certificate           Suppress HTTPS certificate validation
--prefer-insecure                Use an unencrypted connection to retrieve
                                 information about the video. (Currently
                                 supported only for YouTube)
--user-agent UA                  Specify a custom user agent
--referer URL                    Specify a custom referer, use if the video
                                 access is restricted to one domain
--add-header FIELD:VALUE         Specify a custom HTTP header and its value,
                                 separated by a colon ':'. You can use this
                                 option multiple times
--bidi-workaround                Work around terminals that lack
                                 bidirectional text support. Requires bidiv
                                 or fribidi executable in PATH
--sleep-interval SECONDS         Number of seconds to sleep before each
                                 download when used alone or a lower bound
                                 of a range for randomized sleep before each
                                 download (minimum possible number of
                                 seconds to sleep) when used along with
                                 --max-sleep-interval.
--max-sleep-interval SECONDS     Upper bound of a range for randomized sleep
                                 before each download (maximum possible
                                 number of seconds to sleep). Must only be
                                 used along with --min-sleep-interval.

Video Format Options:
-f, --format FORMAT              Video format code, see the ""FORMAT
                                 SELECTION"" for all the info
--all-formats                    Download all available video formats
--prefer-free-formats            Prefer free video formats unless a specific
                                 one is requested
-F, --list-formats               List all available formats of requested
                                 videos
--youtube-skip-dash-manifest     Do not download the DASH manifests and
                                 related data on YouTube videos
--merge-output-format FORMAT     If a merge is required (e.g.
                                 bestvideo+bestaudio), output to given
                                 container format. One of mkv, mp4, ogg,
                                 webm, flv. Ignored if no merge is required

Subtitle Options:
--write-sub                      Write subtitle file
--write-auto-sub                 Write automatically generated subtitle file
                                 (YouTube only)
--all-subs                       Download all the available subtitles of the
                                 video
--list-subs                      List all available subtitles for the video
--sub-format FORMAT              Subtitle format, accepts formats
                                 preference, for example: ""srt"" or
                                 ""ass/srt/best""
--sub-lang LANGS                 Languages of the subtitles to download
                                 (optional) separated by commas, use --list-
                                 subs for available language tags

Authentication Options:
-u, --username USERNAME          Login with this account ID
-p, --password PASSWORD          Account password. If this option is left
                                 out, youtube-dl will ask interactively.
-2, --twofactor TWOFACTOR        Two-factor authentication code
-n, --netrc                      Use .netrc authentication data
--video-password PASSWORD        Video password (vimeo, smotri, youku)

Adobe Pass Options:
--ap-mso MSO                     Adobe Pass multiple-system operator (TV
                                 provider) identifier, use --ap-list-mso for
                                 a list of available MSOs
--ap-username USERNAME           Multiple-system operator account login
--ap-password PASSWORD           Multiple-system operator account password.
                                 If this option is left out, youtube-dl will
                                 ask interactively.
--ap-list-mso                    List all supported multiple-system
                                 operators

Post-processing Options:
-x, --extract-audio              Convert video files to audio-only files
                                 (requires ffmpeg or avconv and ffprobe or
                                 avprobe)
--audio-format FORMAT            Specify audio format: ""best"", ""aac"",
                                 ""flac"", ""mp3"", ""m4a"", ""opus"", ""vorbis"", or
                                 ""wav""; ""best"" by default; No effect without
                                 -x
--audio-quality QUALITY          Specify ffmpeg/avconv audio quality, insert
                                 a value between 0 (better) and 9 (worse)
                                 for VBR or a specific bitrate like 128K
                                 (default 5)
--recode-video FORMAT            Encode the video to another format if
                                 necessary (currently supported:
                                 mp4|flv|ogg|webm|mkv|avi)
--postprocessor-args ARGS        Give these arguments to the postprocessor
-k, --keep-video                 Keep the video file on disk after the post-
                                 processing; the video is erased by default
--no-post-overwrites             Do not overwrite post-processed files; the
                                 post-processed files are overwritten by
                                 default
--embed-subs                     Embed subtitles in the video (only for mp4,
                                 webm and mkv videos)
--embed-thumbnail                Embed thumbnail in the audio as cover art
--add-metadata                   Write metadata to the video file
--metadata-from-title FORMAT     Parse additional metadata like song title /
                                 artist from the video title. The format
                                 syntax is the same as --output. Regular
                                 expression with named capture groups may
                                 also be used. The parsed parameters replace
                                 existing values. Example: --metadata-from-
                                 title ""%(artist)s - %(title)s"" matches a
                                 title like ""Coldplay - Paradise"". Example
                                 (regex): --metadata-from-title
                                 ""(?P<artist>.+?) - (?P<title>.+)""
--xattrs                         Write metadata to the video file's xattrs
                                 (using dublin core and xdg standards)
--fixup POLICY                   Automatically correct known faults of the
                                 file. One of never (do nothing), warn (only
                                 emit a warning), detect_or_warn (the
                                 default; fix file if we can, warn
                                 otherwise)
--prefer-avconv                  Prefer avconv over ffmpeg for running the
                                 postprocessors
--prefer-ffmpeg                  Prefer ffmpeg over avconv for running the
                                 postprocessors (default)
--ffmpeg-location PATH           Location of the ffmpeg/avconv binary;
                                 either the path to the binary or its
                                 containing directory.
--exec CMD                       Execute a command on the file after
                                 downloading, similar to find's -exec
                                 syntax. Example: --exec 'adb push {}
                                 /sdcard/Music/ && rm {}'
--convert-subs FORMAT            Convert the subtitles to other format
                                 (currently supported: srt|ass|vtt|lrc)

CONFIGURATION
You can configure youtube-dl by placing any supported command line option to a configuration file. On Linux and macOS, the system wide configuration file is located at /etc/youtube-dl.conf and the user wide configuration file at ~/.config/youtube-dl/config. On Windows, the user wide configuration file locations are %APPDATA%\youtube-dl\config.txt or C:\Users\<user name>\youtube-dl.conf. Note that by default configuration file may not exist so you may need to create it yourself.
For example, with the following configuration file youtube-dl will always extract the audio, not copy the mtime, use a proxy and save all videos under Movies directory in your home directory:
# Lines starting with # are comments

# Always extract audio
-x

# Do not copy the mtime
--no-mtime

# Use this proxy
--proxy 127.0.0.1:3128

# Save all videos under Movies directory in your home directory
-o ~/Movies/%(title)s.%(ext)s

Note that options in configuration file are just the same options aka switches used in regular command line calls thus there must be no whitespace after - or --, e.g. -o or --proxy but not - o or -- proxy.
You can use --ignore-config if you want to disable the configuration file for a particular youtube-dl run.
You can also use --config-location if you want to use custom configuration file for a particular youtube-dl run.
Authentication with .netrc file
You may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with --username and --password) in order not to pass credentials as command line arguments on every youtube-dl execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a .netrc file on a per extractor basis. For that you will need to create a .netrc file in your $HOME and restrict permissions to read/write by only you:
touch $HOME/.netrc
chmod a-rwx,u+rw $HOME/.netrc

After that you can add credentials for an extractor in the following format, where extractor is the name of the extractor in lowercase:
machine <extractor> login <login> password <password>

For example:
machine youtube login myaccount@gmail.com password my_youtube_password
machine twitch login my_twitch_account_name password my_twitch_password

To activate authentication with the .netrc file you should pass --netrc to youtube-dl or place it in the configuration file.
On Windows you may also need to setup the %HOME% environment variable manually. For example:
set HOME=%USERPROFILE%

OUTPUT TEMPLATE
The -o option allows users to indicate a template for the output file names.
tl;dr: navigate me to examples.
The basic usage is not to set any template arguments when downloading a single file, like in youtube-dl -o funny_video.flv ""https://some/video"". However, it may contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to python string formatting operations. For example, %(NAME)s or %(NAME)05d. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations. Allowed names along with sequence type are:

id (string): Video identifier
title (string): Video title
url (string): Video URL
ext (string): Video filename extension
alt_title (string): A secondary title of the video
display_id (string): An alternative identifier for the video
uploader (string): Full name of the video uploader
license (string): License name the video is licensed under
creator (string): The creator of the video
release_date (string): The date (YYYYMMDD) when the video was released
timestamp (numeric): UNIX timestamp of the moment the video became available
upload_date (string): Video upload date (YYYYMMDD)
uploader_id (string): Nickname or id of the video uploader
channel (string): Full name of the channel the video is uploaded on
channel_id (string): Id of the channel
location (string): Physical location where the video was filmed
duration (numeric): Length of the video in seconds
view_count (numeric): How many users have watched the video on the platform
like_count (numeric): Number of positive ratings of the video
dislike_count (numeric): Number of negative ratings of the video
repost_count (numeric): Number of reposts of the video
average_rating (numeric): Average rating give by users, the scale used depends on the webpage
comment_count (numeric): Number of comments on the video
age_limit (numeric): Age restriction for the video (years)
is_live (boolean): Whether this video is a live stream or a fixed-length video
start_time (numeric): Time in seconds where the reproduction should start, as specified in the URL
end_time (numeric): Time in seconds where the reproduction should end, as specified in the URL
format (string): A human-readable description of the format
format_id (string): Format code specified by --format
format_note (string): Additional info about the format
width (numeric): Width of the video
height (numeric): Height of the video
resolution (string): Textual description of width and height
tbr (numeric): Average bitrate of audio and video in KBit/s
abr (numeric): Average audio bitrate in KBit/s
acodec (string): Name of the audio codec in use
asr (numeric): Audio sampling rate in Hertz
vbr (numeric): Average video bitrate in KBit/s
fps (numeric): Frame rate
vcodec (string): Name of the video codec in use
container (string): Name of the container format
filesize (numeric): The number of bytes, if known in advance
filesize_approx (numeric): An estimate for the number of bytes
protocol (string): The protocol that will be used for the actual download
extractor (string): Name of the extractor
extractor_key (string): Key name of the extractor
epoch (numeric): Unix epoch when creating the file
autonumber (numeric): Five-digit number that will be increased with each download, starting at zero
playlist (string): Name or id of the playlist that contains the video
playlist_index (numeric): Index of the video in the playlist padded with leading zeros according to the total length of the playlist
playlist_id (string): Playlist identifier
playlist_title (string): Playlist title
playlist_uploader (string): Full name of the playlist uploader
playlist_uploader_id (string): Nickname or id of the playlist uploader

Available for the video that belongs to some logical chapter or section:

chapter (string): Name or title of the chapter the video belongs to
chapter_number (numeric): Number of the chapter the video belongs to
chapter_id (string): Id of the chapter the video belongs to

Available for the video that is an episode of some series or programme:

series (string): Title of the series or programme the video episode belongs to
season (string): Title of the season the video episode belongs to
season_number (numeric): Number of the season the video episode belongs to
season_id (string): Id of the season the video episode belongs to
episode (string): Title of the video episode
episode_number (numeric): Number of the video episode within a season
episode_id (string): Id of the video episode

Available for the media that is a track or a part of a music album:

track (string): Title of the track
track_number (numeric): Number of the track within an album or a disc
track_id (string): Id of the track
artist (string): Artist(s) of the track
genre (string): Genre(s) of the track
album (string): Title of the album the track belongs to
album_type (string): Type of the album
album_artist (string): List of all artists appeared on the album
disc_number (numeric): Number of the disc or other physical medium the track belongs to
release_year (numeric): Year (YYYY) when the album was released

Each aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. Note that some of the sequences are not guaranteed to be present since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with NA.
For example for -o %(title)s-%(id)s.%(ext)s and an mp4 video with title youtube-dl test video and id BaW_jenozKcj, this will result in a youtube-dl test video-BaW_jenozKcj.mp4 file created in the current directory.
For numeric sequences you can use numeric related formatting, for example, %(view_count)05d will result in a string with view count padded with zeros up to 5 characters, like in 00042.
Output templates can also contain arbitrary hierarchical path, e.g. -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you.
To use percent literals in an output template use %%. To output to stdout use -o -.
The current default template is %(title)s-%(id)s.%(ext)s.
In some cases, you don't want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit-unsafe channel. In these cases, add the --restrict-filenames flag to get a shorter title:
Output template and Windows batch files
If you are using an output template inside a Windows batch file then you must escape plain percent characters (%) by doubling, so that -o ""%(title)s-%(id)s.%(ext)s"" should become -o ""%%(title)s-%%(id)s.%%(ext)s"". However you should not touch %'s that are not plain characters, e.g. environment variables for expansion should stay intact: -o ""C:\%HOMEPATH%\Desktop\%%(title)s.%%(ext)s"".
Output template examples
Note that on Windows you may need to use double quotes instead of single.
$ youtube-dl --get-filename -o '%(title)s.%(ext)s' BaW_jenozKc
youtube-dl test video ''_ä↭𝕐.mp4    # All kinds of weird characters

$ youtube-dl --get-filename -o '%(title)s.%(ext)s' BaW_jenozKc --restrict-filenames
youtube-dl_test_video_.mp4          # A simple file name

# Download YouTube playlist videos in separate directory indexed by video order in a playlist
$ youtube-dl -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download all playlists of YouTube channel/user keeping each playlist in separate directory:
$ youtube-dl -o '%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' https://www.youtube.com/user/TheLinuxFoundation/playlists

# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home
$ youtube-dl -u user -p password -o '~/MyVideos/%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s' https://www.udemy.com/java-tutorial/

# Download entire series season keeping each series and each season in separate directory under C:/MyVideos
$ youtube-dl -o ""C:/MyVideos/%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s"" https://videomore.ru/kino_v_detalayah/5_sezon/367617

# Stream the video being downloaded to stdout
$ youtube-dl -o - BaW_jenozKc
FORMAT SELECTION
By default youtube-dl tries to download the best available quality, i.e. if you want the best quality you don't need to pass any special options, youtube-dl will guess it for you by default.
But sometimes you may want to download in a different format, for example when you are on a slow or intermittent connection. The key mechanism for achieving this is so-called format selection based on which you can explicitly specify desired format, select formats based on some criterion or criteria, setup precedence and much more.
The general syntax for format selection is --format FORMAT or shorter -f FORMAT where FORMAT is a selector expression, i.e. an expression that describes format or formats you would like to download.
tl;dr: navigate me to examples.
The simplest case is requesting a specific format, for example with -f 22 you can download the format with format code equal to 22. You can get the list of available format codes for particular video using --list-formats or -F. Note that these format codes are extractor specific.
You can also use a file extension (currently 3gp, aac, flv, m4a, mp3, mp4, ogg, wav, webm are supported) to download the best quality format of a particular file extension served as a single file, e.g. -f webm will download the best quality format with the webm extension served as a single file.
You can also use special names to select particular edge case formats:

best: Select the best quality format represented by a single file with video and audio.
worst: Select the worst quality format represented by a single file with video and audio.
bestvideo: Select the best quality video-only format (e.g. DASH video). May not be available.
worstvideo: Select the worst quality video-only format. May not be available.
bestaudio: Select the best quality audio only-format. May not be available.
worstaudio: Select the worst quality audio only-format. May not be available.

For example, to download the worst quality video-only format you can use -f worstvideo.
If you want to download multiple videos and they don't have the same formats available, you can specify the order of preference using slashes. Note that slash is left-associative, i.e. formats on the left hand side are preferred, for example -f 22/17/18 will download format 22 if it's available, otherwise it will download format 17 if it's available, otherwise it will download format 18 if it's available, otherwise it will complain that no suitable formats are available for download.
If you want to download several formats of the same video use a comma as a separator, e.g. -f 22,17,18 will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: -f 136/137/mp4/bestvideo,140/m4a/bestaudio.
You can also filter the video formats by putting a condition in brackets, as in -f ""best[height=720]"" (or -f ""[filesize>10M]"").
The following numeric meta fields can be used with comparisons <, <=, >, >=, = (equals), != (not equals):

filesize: The number of bytes, if known in advance
width: Width of the video, if known
height: Height of the video, if known
tbr: Average bitrate of audio and video in KBit/s
abr: Average audio bitrate in KBit/s
vbr: Average video bitrate in KBit/s
asr: Audio sampling rate in Hertz
fps: Frame rate

Also filtering work for comparisons = (equals), ^= (starts with), $= (ends with), *= (contains) and following string meta fields:

ext: File extension
acodec: Name of the audio codec in use
vcodec: Name of the video codec in use
container: Name of the container format
protocol: The protocol that will be used for the actual download, lower-case (http, https, rtsp, rtmp, rtmpe, mms, f4m, ism, http_dash_segments, m3u8, or m3u8_native)
format_id: A short description of the format

Any string comparison may be prefixed with negation ! in order to produce an opposite comparison, e.g. !*= (does not contain).
Note that none of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by particular extractor, i.e. the metadata offered by the video hoster.
Formats for which the value is not known are excluded unless you put a question mark (?) after the operator. You can combine format filters, so -f ""[height <=? 720][tbr>500]"" selects up to 720p videos (or videos where the height is not known) with a bitrate of at least 500 KBit/s.
You can merge the video and audio of two formats into a single file using -f <video-format>+<audio-format> (requires ffmpeg or avconv installed), for example -f bestvideo+bestaudio will download the best video-only format, the best audio-only format and mux them together with ffmpeg/avconv.
Format selectors can also be grouped using parentheses, for example if you want to download the best mp4 and webm formats with a height lower than 480 you can use -f '(mp4,webm)[height<480]'.
Since the end of April 2015 and version 2015.04.26, youtube-dl uses -f bestvideo+bestaudio/best as the default format selection (see #5447, #5456). If ffmpeg or avconv are installed this results in downloading bestvideo and bestaudio separately and muxing them together into a single file giving the best overall quality available. Otherwise it falls back to best and results in downloading the best available quality served as a single file. best is also needed for videos that don't come from YouTube because they don't provide the audio and video in two different files. If you want to only download some DASH formats (for example if you are not interested in getting videos with a resolution higher than 1080p), you can add -f bestvideo[height<=?1080]+bestaudio/best to your configuration file. Note that if you use youtube-dl to stream to stdout (and most likely to pipe it to your media player then), i.e. you explicitly specify output template as -o -, youtube-dl still uses -f best format selection in order to start content delivery immediately to your player and not to wait until bestvideo and bestaudio are downloaded and muxed.
If you want to preserve the old format selection behavior (prior to youtube-dl 2015.04.26), i.e. you want to download the best available quality media served as a single file, you should explicitly specify your choice with -f best. You may want to add it to the configuration file in order not to type it every time you run youtube-dl.
Format selection examples
Note that on Windows you may need to use double quotes instead of single.
# Download best mp4 format available or any other best if no mp4 available
$ youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'

# Download best format available but no better than 480p
$ youtube-dl -f 'bestvideo[height<=480]+bestaudio/best[height<=480]'

# Download best video only format but no bigger than 50 MB
$ youtube-dl -f 'best[filesize<50M]'

# Download best format available via direct link over HTTP/HTTPS protocol
$ youtube-dl -f '(bestvideo+bestaudio/best)[protocol^=http]'

# Download the best video format and the best audio format without merging them
$ youtube-dl -f 'bestvideo,bestaudio' -o '%(title)s.f%(format_id)s.%(ext)s'
Note that in the last example, an output template is recommended as bestvideo and bestaudio may have the same file name.
VIDEO SELECTION
Videos can be filtered by their upload date using the options --date, --datebefore or --dateafter. They accept dates in two formats:

Absolute dates: Dates in the format YYYYMMDD.
Relative dates: Dates in the format (now|today)[+-][0-9](day|week|month|year)(s)?

Examples:
# Download only the videos uploaded in the last 6 months
$ youtube-dl --dateafter now-6months

# Download only the videos uploaded on January 1, 1970
$ youtube-dl --date 19700101

$ # Download only the videos uploaded in the 200x decade
$ youtube-dl --dateafter 20000101 --datebefore 20091231
FAQ
How do I update youtube-dl?
If you've followed our manual installation instructions, you can simply run youtube-dl -U (or, on Linux, sudo youtube-dl -U).
If you have used pip, a simple sudo pip install -U youtube-dl is sufficient to update.
If you have installed youtube-dl using a package manager like apt-get or yum, use the standard system update mechanism to update. Note that distribution packages are often outdated. As a rule of thumb, youtube-dl releases at least once a month, and often weekly or even daily. Simply go to https://yt-dl.org to find out the current version. Unfortunately, there is nothing we youtube-dl developers can do if your distribution serves a really outdated version. You can (and should) complain to your distribution in their bugtracker or support forum.
As a last resort, you can also uninstall the version installed by your package manager and follow our manual installation instructions. For that, remove the distribution's package, with a line like
sudo apt-get remove -y youtube-dl

Afterwards, simply follow our manual installation instructions:
sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
hash -r

Again, from then on you'll be able to update with sudo youtube-dl -U.
youtube-dl is extremely slow to start on Windows
Add a file exclusion for youtube-dl.exe in Windows Defender settings.
I'm getting an error Unable to extract OpenGraph title on YouTube playlists
YouTube changed their playlist format in March 2014 and later on, so you'll need at least youtube-dl 2014.07.25 to download all YouTube videos.
If you have installed youtube-dl with a package manager, pip, setup.py or a tarball, please use that to update. Note that Ubuntu packages do not seem to get updated anymore. Since we are not affiliated with Ubuntu, there is little we can do. Feel free to report bugs to the Ubuntu packaging people - all they have to do is update the package to a somewhat recent version. See above for a way to update.
I'm getting an error when trying to use output template: error: using output template conflicts with using title, video ID or auto number
Make sure you are not using -o with any of these options -t, --title, --id, -A or --auto-number set in command line or in a configuration file. Remove the latter if any.
Do I always have to pass -citw?
By default, youtube-dl intends to have the best options (incidentally, if you have a convincing case that these should be different, please file an issue where you explain that). Therefore, it is unnecessary and sometimes harmful to copy long option strings from webpages. In particular, the only option out of -citw that is regularly useful is -i.
Can you please put the -b option back?
Most people asking this question are not aware that youtube-dl now defaults to downloading the highest available quality as reported by YouTube, which will be 1080p or 720p in some cases, so you no longer need the -b option. For some specific videos, maybe YouTube does not report them to be available in a specific high quality format you're interested in. In that case, simply request it with the -f option and youtube-dl will try to download it.
I get HTTP error 402 when trying to download a video. What's this?
Apparently YouTube requires you to pass a CAPTCHA test if you download too much. We're considering to provide a way to let you solve the CAPTCHA, but at the moment, your best course of action is pointing a web browser to the youtube URL, solving the CAPTCHA, and restart youtube-dl.
Do I need any other programs?
youtube-dl works fine on its own on most sites. However, if you want to convert video/audio, you'll need avconv or ffmpeg. On some sites - most notably YouTube - videos can be retrieved in a higher quality format without sound. youtube-dl will detect whether avconv/ffmpeg is present and automatically pick the best option.
Videos or video formats streamed via RTMP protocol can only be downloaded when rtmpdump is installed. Downloading MMS and RTSP videos requires either mplayer or mpv to be installed.
I have downloaded a video but how can I play it?
Once the video is fully downloaded, use any video player, such as mpv, vlc or mplayer.
I extracted a video URL with -g, but it does not play on another machine / in my web browser.
It depends a lot on the service. In many cases, requests for the video (to download/play it) must come from the same IP address and with the same cookies and/or HTTP headers. Use the --cookies option to write the required cookies into a file, and advise your downloader to read cookies from that file. Some sites also require a common user agent to be used, use --dump-user-agent to see the one in use by youtube-dl. You can also get necessary cookies and HTTP headers from JSON output obtained with --dump-json.
It may be beneficial to use IPv6; in some cases, the restrictions are only applied to IPv4. Some services (sometimes only for a subset of videos) do not restrict the video URL by IP address, cookie, or user-agent, but these are the exception rather than the rule.
Please bear in mind that some URL protocols are not supported by browsers out of the box, including RTMP. If you are using -g, your own downloader must support these as well.
If you want to play the video on a machine that is not running youtube-dl, you can relay the video content from the machine that runs youtube-dl. You can use -o - to let youtube-dl stream a video to stdout, or simply allow the player to download the files written by youtube-dl in turn.
ERROR: no fmt_url_map or conn information found in video info
YouTube has switched to a new video info format in July 2011 which is not supported by old versions of youtube-dl. See above for how to update youtube-dl.
ERROR: unable to download video
YouTube requires an additional signature since September 2012 which is not supported by old versions of youtube-dl. See above for how to update youtube-dl.
Video URL contains an ampersand and I'm getting some strange output [1] 2839 or 'v' is not recognized as an internal or external command
That's actually the output from your shell. Since ampersand is one of the special shell characters it's interpreted by the shell preventing you from passing the whole URL to youtube-dl. To disable your shell from interpreting the ampersands (or any other special characters) you have to either put the whole URL in quotes or escape them with a backslash (which approach will work depends on your shell).
For example if your URL is https://www.youtube.com/watch?t=4&v=BaW_jenozKc you should end up with following command:
youtube-dl 'https://www.youtube.com/watch?t=4&v=BaW_jenozKc'
or
youtube-dl https://www.youtube.com/watch?t=4\&v=BaW_jenozKc
For Windows you have to use the double quotes:
youtube-dl ""https://www.youtube.com/watch?t=4&v=BaW_jenozKc""
ExtractorError: Could not find JS function u'OF'
In February 2015, the new YouTube player contained a character sequence in a string that was misinterpreted by old versions of youtube-dl. See above for how to update youtube-dl.
HTTP Error 429: Too Many Requests or 402: Payment Required
These two error codes indicate that the service is blocking your IP address because of overuse. Contact the service and ask them to unblock your IP address, or - if you have acquired a whitelisted IP address already - use the --proxy or --source-address options to select another IP address.
SyntaxError: Non-ASCII character
The error
File ""youtube-dl"", line 2
SyntaxError: Non-ASCII character '\x93' ...

means you're using an outdated version of Python. Please update to Python 2.6 or 2.7.
What is this binary file? Where has the code gone?
Since June 2012 (#342) youtube-dl is packed as an executable zipfile, simply unzip it (might need renaming to youtube-dl.zip first on some systems) or clone the git repository, as laid out above. If you modify the code, you can run it by executing the __main__.py file. To recompile the executable, run make youtube-dl.
The exe throws an error due to missing MSVCR100.dll
To run the exe you need to install first the Microsoft Visual C++ 2010 Redistributable Package (x86).
On Windows, how should I set up ffmpeg and youtube-dl? Where should I put the exe files?
If you put youtube-dl and ffmpeg in the same directory that you're running the command from, it will work, but that's rather cumbersome.
To make a different directory work - either for ffmpeg, or for youtube-dl, or for both - simply create the directory (say, C:\bin, or C:\Users\<User name>\bin), put all the executables directly in there, and then set your PATH environment variable to include that directory.
From then on, after restarting your shell, you will be able to access both youtube-dl and ffmpeg (and youtube-dl will be able to find ffmpeg) by simply typing youtube-dl or ffmpeg, no matter what directory you're in.
How do I put downloads into a specific folder?
Use the -o to specify an output template, for example -o ""/home/user/videos/%(title)s-%(id)s.%(ext)s"". If you want this for all of your downloads, put the option into your configuration file.
How do I download a video starting with a -?
Either prepend https://www.youtube.com/watch?v= or separate the ID from the options with --:
youtube-dl -- -wNyEUrxzFU
youtube-dl ""https://www.youtube.com/watch?v=-wNyEUrxzFU""

How do I pass cookies to youtube-dl?
Use the --cookies option, for example --cookies /path/to/cookies/file.txt.
In order to extract cookies from browser use any conforming browser extension for exporting cookies. For example, cookies.txt (for Chrome) or cookies.txt (for Firefox).
Note that the cookies file must be in Mozilla/Netscape format and the first line of the cookies file must be either # HTTP Cookie File or # Netscape HTTP Cookie File. Make sure you have correct newline format in the cookies file and convert newlines if necessary to correspond with your OS, namely CRLF (\r\n) for Windows and LF (\n) for Unix and Unix-like systems (Linux, macOS, etc.). HTTP Error 400: Bad Request when using --cookies is a good sign of invalid newline format.
Passing cookies to youtube-dl is a good way to workaround login when a particular extractor does not implement it explicitly. Another use case is working around CAPTCHA some websites require you to solve in particular cases in order to get access (e.g. YouTube, CloudFlare).
How do I stream directly to media player?
You will first need to tell youtube-dl to stream media to stdout with -o -, and also tell your media player to read from stdin (it must be capable of this for streaming) and then pipe former to latter. For example, streaming to vlc can be achieved with:
youtube-dl -o - ""https://www.youtube.com/watch?v=BaW_jenozKcj"" | vlc -

How do I download only new videos from a playlist?
Use download-archive feature. With this feature you should initially download the complete playlist with --download-archive /path/to/download/archive/file.txt that will record identifiers of all the videos in a special file. Each subsequent run with the same --download-archive will download only new videos and skip all videos that have been downloaded before. Note that only successful downloads are recorded in the file.
For example, at first,
youtube-dl --download-archive archive.txt ""https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re""

will download the complete PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re playlist and create a file archive.txt. Each subsequent run will only download new videos if any:
youtube-dl --download-archive archive.txt ""https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re""

Should I add --hls-prefer-native into my config?
When youtube-dl detects an HLS video, it can download it either with the built-in downloader or ffmpeg. Since many HLS streams are slightly invalid and ffmpeg/youtube-dl each handle some invalid cases better than the other, there is an option to switch the downloader if needed.
When youtube-dl knows that one particular downloader works better for a given website, that downloader will be picked. Otherwise, youtube-dl will pick the best downloader for general compatibility, which at the moment happens to be ffmpeg. This choice may change in future versions of youtube-dl, with improvements of the built-in downloader and/or ffmpeg.
In particular, the generic extractor (used when your website is not in the list of supported sites by youtube-dl cannot mandate one specific downloader.
If you put either --hls-prefer-native or --hls-prefer-ffmpeg into your configuration, a different subset of videos will fail to download correctly. Instead, it is much better to file an issue or a pull request which details why the native or the ffmpeg HLS downloader is a better choice for your use case.
Can you add support for this anime video site, or site which shows current movies for free?
As a matter of policy (as well as legality), youtube-dl does not include support for services that specialize in infringing copyright. As a rule of thumb, if you cannot easily find a video that the service is quite obviously allowed to distribute (i.e. that has been uploaded by the creator, the creator's distributor, or is published under a free license), the service is probably unfit for inclusion to youtube-dl.
A note on the service that they don't host the infringing content, but just link to those who do, is evidence that the service should not be included into youtube-dl. The same goes for any DMCA note when the whole front page of the service is filled with videos they are not allowed to distribute. A ""fair use"" note is equally unconvincing if the service shows copyright-protected videos in full without authorization.
Support requests for services that do purchase the rights to distribute their content are perfectly fine though. If in doubt, you can simply include a source that mentions the legitimate purchase of content.
How can I speed up work on my issue?
(Also known as: Help, my important issue not being solved!) The youtube-dl core developer team is quite small. While we do our best to solve as many issues as possible, sometimes that can take quite a while. To speed up your issue, here's what you can do:
First of all, please do report the issue at our issue tracker. That allows us to coordinate all efforts by users and developers, and serves as a unified point. Unfortunately, the youtube-dl project has grown too large to use personal email as an effective communication channel.
Please read the bug reporting instructions below. A lot of bugs lack all the necessary information. If you can, offer proxy, VPN, or shell access to the youtube-dl developers. If you are able to, test the issue from multiple computers in multiple countries to exclude local censorship or misconfiguration issues.
If nobody is interested in solving your issue, you are welcome to take matters into your own hands and submit a pull request (or coerce/pay somebody else to do so).
Feel free to bump the issue from time to time by writing a small comment (""Issue is still present in youtube-dl version ...from France, but fixed from Belgium""), but please not more than once a month. Please do not declare your issue as important or urgent.
How can I detect whether a given URL is supported by youtube-dl?
For one, have a look at the list of supported sites. Note that it can sometimes happen that the site changes its URL scheme (say, from https://example.com/video/1234567 to https://example.com/v/1234567 ) and youtube-dl reports an URL of a service in that list as unsupported. In that case, simply report a bug.
It is not possible to detect whether a URL is supported or not. That's because youtube-dl contains a generic extractor which matches all URLs. You may be tempted to disable, exclude, or remove the generic extractor, but the generic extractor not only allows users to extract videos from lots of websites that embed a video from another service, but may also be used to extract video from a service that it's hosting itself. Therefore, we neither recommend nor support disabling, excluding, or removing the generic extractor.
If you want to find out whether a given URL is supported, simply call youtube-dl with it. If you get no videos back, chances are the URL is either not referring to a video or unsupported. You can find out which by examining the output (if you run youtube-dl on the console) or catching an UnsupportedError exception if you run it from a Python program.
Why do I need to go through that much red tape when filing bugs?
Before we had the issue template, despite our extensive bug reporting instructions, about 80% of the issue reports we got were useless, for instance because people used ancient versions hundreds of releases old, because of simple syntactic errors (not in youtube-dl but in general shell usage), because the problem was already reported multiple times before, because people did not actually read an error message, even if it said ""please install ffmpeg"", because people did not mention the URL they were trying to download and many more simple, easy-to-avoid problems, many of whom were totally unrelated to youtube-dl.
youtube-dl is an open-source project manned by too few volunteers, so we'd rather spend time fixing bugs where we are certain none of those simple problems apply, and where we can be reasonably confident to be able to reproduce the issue without asking the reporter repeatedly. As such, the output of youtube-dl -v YOUR_URL_HERE is really all that's required to file an issue. The issue template also guides you through some basic steps you can do, such as checking that your version of youtube-dl is current.
DEVELOPER INSTRUCTIONS
Most users do not need to build youtube-dl and can download the builds or get them from their distribution.
To run youtube-dl as a developer, you don't need to build anything either. Simply execute
python -m youtube_dl

To run the test, simply invoke your favorite test runner, or execute a test file directly; any of the following work:
python -m unittest discover
python test/test_download.py
nosetests

See item 6 of new extractor tutorial for how to run extractor specific test cases.
If you want to create a build of youtube-dl yourself, you'll need

python
make (only GNU make is supported)
pandoc
zip
nosetests

Adding support for a new site
If you want to add support for a new site, first of all make sure this site is not dedicated to copyright infringement. youtube-dl does not support such sites thus pull requests adding support for them will be rejected.
After you have ensured this site is distributing its content legally, you can follow this quick list (assuming your service is called yourextractor):


Fork this repository


Check out the source code with:
 git clone git@github.com:YOUR_GITHUB_USERNAME/youtube-dl.git



Start a new git branch with
 cd youtube-dl
 git checkout -b yourextractor



Start with this simple template and save it to youtube_dl/extractor/yourextractor.py:
# coding: utf-8
from __future__ import unicode_literals

from .common import InfoExtractor


class YourExtractorIE(InfoExtractor):
    _VALID_URL = r'https?://(?:www\.)?yourextractor\.com/watch/(?P<id>[0-9]+)'
    _TEST = {
        'url': 'https://yourextractor.com/watch/42',
        'md5': 'TODO: md5 sum of the first 10241 bytes of the video file (use --test)',
        'info_dict': {
            'id': '42',
            'ext': 'mp4',
            'title': 'Video title goes here',
            'thumbnail': r're:^https?://.*\.jpg$',
            # TODO more properties, either as:
            # * A value
            # * MD5 checksum; start the string with md5:
            # * A regular expression; start the string with re:
            # * Any Python type (for example int or float)
        }
    }

    def _real_extract(self, url):
        video_id = self._match_id(url)
        webpage = self._download_webpage(url, video_id)

        # TODO more code goes here, for example ...
        title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title')

        return {
            'id': video_id,
            'title': title,
            'description': self._og_search_description(webpage),
            'uploader': self._search_regex(r'<div[^>]+id=""uploader""[^>]*>([^<]+)<', webpage, 'uploader', fatal=False),
            # TODO more properties (see youtube_dl/extractor/common.py)
        }


Add an import in youtube_dl/extractor/extractors.py.


Run python test/test_download.py TestDownload.test_YourExtractor. This should fail at first, but you can continually re-run it until you're done. If you decide to add more than one test, then rename _TEST to _TESTS and make it into a list of dictionaries. The tests will then be named TestDownload.test_YourExtractor, TestDownload.test_YourExtractor_1, TestDownload.test_YourExtractor_2, etc. Note that tests with only_matching key in test's dict are not counted in.


Have a look at youtube_dl/extractor/common.py for possible helper methods and a detailed description of what your extractor should and may return. Add tests and code for as many as you want.


Make sure your code follows youtube-dl coding conventions and check the code with flake8:
 $ flake8 youtube_dl/extractor/yourextractor.py



Make sure your code works under all Python versions claimed supported by youtube-dl, namely 2.6, 2.7, and 3.2+.


When the tests pass, add the new files and commit them and push the result, like this:
$ git add youtube_dl/extractor/extractors.py
$ git add youtube_dl/extractor/yourextractor.py
$ git commit -m '[yourextractor] Add new extractor'
$ git push origin yourextractor



Finally, create a pull request. We'll then review and merge it.


In any case, thank you very much for your contributions!
youtube-dl coding conventions
This section introduces a guide lines for writing idiomatic, robust and future-proof extractor code.
Extractors are very fragile by nature since they depend on the layout of the source data provided by 3rd party media hosters out of your control and this layout tends to change. As an extractor implementer your task is not only to write code that will extract media links and metadata correctly but also to minimize dependency on the source's layout and even to make the code foresee potential future changes and be ready for that. This is important because it will allow the extractor not to break on minor layout changes thus keeping old youtube-dl versions working. Even though this breakage issue is easily fixed by emitting a new version of youtube-dl with a fix incorporated, all the previous versions become broken in all repositories and distros' packages that may not be so prompt in fetching the update from us. Needless to say, some non rolling release distros may never receive an update at all.
Mandatory and optional metafields
For extraction to work youtube-dl relies on metadata your extractor extracts and provides to youtube-dl expressed by an information dictionary or simply info dict. Only the following meta fields in the info dict are considered mandatory for a successful extraction process by youtube-dl:

id (media identifier)
title (media title)
url (media download URL) or formats

In fact only the last option is technically mandatory (i.e. if you can't figure out the download location of the media the extraction does not make any sense). But by convention youtube-dl also treats id and title as mandatory. Thus the aforementioned metafields are the critical data that the extraction does not make any sense without and if any of them fail to be extracted then the extractor is considered completely broken.
Any field apart from the aforementioned ones are considered optional. That means that extraction should be tolerant to situations when sources for these fields can potentially be unavailable (even if they are always available at the moment) and future-proof in order not to break the extraction of general purpose mandatory fields.
Example
Say you have some source dictionary meta that you've fetched as JSON with HTTP request and it has a key summary:
meta = self._download_json(url, video_id)
Assume at this point meta's layout is:
{
    ...
    ""summary"": ""some fancy summary text"",
    ...
}
Assume you want to extract summary and put it into the resulting info dict as description. Since description is an optional meta field you should be ready that this key may be missing from the meta dict, so that you should extract it like:
description = meta.get('summary')  # correct
and not like:
description = meta['summary']  # incorrect
The latter will break extraction process with KeyError if summary disappears from meta at some later time but with the former approach extraction will just go ahead with description set to None which is perfectly fine (remember None is equivalent to the absence of data).
Similarly, you should pass fatal=False when extracting optional data from a webpage with _search_regex, _html_search_regex or similar methods, for instance:
description = self._search_regex(
    r'<span[^>]+id=""title""[^>]*>([^<]+)<',
    webpage, 'description', fatal=False)
With fatal set to False if _search_regex fails to extract description it will emit a warning and continue extraction.
You can also pass default=<some fallback value>, for example:
description = self._search_regex(
    r'<span[^>]+id=""title""[^>]*>([^<]+)<',
    webpage, 'description', default=None)
On failure this code will silently continue the extraction with description set to None. That is useful for metafields that may or may not be present.
Provide fallbacks
When extracting metadata try to do so from multiple sources. For example if title is present in several places, try extracting from at least some of them. This makes it more future-proof in case some of the sources become unavailable.
Example
Say meta from the previous example has a title and you are about to extract it. Since title is a mandatory meta field you should end up with something like:
title = meta['title']
If title disappears from meta in future due to some changes on the hoster's side the extraction would fail since title is mandatory. That's expected.
Assume that you have some another source you can extract title from, for example og:title HTML meta of a webpage. In this case you can provide a fallback scenario:
title = meta.get('title') or self._og_search_title(webpage)
This code will try to extract from meta first and if it fails it will try extracting og:title from a webpage.
Regular expressions
Don't capture groups you don't use
Capturing group must be an indication that it's used somewhere in the code. Any group that is not used must be non capturing.
Example
Don't capture id attribute name here since you can't use it for anything anyway.
Correct:
r'(?:id|ID)=(?P<id>\d+)'
Incorrect:
r'(id|ID)=(?P<id>\d+)'
Make regular expressions relaxed and flexible
When using regular expressions try to write them fuzzy, relaxed and flexible, skipping insignificant parts that are more likely to change, allowing both single and double quotes for quoted values and so on.
Example
Say you need to extract title from the following HTML code:
<span style=""position: absolute; left: 910px; width: 90px; float: right; z-index: 9999;"" class=""title"">some fancy title</span>
The code for that task should look similar to:
title = self._search_regex(
    r'<span[^>]+class=""title""[^>]*>([^<]+)', webpage, 'title')
Or even better:
title = self._search_regex(
    r'<span[^>]+class=([""\'])title\1[^>]*>(?P<title>[^<]+)',
    webpage, 'title', group='title')
Note how you tolerate potential changes in the style attribute's value or switch from using double quotes to single for class attribute:
The code definitely should not look like:
title = self._search_regex(
    r'<span style=""position: absolute; left: 910px; width: 90px; float: right; z-index: 9999;"" class=""title"">(.*?)</span>',
    webpage, 'title', group='title')
Long lines policy
There is a soft limit to keep lines of code under 80 characters long. This means it should be respected if possible and if it does not make readability and code maintenance worse.
For example, you should never split long string literals like URLs or some other often copied entities over multiple lines to fit this limit:
Correct:
'https://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'
Incorrect:
'https://www.youtube.com/watch?v=FqZTN594JQw&list='
'PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'
Inline values
Extracting variables is acceptable for reducing code duplication and improving readability of complex expressions. However, you should avoid extracting variables used only once and moving them to opposite parts of the extractor file, which makes reading the linear flow difficult.
Example
Correct:
title = self._html_search_regex(r'<title>([^<]+)</title>', webpage, 'title')
Incorrect:
TITLE_RE = r'<title>([^<]+)</title>'
# ...some lines of code...
title = self._html_search_regex(TITLE_RE, webpage, 'title')
Collapse fallbacks
Multiple fallback values can quickly become unwieldy. Collapse multiple fallback values into a single expression via a list of patterns.
Example
Good:
description = self._html_search_meta(
    ['og:description', 'description', 'twitter:description'],
    webpage, 'description', default=None)
Unwieldy:
description = (
    self._og_search_description(webpage, default=None)
    or self._html_search_meta('description', webpage, default=None)
    or self._html_search_meta('twitter:description', webpage, default=None))
Methods supporting list of patterns are: _search_regex, _html_search_regex, _og_search_property, _html_search_meta.
Trailing parentheses
Always move trailing parentheses after the last argument.
Example
Correct:
    lambda x: x['ResultSet']['Result'][0]['VideoUrlSet']['VideoUrl'],
    list)
Incorrect:
    lambda x: x['ResultSet']['Result'][0]['VideoUrlSet']['VideoUrl'],
    list,
)
Use convenience conversion and parsing functions
Wrap all extracted numeric data into safe functions from youtube_dl/utils.py: int_or_none, float_or_none. Use them for string to number conversions as well.
Use url_or_none for safe URL processing.
Use try_get for safe metadata extraction from parsed JSON.
Use unified_strdate for uniform upload_date or any YYYYMMDD meta field extraction, unified_timestamp for uniform timestamp extraction, parse_filesize for filesize extraction, parse_count for count meta fields extraction, parse_resolution, parse_duration for duration extraction, parse_age_limit for age_limit extraction.
Explore youtube_dl/utils.py for more useful convenience functions.
More examples
Safely extract optional description from parsed JSON
description = try_get(response, lambda x: x['result']['video'][0]['summary'], compat_str)
Safely extract more optional metadata
video = try_get(response, lambda x: x['result']['video'][0], dict) or {}
description = video.get('summary')
duration = float_or_none(video.get('durationMs'), scale=1000)
view_count = int_or_none(video.get('views'))
EMBEDDING YOUTUBE-DL
youtube-dl makes the best effort to be a good command-line program, and thus should be callable from any programming language. If you encounter any problems parsing its output, feel free to create a report.
From a Python program, you can embed youtube-dl in a more powerful fashion, like this:
from __future__ import unicode_literals
import youtube_dl

ydl_opts = {}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(['https://www.youtube.com/watch?v=BaW_jenozKc'])
Most likely, you'll want to use various options. For a list of options available, have a look at youtube_dl/YoutubeDL.py. For a start, if you want to intercept youtube-dl's output, set a logger object.
Here's a more complete example of a program that outputs only errors (and a short message after the download is finished), and downloads/converts the video to an mp3 file:
from __future__ import unicode_literals
import youtube_dl


class MyLogger(object):
    def debug(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(['https://www.youtube.com/watch?v=BaW_jenozKc'])
BUGS
Bugs and suggestions should be reported at: https://github.com/ytdl-org/youtube-dl/issues. Unless you were prompted to or there is another pertinent reason (e.g. GitHub fails to accept the bug report), please do not send bug reports via personal email. For discussions, join us in the IRC channel #youtube-dl on freenode (webchat).
Please include the full output of youtube-dl when run with -v, i.e. add -v flag to your command line, copy the whole output and post it in the issue body wrapped in ``` for better formatting. It should look similar to this:
$ youtube-dl -v <your command line>
[debug] System config: []
[debug] User config: []
[debug] Command-line args: [u'-v', u'https://www.youtube.com/watch?v=BaW_jenozKcj']
[debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251
[debug] youtube-dl version 2015.12.06
[debug] Git HEAD: 135392e
[debug] Python version 2.6.6 - Windows-2003Server-5.2.3790-SP2
[debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4
[debug] Proxy map: {}
...

Do not post screenshots of verbose logs; only plain text is acceptable.
The output (including the first lines) contains important debugging information. Issues without the full output are often not reproducible and therefore do not get solved in short order, if ever.
Please re-read your issue once again to avoid a couple of common mistakes (you can and should use this as a checklist):
Is the description of the issue itself sufficient?
We often get issue reports that we cannot really decipher. While in most cases we eventually get the required information after asking back multiple times, this poses an unnecessary drain on our resources. Many contributors, including myself, are also not native speakers, so we may misread some parts.
So please elaborate on what feature you are requesting, or what bug you want to be fixed. Make sure that it's obvious

What the problem is
How it could be fixed
How your proposed solution would look like

If your report is shorter than two lines, it is almost certainly missing some of these, which makes it hard for us to respond to it. We're often too polite to close the issue outright, but the missing info makes misinterpretation likely. As a committer myself, I often get frustrated by these issues, since the only possible way for me to move forward on them is to ask for clarification over and over.
For bug reports, this means that your report should contain the complete output of youtube-dl when called with the -v flag. The error message you get for (most) bugs even says so, but you would not believe how many of our bug reports do not contain this information.
If your server has multiple IPs or you suspect censorship, adding --call-home may be a good idea to get more diagnostics. If the error is ERROR: Unable to extract ... and you cannot reproduce it from multiple countries, add --dump-pages (warning: this will yield a rather large output, redirect it to the file log.txt by adding >log.txt 2>&1 to your command-line) or upload the .dump files you get when you add --write-pages somewhere.
Site support requests must contain an example URL. An example URL is a URL you might want to download, like https://www.youtube.com/watch?v=BaW_jenozKc. There should be an obvious video present. Except under very special circumstances, the main page of a video service (e.g. https://www.youtube.com/) is not an example URL.
Are you using the latest version?
Before reporting any issue, type youtube-dl -U. This should report that you're up-to-date. About 20% of the reports we receive are already fixed, but people are using outdated versions. This goes for feature requests as well.
Is the issue already documented?
Make sure that someone has not already opened the issue you're trying to open. Search at the top of the window or browse the GitHub Issues of this repository. If there is an issue, feel free to write something along the lines of ""This affects me as well, with version 2015.01.01. Here is some more information on the issue: ..."". While some issues may be old, a new post into them often spurs rapid activity.
Why are existing options not enough?
Before requesting a new feature, please have a quick peek at the list of supported options. Many feature requests are for features that actually exist already! Please, absolutely do show off your work in the issue report and detail how the existing similar options do not solve your problem.
Is there enough context in your bug report?
People want to solve problems, and often think they do us a favor by breaking down their larger problems (e.g. wanting to skip already downloaded files) to a specific request (e.g. requesting us to look whether the file exists before downloading the info page). However, what often happens is that they break down the problem into two steps: One simple, and one impossible (or extremely complicated one).
We are then presented with a very complicated request when the original problem could be solved far easier, e.g. by recording the downloaded video IDs in a separate file. To avoid this, you must include the greater context where it is non-obvious. In particular, every feature request that does not consist of adding support for a new site should contain a use case scenario that explains in what situation the missing feature would be useful.
Does the issue involve one problem, and one problem only?
Some of our users seem to think there is a limit of issues they can or should open. There is no limit of issues they can or should open. While it may seem appealing to be able to dump all your issues into one ticket, that means that someone who solves one of your issues cannot mark the issue as closed. Typically, reporting a bunch of issues leads to the ticket lingering since nobody wants to attack that behemoth, until someone mercifully splits the issue into multiple ones.
In particular, every site support request issue should only pertain to services at one site (generally under a common domain, but always using the same backend technology). Do not request support for vimeo user videos, White house podcasts, and Google Plus pages in the same issue. Also, make sure that you don't post bug reports alongside feature requests. As a rule of thumb, a feature request does not include outputs of youtube-dl that are not immediately related to the feature at hand. Do not post reports of a network error alongside the request for a new video service.
Is anyone going to need the feature?
Only post features that you (or an incapacitated friend you can personally talk to) require. Do not post features because they seem like a good idea. If they are really useful, they will be requested by someone who requires them.
Is your question about youtube-dl?
It may sound strange, but some bug reports we receive are completely unrelated to youtube-dl and relate to a different, or even the reporter's own, application. Please make sure that you are actually using youtube-dl. If you are using a UI for youtube-dl, report the bug to the maintainer of the actual application providing the UI. On the other hand, if your UI for youtube-dl fails in some way you believe is related to youtube-dl, by all means, go ahead and report the bug.
COPYRIGHT
youtube-dl is released into the public domain by the copyright holders.
This README file was originally written by Daniel Bolton and is likewise released into the public domain.

"
39,"
JavaScript Algorithms and Data Structures


This repository contains JavaScript based examples of many
popular algorithms and data structures.
Each algorithm and data structure has its own separate README
with related explanations and links for further reading (including ones
to YouTube videos).
Read this in other languages:
简体中文,
繁體中文,
한국어,
日本語,
Polski,
Français,
Español,
Português
☝ Note that this project is meant to be used for learning and researching purposes
only and it is not meant to be used for production.
Data Structures
A data structure is a particular way of organizing and storing data in a computer so that it can
be accessed and modified efficiently. More precisely, a data structure is a collection of data
values, the relationships among them, and the functions or operations that can be applied to
the data.
B - Beginner, A - Advanced

B Linked List
B Doubly Linked List
B Queue
B Stack
B Hash Table
B Heap - max and min heap versions
B Priority Queue
A Trie
A Tree

A Binary Search Tree
A AVL Tree
A Red-Black Tree
A Segment Tree - with min/max/sum range queries examples
A Fenwick Tree (Binary Indexed Tree)


A Graph (both directed and undirected)
A Disjoint Set
A Bloom Filter

Algorithms
An algorithm is an unambiguous specification of how to solve a class of problems. It is
a set of rules that precisely define a sequence of operations.
B - Beginner, A - Advanced
Algorithms by Topic

Math

B Bit Manipulation - set/get/update/clear bits, multiplication/division by two, make negative etc.
B Factorial
B Fibonacci Number - classic and closed-form versions
B Primality Test (trial division method)
B Euclidean Algorithm - calculate the Greatest Common Divisor (GCD)
B Least Common Multiple (LCM)
B Sieve of Eratosthenes - finding all prime numbers up to any given limit
B Is Power of Two - check if the number is power of two (naive and bitwise algorithms)
B Pascal's Triangle
B Complex Number - complex numbers and basic operations with them
B Radian & Degree - radians to degree and backwards conversion
B Fast Powering
A Integer Partition
A Square Root - Newton's method
A Liu Hui π Algorithm - approximate π calculations based on N-gons
A Discrete Fourier Transform - decompose a function of time (a signal) into the frequencies that make it up


Sets

B Cartesian Product - product of multiple sets
B Fisher–Yates Shuffle - random permutation of a finite sequence
A Power Set - all subsets of a set (bitwise and backtracking solutions)
A Permutations (with and without repetitions)
A Combinations (with and without repetitions)
A Longest Common Subsequence (LCS)
A Longest Increasing Subsequence
A Shortest Common Supersequence (SCS)
A Knapsack Problem - ""0/1"" and ""Unbound"" ones
A Maximum Subarray - ""Brute Force"" and ""Dynamic Programming"" (Kadane's) versions
A Combination Sum - find all combinations that form specific sum


Strings

B Hamming Distance - number of positions at which the symbols are different
A Levenshtein Distance - minimum edit distance between two sequences
A Knuth–Morris–Pratt Algorithm (KMP Algorithm) - substring search (pattern matching)
A Z Algorithm - substring search (pattern matching)
A Rabin Karp Algorithm - substring search
A Longest Common Substring
A Regular Expression Matching


Searches

B Linear Search
B Jump Search (or Block Search) - search in sorted array
B Binary Search - search in sorted array
B Interpolation Search - search in uniformly distributed sorted array


Sorting

B Bubble Sort
B Selection Sort
B Insertion Sort
B Heap Sort
B Merge Sort
B Quicksort - in-place and non-in-place implementations
B Shellsort
B Counting Sort
B Radix Sort


Linked Lists

B Straight Traversal
B Reverse Traversal


Trees

B Depth-First Search (DFS)
B Breadth-First Search (BFS)


Graphs

B Depth-First Search (DFS)
B Breadth-First Search (BFS)
B Kruskal’s Algorithm - finding Minimum Spanning Tree (MST) for weighted undirected graph
A Dijkstra Algorithm - finding shortest paths to all graph vertices from single vertex
A Bellman-Ford Algorithm - finding shortest paths to all graph vertices from single vertex
A Floyd-Warshall Algorithm - find shortest paths between all pairs of vertices
A Detect Cycle - for both directed and undirected graphs (DFS and Disjoint Set based versions)
A Prim’s Algorithm - finding Minimum Spanning Tree (MST) for weighted undirected graph
A Topological Sorting - DFS method
A Articulation Points - Tarjan's algorithm (DFS based)
A Bridges - DFS based algorithm
A Eulerian Path and Eulerian Circuit - Fleury's algorithm - Visit every edge exactly once
A Hamiltonian Cycle - Visit every vertex exactly once
A Strongly Connected Components - Kosaraju's algorithm
A Travelling Salesman Problem - shortest possible route that visits each city and returns to the origin city


Cryptography

B Polynomial Hash - rolling hash function based on polynomial


Machine Learning

B NanoNeuron - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)


Uncategorized

B Tower of Hanoi
B Square Matrix Rotation - in-place algorithm
B Jump Game - backtracking, dynamic programming (top-down + bottom-up) and greedy examples
B Unique Paths - backtracking, dynamic programming and Pascal's Triangle based examples
B Rain Terraces - trapping rain water problem (dynamic programming and brute force versions)
B Recursive Staircase - count the number of ways to reach to the top (4 solutions)
A N-Queens Problem
A Knight's Tour



Algorithms by Paradigm
An algorithmic paradigm is a generic method or approach which underlies the design of a class
of algorithms. It is an abstraction higher than the notion of an algorithm, just as an
algorithm is an abstraction higher than a computer program.

Brute Force - look at all the possibilities and selects the best solution

B Linear Search
B Rain Terraces - trapping rain water problem
B Recursive Staircase - count the number of ways to reach to the top
A Maximum Subarray
A Travelling Salesman Problem - shortest possible route that visits each city and returns to the origin city
A Discrete Fourier Transform - decompose a function of time (a signal) into the frequencies that make it up


Greedy - choose the best option at the current time, without any consideration for the future

B Jump Game
A Unbound Knapsack Problem
A Dijkstra Algorithm - finding shortest path to all graph vertices
A Prim’s Algorithm - finding Minimum Spanning Tree (MST) for weighted undirected graph
A Kruskal’s Algorithm - finding Minimum Spanning Tree (MST) for weighted undirected graph


Divide and Conquer - divide the problem into smaller parts and then solve those parts

B Binary Search
B Tower of Hanoi
B Pascal's Triangle
B Euclidean Algorithm - calculate the Greatest Common Divisor (GCD)
B Merge Sort
B Quicksort
B Tree Depth-First Search (DFS)
B Graph Depth-First Search (DFS)
B Jump Game
B Fast Powering
A Permutations (with and without repetitions)
A Combinations (with and without repetitions)


Dynamic Programming - build up a solution using previously found sub-solutions

B Fibonacci Number
B Jump Game
B Unique Paths
B Rain Terraces - trapping rain water problem
B Recursive Staircase - count the number of ways to reach to the top
A Levenshtein Distance - minimum edit distance between two sequences
A Longest Common Subsequence (LCS)
A Longest Common Substring
A Longest Increasing Subsequence
A Shortest Common Supersequence
A 0/1 Knapsack Problem
A Integer Partition
A Maximum Subarray
A Bellman-Ford Algorithm - finding shortest path to all graph vertices
A Floyd-Warshall Algorithm - find shortest paths between all pairs of vertices
A Regular Expression Matching


Backtracking - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test
if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a
different path of finding a solution. Normally the DFS traversal of state-space is being used.

B Jump Game
B Unique Paths
B Power Set - all subsets of a set
A Hamiltonian Cycle - Visit every vertex exactly once
A N-Queens Problem
A Knight's Tour
A Combination Sum - find all combinations that form specific sum


Branch & Bound - remember the lowest-cost solution found at each stage of the backtracking
search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of
a least-cost solution to the problem, in order to discard partial solutions with costs larger than the
lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space
tree is being used.

How to use this repository
Install all dependencies
npm install

Run ESLint
You may want to run it to check code quality.
npm run lint

Run all tests
npm test

Run tests by name
npm test -- 'LinkedList'

Playground
You may play with data-structures and algorithms in ./src/playground/playground.js file and write
tests for it in ./src/playground/__test__/playground.test.js.
Then just simply run the following command to test if your playground code works as expected:
npm test -- 'playground'

Useful Information
References
▶ Data Structures and Algorithms on YouTube
Big O Notation
Big O notation is used to classify algorithms according to how their running time or space requirements grow as the input size grows.
On the chart below you may find most common orders of growth of algorithms specified in Big O notation.

Source: Big O Cheat Sheet.
Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.



Big O Notation
Computations for 10 elements
Computations for 100 elements
Computations for 1000 elements




O(1)
1
1
1


O(log N)
3
6
9


O(N)
10
100
1000


O(N log N)
30
600
9000


O(N^2)
100
10000
1000000


O(2^N)
1024
1.26e+29
1.07e+301


O(N!)
3628800
9.3e+157
4.02e+2567



Data Structure Operations Complexity



Data Structure
Access
Search
Insertion
Deletion
Comments




Array
1
n
n
n



Stack
n
n
1
1



Queue
n
n
1
1



Linked List
n
n
1
n



Hash Table
-
n
n
n
In case of perfect hash function costs would be O(1)


Binary Search Tree
n
n
n
n
In case of balanced tree costs would be O(log(n))


B-Tree
log(n)
log(n)
log(n)
log(n)



Red-Black Tree
log(n)
log(n)
log(n)
log(n)



AVL Tree
log(n)
log(n)
log(n)
log(n)



Bloom Filter
-
1
1
-
False positives are possible while searching



Array Sorting Algorithms Complexity



Name
Best
Average
Worst
Memory
Stable
Comments




Bubble sort
n
n2
n2
1
Yes



Insertion sort
n
n2
n2
1
Yes



Selection sort
n2
n2
n2
1
No



Heap sort
n log(n)
n log(n)
n log(n)
1
No



Merge sort
n log(n)
n log(n)
n log(n)
n
Yes



Quick sort
n log(n)
n log(n)
n2
log(n)
No
Quicksort is usually done in-place with O(log(n)) stack space


Shell sort
n log(n)
depends on gap sequence
n (log(n))2
1
No



Counting sort
n + r
n + r
n + r
n + r
Yes
r - biggest number in array


Radix sort
n * k
n * k
n * k
n + k
Yes
k - length of longest key




"
40,"
three.js






JavaScript 3D library
The aim of the project is to create an easy to use, lightweight, 3D library with a default WebGL renderer. The library also provides Canvas 2D, SVG and CSS3D renderers in the examples.
Examples —
Documentation —
Wiki —
Migrating —
Questions —
Forum —
Gitter —
Slack
Usage
Download the minified library and include it in your HTML, or install and import it as a module,
Alternatively, see how to build the library yourself.
<script src=""js/three.min.js""></script>
This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a WebGL renderer for the scene and camera, and it adds that viewport to the document.body element. Finally, it animates the cube within the scene for the camera.
var camera, scene, renderer;
var geometry, material, mesh;

init();
animate();

function init() {

	camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
	camera.position.z = 1;

	scene = new THREE.Scene();

	geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
	material = new THREE.MeshNormalMaterial();

	mesh = new THREE.Mesh( geometry, material );
	scene.add( mesh );

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );

}

function animate() {

	requestAnimationFrame( animate );

	mesh.rotation.x += 0.01;
	mesh.rotation.y += 0.02;

	renderer.render( scene, camera );

}
If everything went well you should see this.
Change log
Releases

"
41,"
[Submit tutorial]

Table of contents

3D Renderer
Augmented Reality
BitTorrent Client
Blockchain / Cryptocurrency
Bot
Command-Line Tool
Database
Docker
Emulator / Virtual Machine
Front-end Framework / Library
Game
Git
Network Stack
Neural Network
Operating System
Physics Engine
Programming Language
Regex Engine
Search Engine
Shell
Template Engine
Text Editor
Visual Recognition System
Voxel Engine
Web Search Engine
Web Server
Uncategorized

Tutorials
Build your own 3D Renderer

C++: Introduction to Ray Tracing: a Simple Method for Creating 3D Images
C++: How OpenGL works: software rendering in 500 lines of code
C++: Raycasting engine of Wolfenstein 3D
C++: Physically Based Rendering:From Theory To Implementation
C++: Rasterization: a Practical Implementation
C# / TypeScript / JavaScript: Learning how to write a 3D soft engine from scratch in C#, TypeScript or JavaScript
Java / JavaScript: Build your own 3D renderer
Java: How to create your own simple 3D render engine in pure Java
JavaScript / Pseudocode: Computer Graphics from scratch
Python: A 3D Modeller

Build your own Augmented Reality

C#: How To: Augmented Reality App Tutorial for Beginners with Vuforia and Unity 3D [video]
C#: How To Unity ARCore [video]
C#: AR Portal Tutorial with Unity [video]
C#: How to create a Dragon in Augmented Reality in Unity ARCore [video]
C#: How to Augmented Reality AR Tutorial: ARKit Portal to the Upside Down [video]
Python: Augmented Reality with Python and OpenCV

Build your own BitTorrent Client

C#: Building a BitTorrent client from scratch in C#
Nim: Writing a Bencode Parser
Node.js: Write your own bittorrent client
Python: A BitTorrent client in Python 3.5

Build your own Blockchain / Cryptocurrency

ATS: Functional Blockchain
C#: Programming The Blockchain in C#
Crystal: Write your own blockchain and PoW algorithm using Crystal
Go: Building Blockchain in Go
Go: Code your own blockchain in less than 200 lines of Go
Go: Building A Simple Blockchain with Go
Java: Creating Your First Blockchain with Java
JavaScript: A cryptocurrency implementation in less than 1500 lines of code
JavaScript: Build your own Blockchain in JavaScript
JavaScript: Learn & Build a JavaScript Blockchain
JavaScript: Creating a blockchain with JavaScript
JavaScript: How To Launch Your Own Production-Ready Cryptocurrency
JavaScript: Writing a Blockchain in Node.js
Kotlin: Let’s implement a cryptocurrency in Kotlin
Python: Learn Blockchains by Building One
Python: Build your own blockchain: a Python tutorial
Python: A Practical Introduction to Blockchain with Python
Python: Let’s Build the Tiniest Blockchain
Ruby: Programming Blockchains Step-by-Step (Manuscripts Book Edition)
Scala: How to build a simple actor-based blockchain
TypeScript: Naivecoin: a tutorial for building a cryptocurrency
TypeScript: NaivecoinStake: a tutorial for building a cryptocurrency with the Proof of Stake consensus

Build your own Bot

Haskell: Roll your own IRC bot
Java: How To Make a Scary Russian Twitter Bot With Java
Node.js: Creating a Simple Facebook Messenger AI Bot with API.ai in Node.js
Node.js: How to make a responsive telegram bot
Node.js: Create a Discord bot
Node.js: gifbot - Building a GitHub App
Node.js: Building A Simple AI Chatbot With Web Speech API And Node.js
Python: Chatbot Fundamentals: An interactive guide to writing bots in Python
Python: How to Build Your First Slack Bot with Python
Python: How to build a Slack Bot with Python using Slack Events API & Django under 20 minute
Python: Build a Reddit Bot
Python: How To Make A Reddit Bot [video]
Python: How To Create a Telegram Bot Using Python
Python: Create a Twitter Bot in Python Using Tweepy
Python: Creating Reddit Bot with Python & PRAW [video]
R: Build A Cryptocurrency Trading Bot with R
Rust: A bot for Starcraft in Rust, C or any other language

Build your own Command-Line Tool

C: Rewriting the cat command from scratch [video]
Go: Visualize your local git contributions with Go
Go: Build a command line app with Go: lolcat
Go: Building a cli command with Go: cowsay
Go: Go CLI tutorial: fortune clone
Nim: Writing a stow alternative to manage dotfiles

Build your own Database

C: Let's Build a Simple Database
C++: Implementing a Key-Value Store
C#: Build Your Own Database
Clojure: An Archaeology-Inspired Database
Crystal: Why you should build your own NoSQL Database
JavaScript: Dagoba: an in-memory graph database
Python: DBDB: Dog Bed Database
Python: Write your own miniature Redis with Python

Build your own Docker

C: Linux containers in 500 lines of code
Go: Build Your Own Container Using Less than 100 Lines of Go
Go: Building a container from scratch in Go [video]
Python: A workshop on Linux containers: Rebuild Docker from Scratch
Python: A proof-of-concept imitation of Docker, written in 100% Python
Shell: Docker implemented in around 100 lines of bash

Build your own Emulator / Virtual Machine

C: Virtual machine in C
C: Write your Own Virtual Machine
C: Writing a Game Boy emulator, Cinoop
C++: How to write an emulator (CHIP-8 interpreter)
C++: Emulation tutorial (CHIP-8 interpreter)
C++: Emulation tutorial (GameBoy emulator)
C++: Emulation tutorial (Master System emulator)
Common Lisp: CHIP-8 in Common Lisp
JavaScript: GameBoy Emulation in JavaScript
Python: Emulation Basics: Write your own Chip 8 Emulator/Interpreter

Build your own Front-end Framework / Library

JavaScript: WTF is JSX (Let's Build a JSX Renderer)
JavaScript: A DIY guide to build your own React
JavaScript: Reverse Engineering React [video]
JavaScript: Building React From Scratch [video]
JavaScript: Building Your Own React Clone in Five Easy Steps
JavaScript: Gooact: React in 160 lines of JavaScript
JavaScript: React Internals
JavaScript: Learn how React Reconciler package works by building your own lightweight React DOM
JavaScript: Build Yourself a Redux
JavaScript: Let’s Write Redux!
JavaScript: Redux: Implementing Store from Scratch [video]
JavaScript: Build Your own Simplified AngularJS in 200 Lines of JavaScript
JavaScript: Make Your Own AngularJS
JavaScript: How to write your own Virtual DOM
JavaScript: Building a frontend framework, from scratch, with components (templating, state, VDOM)
JavaScript: Build your own React

Build your own Game

C: Handmade Hero
C: How to Program an NES game in C
C: Chess Engine In C [video]
C: Let's Make: Dangerous Dave [video]
C: Learn Video Game Programming in C
[video]
C: Coding A Sudoku Solver in C [video]
C: Coding a Rogue/Nethack RPG in C [video]
C: On Tetris and Reimplementation
C++: Breakout
C++: Beginning Game Programming v2.0
C++: Tetris tutorial in C++ platform independent focused in game logic for beginners
C++: Remaking Cavestory in C++ [video]
C++: Reconstructing Cave Story [video]
C++: Space Invaders from Scratch
C#: Learn C# by Building a Simple RPG
C#: Creating a Roguelike Game in C#
C#: Build a C#/WPF RPG
Go: Games With Go [video]
Java: 3D Game Development with LWJGL 3
JavaScript: 2D breakout game using Phaser
JavaScript: How to Make Flappy Bird in HTML5 With Phaser
JavaScript: Developing Games with React, Redux, and SVG
JavaScript: Build your own 8-Ball Pool game from scratch [video]
JavaScript: How to Make Your First Roguelike
JavaScript: Think like a programmer: How to build Snake using only JavaScript, HTML & CSS
Lua: BYTEPATH
Python: Developing Games With PyGame
Python: Making Games with Python & Pygame [pdf]
Python: The Complete Roguelike Tutorial [video]
Python: Roguelike Tutorial Revised
Ruby: Developing Games With Ruby
Ruby: Ruby Snake
Rust: Adventures in Rust: A Basic 2D Game
Rust: Roguelike Tutorial in Rust + tcod

Build your own Git

Haskell: Reimplementing “git clone” in Haskell from the bottom up
JavaScript: Gitlet
JavaScript: Build GIT - Learn GIT
Python: Just enough of a Git client to create a repo, commit, and push itself to GitHub
Python: Write yourself a Git!
Ruby: Rebuilding Git in Ruby

Build your own Network Stack

C: Beej's Guide to Network Programming
C: Let's code a TCP/IP stack
Ruby: How to build a network stack in Ruby

Build your own Neural Network

C#: Neural Network OCR
F#: Building Neural Networks in F#
Go: Build a multilayer perceptron with Golang
Go: How to build a simple artificial neural network with Go
Go: Building a Neural Net from Scratch in Go
JavaScript / Java: Neural Networks - The Nature of Code [video]
JavaScript: Neural Network implementation in JavaScript, by an example
JavaScript: Neural networks from scratch for JavaScript linguists (Part1 — The Perceptron)
Python: A Neural Network in 11 lines of Python
Python: Implement a Neural Network from Scratch
Python: Optical Character Recognition (OCR)
Python: Traffic signs classification with a convolutional network
Python: Generate Music using LSTM Neural Network in Keras
Python: An Introduction to Convolutional Neural Networks

Build your own Operating System

Assembly: Writing a Tiny x86 Bootloader
Assembly: Baking Pi – Operating Systems Development
C: Building a software and hardware stack for a simple computer from scratch [video]
C: Operating Systems: From 0 to 1
C: The little book about OS development
C: Roll your own toy UNIX-clone OS
C: Kernel 101 – Let’s write a Kernel
C: Kernel 201 – Let’s write a Kernel with keyboard and screen support
C: Build a minimal multi-tasking kernel for ARM from scratch
C: How to create an OS from scratch
C: Malloc tutorial
C: Hack the virtual memory
C: Learning operating system development using Linux kernel and Raspberry Pi
C: Operating systems development for Dummies
C++: Write your own Operating System [video]
C++: Writing a Bootloader
Rust: Writing an OS in Rust

Build your own Physics Engine

C: Video Game Physics Tutorial
C++: Game physics series by Allen Chou
C++: How to Create a Custom Physics Engine
C++: 3D Physics Engine Tutorial [video]
C#: TowerFall Physics
JavaScript: Build your own basic physics engine in JavaScript
JavaScript: How Physics Engines Work
JavaScript: Broad Phase Collision Detection Using Spatial Partitioning
JavaScript: Build a simple 2D physics engine for JavaScript games

Build your own Programming Language

(any): mal - Make a Lisp
Assembly: Jonesforth
C: Baby's First Garbage Collector
C: Build Your Own Lisp: Learn C and build your own programming language in 1000 lines of code
C: Writing a Simple Garbage Collector in C
C: C interpreter that interprets itself.
C: A C & x86 version of the ""Let's Build a Compiler"" by Jack Crenshaw
C++: Writing Your Own Toy Compiler Using Flex
C++: How to Create a Compiler [video]
C++: Kaleidoscope: Implementing a Language with LLVM
F#: Understanding Parser Combinators
Elixir: Demystifying compilers by writing your own [video]
Go: The Super Tiny Compiler
Go: Lexical Scanning in Go [video]
Haskell: Let's Build a Compiler
Haskell: Write You a Haskell
Haskell: Write Yourself a Scheme in 48 Hours
Haskell: Write You A Scheme
Java: Crafting interpreters: A handbook for making programming languages
Java: Creating JVM Language
JavaScript: The Super Tiny Compiler
JavaScript: The Super Tiny Interpreter
JavaScript: Little Lisp interpreter
JavaScript: How to implement a programming language in JavaScript
OCaml: Writing a C Compiler
OCaml: Writing a Lisp, the series
Pascal: Let's Build a Compiler
Python: A Python Interpreter Written in Python
Python: lisp.py: Make your own Lisp interpreter
Python: Simple Iterator-based Parsing
Python: Simple Top-Down Parsing in Python
Python: How to Write a Lisp Interpreter in Python
Python: Let’s Build A Simple Interpreter
Python: Make Your Own Simple Interpreted Programming Language [video]
Racket: Beautiful Racket: How to make your own programming languages with Racket
Ruby: A Compiler From Scratch
Ruby: Markdown compiler from scratch in Ruby
Rust: So You Want to Build a Language VM
Rust: Learning Parser Combinators With Rust
Swift: Building a LISP from scratch with Swift
TypeScript: Build your own WebAssembly Compiler

Build your own Regex Engine

C: A Regular Expression Matcher
C: Regular Expression Matching Can Be Simple And Fast
JavaScript: Build a Regex Engine in Less than 40 Lines of Code
JavaScript: How to implement regular expressions in functional javascript using derivatives
Perl: How Regexes Work
Scala: No Magic: Regular Expressions

Build your own Search Engine

CSS: A search engine in CSS
Python: Building a search engine using Redis and redis-py
Python: Building a Vector Space Indexing Engine in Python
Python: Building A Python-Based Search Engine [video]
Python: Making text search learn from feedback
Python: Finding Important Words in Text Using TF-IDF

Build your own Shell

C: Tutorial - Write a Shell in C
C: Let's build a shell!
C: Writing a UNIX Shell
C: Build Your Own Shell
Go: Writing a simple shell in Go
Ruby: A Unix Shell in Ruby
Rust: Build Your Own Shell using Rust

Build your own Template Engine

JavaScript: JavaScript template engine in just 20 lines
JavaScript: Understanding JavaScript Micro-Templating
Python: Approach: Building a toy template engine in Python
Python: A Template Engine
Ruby: How to write a template engine in less than 30 lines of code

Build your own Text Editor

C: Build Your Own Text Editor
C++: Designing a Simple Text Editor
Python: Python Tutorial: Make Your Own Text Editor [video]
Python: Create a Simple Python Text Editor!
Ruby: Build a Collaborative Text Editor Using Rails

Build your own Visual Recognition System

Python: Developing a License Plate Recognition System with Machine Learning in Python
Python: Building a Facial Recognition Pipeline with Deep Learning in Tensorflow

Build your own Voxel Engine

C++: Let's Make a Voxel Engine
Java: Let's make a voxel engine [video]
Java: Java Voxel Engine Tutorial [video]

Build your own Web Search Engine

PHP: Code a Search Engine in PHP
Ruby: Write an Internet search engine with 200 lines of Ruby code

Build your own Web Server

C#: Writing a Web Server from Scratch
Node.js: Let's code a web server from scratch with NodeJS Streams
Node.js: lets-build-express
PHP: Writing a webserver in pure PHP
Python: A Simple Web Server
Python: Let’s Build A Web Server.
Python: Web application from scratch
Python: Building a basic HTTP Server from scratch in Python
Python: Implementing a RESTful Web API with Python & Flask
Ruby: Building a simple websockets server from scratch in Ruby

Uncategorized

(any): From NAND to Tetris: Building a Modern Computer From First Principles
Alloy: The Same-Origin Policy
C: How to Write a Video Player in Less Than 1000 Lines
C: Learn how to write a hash table in C
C: The very basics of a terminal emulator
C: Write a System Call
C: Sol - An MQTT broker from scratch
C++: Build your own VR headset for $100
C++: How X Window Managers work and how to write one
C++: Writing a Linux Debugger
C++: How a 64k intro is made
C#: C# Networking: Create a TCP chater server, TCP games, UDP Pong and more
C#: Loading and rendering 3D skeletal animations from scratch in C# and GLSL
Clojure: Building a spell-checker
Go, Let's Create a Simple Load Balancer
Java: How to Build an Android Reddit App [video]
JavaScript: Build Your Own Module Bundler - Minipack
JavaScript: Learn JavaScript Promises by Building a Promise from Scratch
JavaScript: Implementing promises from scratch (TDD way)
JavaScript: Implement your own — call(), apply() and bind() method in JavaScript
JavaScript: JavaScript Algorithms and Data Structures
JavaScript: How to Make an Evolutionary Tetris AI [video]
JavaScript: Build a ride hailing app with React Native
Kotlin: Build Your Own Cache
Nim: Writing a Redis Protocol Parser
Nim: Writing a Build system
Nim: Writing a MiniTest Framework
Nim: Writing a DMIDecode Parser
Nim: Writing a INI Parser
Nim: Writing a Link Checker
Nim: Writing a URL Shortening Service
Node.js: Build a static site generator in 40 lines with Node.js
Node.js: Building A Simple Single Sign On(SSO) Server And Solution From Scratch In Node.js.
Node.js: How to create a real-world Node CLI app with Node
PHP: Write your own MVC from scratch in PHP 
PHP: Make your own blog
PHP: Modern PHP Without a Framework
Python: Build a Deep Learning Library [video]
Python: How to Build a Kick-Ass Mobile Document Scanner in Just 5 Minutes
Python: Continuous Integration System
Python: Recommender Systems in Python: Beginner Tutorial
Python: Write SMS-spam detector with Scikit-learn
Python: A Simple Content-Based Recommendation Engine in Python
Python: Stock Market Predictions with LSTM in Python
Python: Build your own error-correction fountain code with Luby Transform Codes
Python: Building a simple Generative Adversial Network (GAN) using Tensorflow
Python: Learn ML Algorithms by coding: Decision Trees
Python: JSON Decoding Algorithm
Ruby: A Pedometer in the Real World
Ruby: Creating a Linux Desktop application with Ruby
Rust: Let's build a browser engine
Rust: Building a DNS server in Rust
Rust: Writing Scalable Chat Service from Scratch
TypeScript: Tiny Package Manager: Learns how npm or Yarn works

How to contribute

Contributions are very welcome: Submit tutorial
Help me to review pending submissions by leaving comments and ""reactions""

License

To the extent possible under law, Daniel Stefanovic has waived all copyright and related or neighboring rights to this work.

"
42,"
Puppeteer
    

API | FAQ | Contributing | Troubleshooting

Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.

What can I do?
Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:

Generate screenshots and PDFs of pages.
Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. ""SSR"" (Server-Side Rendering)).
Automate form submission, UI testing, keyboard input, etc.
Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.
Capture a timeline trace of your site to help diagnose performance issues.
Test Chrome Extensions.

Give it a spin: https://try-puppeteer.appspot.com/
Getting Started
Installation
To use Puppeteer in your project, run:
npm i puppeteer
# or ""yarn add puppeteer""
Note: When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API. To skip the download, see Environment variables.
puppeteer-core
Since version 1.7.0 we publish the puppeteer-core package,
a version of Puppeteer that doesn't download Chromium by default.
npm i puppeteer-core
# or ""yarn add puppeteer-core""
puppeteer-core is intended to be a lightweight version of Puppeteer for launching an existing browser installation or for connecting to a remote one. Be sure that the version of puppeteer-core you install is compatible with the
browser you intend to connect to.
See puppeteer vs puppeteer-core.
Usage
Puppeteer follows the latest maintenance LTS version of Node.
Note: Prior to v1.18.1, Puppeteer required at least Node v6.4.0. All subsequent versions rely on
Node 8.9.0+. All examples below use async/await which is only supported in Node v7.6.0 or greater.
Puppeteer will be familiar to people using other browser testing frameworks. You create an instance
of Browser, open pages, and then manipulate them with Puppeteer's API.
Example - navigating to https://example.com and saving a screenshot as example.png:
Save file as example.js
const puppeteer = require('puppeteer');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'example.png'});

  await browser.close();
})();
Execute script on the command line
node example.js
Puppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized  with Page.setViewport().
Example - create a PDF.
Save file as hn.js
const puppeteer = require('puppeteer');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://news.ycombinator.com', {waitUntil: 'networkidle2'});
  await page.pdf({path: 'hn.pdf', format: 'A4'});

  await browser.close();
})();
Execute script on the command line
node hn.js
See Page.pdf() for more information about creating pdfs.
Example - evaluate script in the context of the page
Save file as get-dimensions.js
const puppeteer = require('puppeteer');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');

  // Get the ""viewport"" of the page, as reported by the page.
  const dimensions = await page.evaluate(() => {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    };
  });

  console.log('Dimensions:', dimensions);

  await browser.close();
})();
Execute script on the command line
node get-dimensions.js
See Page.evaluate() for more information on evaluate and related methods like evaluateOnNewDocument and exposeFunction.
Default runtime settings
1. Uses Headless mode
Puppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:
const browser = await puppeteer.launch({headless: false}); // default is true
2. Runs a bundled version of Chromium
By default, Puppeteer downloads and uses a specific version of Chromium so its API
is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,
pass in the executable's path when creating a Browser instance:
const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});
See Puppeteer.launch() for more information.
See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.
3. Creates a fresh user profile
Puppeteer creates its own Chromium user profile which it cleans up on every run.
Resources

API Documentation
Examples
Community list of Puppeteer resources

Debugging tips


Turn off headless mode - sometimes it's useful to see what the browser is
displaying. Instead of launching in headless mode, launch a full version of
the browser using  headless: false:
 const browser = await puppeteer.launch({headless: false});



Slow it down - the slowMo option slows down Puppeteer operations by the
specified amount of milliseconds. It's another way to help see what's going on.
 const browser = await puppeteer.launch({
   headless: false,
   slowMo: 250 // slow down by 250ms
 });



Capture console output - You can listen for the console event.
This is also handy when debugging code in page.evaluate():
 page.on('console', msg => console.log('PAGE LOG:', msg.text()));

 await page.evaluate(() => console.log(`url is ${location.href}`));



Use debugger in application code browser
There are two execution context: node.js that is running test code, and the browser
running application code being tested. This lets you debug code in the
application code browser; ie code inside evaluate().


Use {devtools: true} when launching Puppeteer:
const browser = await puppeteer.launch({devtools: true});


Change default test timeout:
jest: jest.setTimeout(100000);
jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;
mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')


Add an evaluate statement with debugger inside / add  debugger to an existing evaluate statement:
await page.evaluate(() => {debugger;});
The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.




Use debugger in node.js
This will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.
Note that you won't be able to run await page.click() in
DevTools console due to this Chromium bug. So if
you want to try something out, you have to add it to your test file.

Add debugger; to your test, eg:
debugger;
await page.click('a[target=_blank]');


Set headless to false
Run node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest tests
In Chrome open chrome://inspect/#devices and click inspect
In the newly opened test browser, type F8 to resume test execution
Now your debugger will be hit and you can debug in the test browser



Enable verbose logging - internal DevTools protocol traffic
will be logged via the debug module under the puppeteer namespace.
 # Basic verbose logging
 env DEBUG=""puppeteer:*"" node script.js

 # Protocol traffic can be rather noisy. This example filters out all Network domain messages
 env DEBUG=""puppeteer:*"" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '""Network'



Debug your Puppeteer (node) code easily, using ndb




npm install -g ndb (or even better, use npx!)


add a debugger to your Puppeteer (node) code


add ndb (or npx ndb) before your test command. For example:
ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)


debug your test inside chromium like a boss!


Contributing to Puppeteer
Check out contributing guide to get an overview of Puppeteer development.
FAQ
Q: Who maintains Puppeteer?
The Chrome DevTools team maintains the library, but we'd love your help and expertise on the project!
See Contributing.
Q: What are Puppeteer’s goals and principles?
The goals of the project are:

Provide a slim, canonical library that highlights the capabilities of the DevTools Protocol.
Provide a reference implementation for similar testing libraries. Eventually, these other frameworks could adopt Puppeteer as their foundational layer.
Grow the adoption of headless/automated browser testing.
Help dogfood new DevTools Protocol features...and catch bugs!
Learn more about the pain points of automated browser testing and help fill those gaps.

We adapt Chromium principles to help us drive product decisions:

Speed: Puppeteer has almost zero performance overhead over an automated page.
Security: Puppeteer operates off-process with respect to Chromium, making it safe to automate potentially malicious pages.
Stability: Puppeteer should not be flaky and should not leak memory.
Simplicity: Puppeteer provides a high-level API that’s easy to use, understand, and debug.

Q: Is Puppeteer replacing Selenium/WebDriver?
No. Both projects are valuable for very different reasons:

Selenium/WebDriver focuses on cross-browser automation; its value proposition is a single standard API that works across all major browsers.
Puppeteer focuses on Chromium; its value proposition is richer functionality and higher reliability.

That said, you can use Puppeteer to run tests against Chromium, e.g. using the community-driven jest-puppeteer. While this probably shouldn’t be your only testing solution, it does have a few good points compared to WebDriver:

Puppeteer requires zero setup and comes bundled with the Chromium version it works best with, making it very easy to start with. At the end of the day, it’s better to have a few tests running chromium-only, than no tests at all.
Puppeteer has event-driven architecture, which removes a lot of potential flakiness. There’s no need for evil “sleep(1000)” calls in puppeteer scripts.
Puppeteer runs headless by default, which makes it fast to run. Puppeteer v1.5.0 also exposes browser contexts, making it possible to efficiently parallelize test execution.
Puppeteer shines when it comes to debugging: flip the “headless” bit to false, add “slowMo”, and you’ll see what the browser is doing. You can even open Chrome DevTools to inspect the test environment.

Q: Why doesn’t Puppeteer v.XXX work with Chromium v.YYY?
We see Puppeteer as an indivisible entity with Chromium. Each version of Puppeteer bundles a specific version of Chromium – the only version it is guaranteed to work with.
This is not an artificial constraint: A lot of work on Puppeteer is actually taking place in the Chromium repository. Here’s a typical story:

A Puppeteer bug is reported: https://github.com/puppeteer/puppeteer/issues/2709
It turned out this is an issue with the DevTools protocol, so we’re fixing it in Chromium: https://chromium-review.googlesource.com/c/chromium/src/+/1102154
Once the upstream fix is landed, we roll updated Chromium into Puppeteer: https://github.com/puppeteer/puppeteer/pull/2769

However, oftentimes it is desirable to use Puppeteer with the official Google Chrome rather than Chromium. For this to work, you should install a puppeteer-core version that corresponds to the Chrome version.
For example, in order to drive Chrome 71 with puppeteer-core, use chrome-71 npm tag:
npm install puppeteer-core@chrome-71
Q: Which Chromium version does Puppeteer use?
Look for chromium_revision in package.json. To find the corresponding Chromium commit and version number, search for the revision prefixed by an r in OmahaProxy's ""Find Releases"" section.
Q: What’s considered a “Navigation”?
From Puppeteer’s standpoint, “navigation” is anything that changes a page’s URL.
Aside from regular navigation where the browser hits the network to fetch a new document from the web server, this includes anchor navigations and History API usage.
With this definition of “navigation,” Puppeteer works seamlessly with single-page applications.
Q: What’s the difference between a “trusted"" and ""untrusted"" input event?
In browsers, input events could be divided into two big groups: trusted vs. untrusted.

Trusted events: events generated by users interacting with the page, e.g. using a mouse or keyboard.
Untrusted event: events generated by Web APIs, e.g. document.createEvent or element.click() methods.

Websites can distinguish between these two groups:

using an Event.isTrusted event flag
sniffing for accompanying events. For example, every trusted 'click' event is preceded by 'mousedown' and 'mouseup' events.

For automation purposes it’s important to generate trusted events. All input events generated with Puppeteer are trusted and fire proper accompanying events. If, for some reason, one needs an untrusted event, it’s always possible to hop into a page context with page.evaluate and generate a fake event:
await page.evaluate(() => {
  document.querySelector('button[type=submit]').click();
});
Q: What features does Puppeteer not support?
You may find that Puppeteer does not behave as expected when controlling pages that incorporate audio and video. (For example, video playback/screenshots is likely to fail.) There are two reasons for this:

Puppeteer is bundled with Chromium — not Chrome — and so by default, it inherits all of Chromium's media-related limitations. This means that Puppeteer does not support licensed formats such as AAC or H.264. (However, it is possible to force Puppeteer to use a separately-installed version Chrome instead of Chromium via the executablePath option to puppeteer.launch. You should only use this configuration if you need an official release of Chrome that supports these media formats.)
Since Puppeteer (in all configurations) controls a desktop version of Chromium/Chrome, features that are only supported by the mobile version of Chrome are not supported. This means that Puppeteer does not support HTTP Live Streaming (HLS).

Q: I am having trouble installing / running Puppeteer in my test environment. Where should I look for help?
We have a troubleshooting guide for various operating systems that lists the required dependencies.
Q: How do I try/test a prerelease version of Puppeteer?
You can check out this repo or install the latest prerelease from npm:
npm i --save puppeteer@next
Please note that prerelease may be unstable and contain bugs.
Q: I have more questions! Where do I ask?
There are many ways to get help on Puppeteer:

bugtracker
Stack Overflow
slack channel

Make sure to search these channels before posting your question.

"
43,"







About Laravel
Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

Simple, fast routing engine.
Powerful dependency injection container.
Multiple back-ends for session and cache storage.
Expressive, intuitive database ORM.
Database agnostic schema migrations.
Robust background job processing.
Real-time event broadcasting.

Laravel is accessible, powerful, and provides tools required for large, robust applications.
Learning Laravel
Laravel has the most extensive and thorough documentation and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.
If you don't feel like reading, Laracasts can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.
Laravel Sponsors
We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel Patreon page.

Vehikl
Tighten Co.
Kirschbaum Development Group
64 Robots
Cubet Techno Labs
Cyber-Duck
British Software Development
Webdock, Fast VPS Hosting
DevSquad
UserInsights
Fragrantica
SOFTonSOFA
User10
Soumettre.fr
CodeBrisk
1Forge
TECPRESSO
Runtime Converter
WebL'Agence
Invoice Ninja
iMi digital
Earthlink
Steadfast Collective
We Are The Robots Inc.
Understand.io
Abdel Elrafa
Hyper Host
Appoly
OP.GG

Contributing
Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.
Code of Conduct
In order to ensure that the Laravel community is welcoming to all, please review and abide by the Code of Conduct.
Security Vulnerabilities
If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via taylor@laravel.com. All security vulnerabilities will be promptly addressed.
License
The Laravel framework is open-sourced software licensed under the MIT license.

"
44,"
TypeScript




TypeScript is a language for application-scale JavaScript. TypeScript adds optional types to JavaScript that support tools for large-scale JavaScript applications for any browser, for any host, on any OS. TypeScript compiles to readable, standards-based JavaScript. Try it out at the playground, and stay up to date via our blog and Twitter account.
Find others who are using TypeScript at our community page.
Installing
For the latest stable version:
npm install -g typescript
For our nightly builds:
npm install -g typescript@next
Contribute
There are many ways to contribute to TypeScript.

Submit bugs and help us verify fixes as they are checked in.
Review the source code changes.
Engage with other TypeScript users and developers on StackOverflow.
Help each other in the TypeScript Community Discord.
Join the #typescript discussion on Twitter.
Contribute bug fixes.
Read the language specification (docx,
pdf, md).

This project has adopted the Microsoft Open Source Code of Conduct. For more information see
the Code of Conduct FAQ or contact opencode@microsoft.com
with any additional questions or comments.
Documentation

TypeScript in 5 minutes
Programming handbook
Language specification
Homepage

Building
In order to build the TypeScript compiler, ensure that you have Git and Node.js installed.
Clone a copy of the repo:
git clone https://github.com/microsoft/TypeScript.git
Change to the TypeScript directory:
cd TypeScript
Install Gulp tools and dev dependencies:
npm install -g gulp
npm install
Use one of the following to build and test:
gulp local             # Build the compiler into built/local.
gulp clean             # Delete the built compiler.
gulp LKG               # Replace the last known good with the built one.
                       # Bootstrapping step to be executed when the built compiler reaches a stable state.
gulp tests             # Build the test infrastructure using the built compiler.
gulp runtests          # Run tests using the built compiler and test infrastructure.
                       # Some low-value tests are skipped when not on a CI machine - you can use the
                       # --skipPercent=0 command to override this behavior and run all tests locally.
                       # You can override the specific suite runner used or specify a test for this command.
                       # Use --tests=<testPath> for a specific test and/or --runner=<runnerName> for a specific suite.
                       # Valid runners include conformance, compiler, fourslash, project, user, and docker
                       # The user and docker runners are extended test suite runners - the user runner
                       # works on disk in the tests/cases/user directory, while the docker runner works in containers.
                       # You'll need to have the docker executable in your system path for the docker runner to work.
gulp runtests-parallel # Like runtests, but split across multiple threads. Uses a number of threads equal to the system
                       # core count by default. Use --workers=<number> to adjust this.
gulp baseline-accept   # This replaces the baseline test results with the results obtained from gulp runtests.
gulp lint              # Runs eslint on the TypeScript source.
gulp help              # List the above commands.

Usage
node built/local/tsc.js hello.ts
Roadmap
For details on our planned features and future direction please refer to our roadmap.

"
45,"
The Moby Project

Moby is an open-source project created by Docker to enable and accelerate software containerization.
It provides a ""Lego set"" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.
Components include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.
Principles
Moby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience.
It is open to the community to help set its direction.

Modular: the project includes lots of components that have well-defined functions and APIs that work together.
Batteries included but swappable: Moby includes enough components to build fully featured container system, but its modular architecture ensures that most of the components can be swapped by different implementations.
Usable security: Moby provides secure defaults without compromising usability.
Developer focused: The APIs are intended to be functional and useful to build powerful tools.
They are not necessarily intended as end user tools but as components aimed at developers.
Documentation and UX is aimed at developers not end users.

Audience
The Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers.
It is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.
Relationship with Docker
The components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project.
New projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product.
However, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.
The Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful.
The releases are supported by the maintainers, community and users, on a best efforts basis only, and are not intended for customers who want enterprise or commercial support; Docker EE is the appropriate product for these use cases.

Legal
Brought to you courtesy of our legal counsel. For more context,
please see the NOTICE document in this repo.
Use and transfer of Moby may be subject to certain restrictions by the
United States and other governments.
It is your responsibility to ensure that your use and/or transfer does not
violate applicable laws.
For more information, please see https://www.bis.doc.gov
Licensing
Moby is licensed under the Apache License, Version 2.0. See
LICENSE for the full
license text.

"
46,"
Welcome to the Windows Terminal, Console and Command-Line repo
This repository contains the source code for:

Windows Terminal
The Windows console host (conhost.exe)
Components shared between the two projects
ColorTool
Sample projects that show how to consume the Windows Console APIs

Related repositories include:

Console API Documentation
Cascadia Code Font

Installing and running Windows Terminal

👉 Note: Windows Terminal requires Windows 10 1903 (build 18362) or later

Manually installing builds from this repository
For users who are unable to install Terminal from the Microsoft Store, Terminal builds can be manually downloaded from this repository's Releases page.

⚠ Note: If you install Terminal manually:

Be sure to install the Desktop Bridge VC++ v14 Redistributable Package otherwise Terminal may not install and/or run and may crash at startup
Terminal will not auto-update when new builds are released so you will need to regularly install the latest Terminal release to receive all the latest fixes and improvements!


Install via Chocolatey (unofficial)
Chocolatey users can download and install the latest Terminal release by installing the microsoft-windows-terminal package:
choco install microsoft-windows-terminal
To upgrade Windows Terminal using Chocolatey, run the following:
choco upgrade microsoft-windows-terminal
If you have any issues when installing/upgrading the package please go to the Windows Terminal package page and follow the Chocolatey triage process

Project Build Status



Project
Build Status




Terminal



ColorTool





Windows Terminal v1.0 Roadmap
The plan for delivering Windows Terminal v1.0 is described here, and will be updated as the project proceeds.

Terminal & Console Overview
Please take a few minutes to review the overview below before diving into the code:
Windows Terminal
Windows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming & styling, and more.
The Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn't consume vast amounts of memory or power.
The Windows Console Host
The Windows Console host, conhost.exe, is Windows' original command-line user experience. It also hosts Windows' command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the conhost.exe in Windows itself is built.
Since taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for ANSI / Virtual Terminal sequences, 24-bit color, a Pseudoconsole (""ConPTY""), and more.
However, because Windows Console's primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji.
These limitations led us to create the new Windows Terminal.

You can read more about the evolution of the command-line in general, and the Windows command-line specifically in this accompanying series of blog posts on the Command-Line team's blog.

Shared Components
While overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient STL containers, and made the code simpler and safer by using Microsoft's Windows Implementation Libraries - WIL.
This overhaul resulted in several of Console's key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more.
Creating the new Windows Terminal
When we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal's core itself as a reusable UI control that others can incorporate into their own applications.
The result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or directly from this repo's releases.

Resources
For more information about Windows Terminal, you may find some of these resources useful and interesting:

Command-Line Blog
Command-Line Backgrounder Blog Series
Windows Terminal Launch: Terminal ""Sizzle Video""
Windows Terminal Launch: Build 2019 Session
Run As Radio: Show 645 - Windows Terminal with Richard Turner
Azure Devops Podcast: Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal
Microsoft Ignite 2019 Session: The Modern Windows Command Line: Windows Terminal - BRK3321


FAQ
I built and ran the new Terminal, but it looks just like the old console
Cause: You're launching the incorrect solution in Visual Studio.
Solution: Make sure you're building & deploying the CascadiaPackage project in Visual Studio.

⚠ Note: OpenConsole.exe is just a locally-built conhost.exe, the classic Windows Console that hosts Windows' command-line infrastructure. OpenConsole is used by Windows Terminal to connect to and communicate with command-line applications (via ConPty).


Documentation
All project documentation is located in the ./doc folder. If you would like to contribute to the documentation, please submit a pull request.

Contributing
We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!
BEFORE you start work on a feature/fix, please read & follow our Contributor's Guide to help avoid any wasted or duplicate effort.
Communicating with the Team
The easiest way to communicate with the team is via GitHub issues.
Please file new issues, feature requests and suggestions, but DO search for similar open/closed pre-existing issues before creating a new issue.
If you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter:

Kayla Cinnamon, Program Manager: @cinnamon_msft
Rich Turner, Program Manager: @richturn_ms
Dustin Howett, Engineering Lead: @dhowett
Michael Niksa, Senior Developer: @michaelniksa
Mike Griese, Developer: @zadjii
Carlos Zamora, Developer: @cazamor_msft

Developer Guidance
Prerequisites

You must be running Windows 1903 (build >= 10.0.18362.0) or later to run Windows Terminal
You must enable Developer Mode in the Windows Settings app to locally install and run Windows Terminal
You must have the Windows 10 1903 SDK installed
You must have at least VS 2019 installed
You must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2019 will prompt you to install missing components automatically:

Desktop Development with C++
Universal Windows Platform Development
The following Individual Components

C++ (v142) Universal Windows Platform Tools





Building the Code
This repository uses git submodules for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building:
git submodule update --init --recursive
OpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts & tools in the /tools directory:
Building in PowerShell
Import-Module .\tools\OpenConsole.psm1
Set-MsBuildDevEnvironment
Invoke-OpenConsoleBuild
Building in Cmd
.\tools\razzle.cmd
bcz
Debugging Terminal
To debug Terminal in VS, right click on CascadiaPackage (in the Solution Explorer) and go to properties. In the Debug menu, change ""Application process"" and ""Background task process"" to ""Native Only"".
You should then be able to build & debug the Terminal project by hitting F5.
Debugging

To debug in VS, right click on CascadiaPackage (from VS Solution Explorer) and go to properties, in the Debug menu, change ""Application process"" and ""Background task process"" to ""Native Only"".

Coding Guidance
Please review these brief docs below about our coding practices.

👉 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!)

This is a work in progress as we learn what we'll need to provide people in order to be effective contributors to our project.

Coding Style
Code Organization
Exceptions in our legacy codebase
Helpful smart pointers and macros for interfacing with Windows in WIL


Code of Conduct
This project has adopted the Microsoft Open Source Code of Conduct.
For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.

"
47,"




Angular
Angular is a development platform for building mobile and desktop web applications using TypeScript/JavaScript and other languages.
Quickstart
Get started in 5 minutes.
Changelog
Learn about the latest improvements.
Want to help?
Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on our
guidelines for contributing and then check out one of our issues in the hotlist: community-help.

"
48,"





Ant Design

An enterprise-class UI design language and React UI library.
     
    
  


English | 简体中文
✨ Features

An enterprise-class UI design system for web applications.
A set of high-quality React components out of the box.
Written in TypeScript with predictable static types.
The whole package of development and design resources and tools.

🖥 Environment Support

Modern browsers and Internet Explorer 9+ (with polyfills)
Server-side Rendering
Electron




IE / Edge
Firefox
Chrome
Safari
Opera
Electron




IE9, IE10, IE11, Edge
last 2 versions
last 2 versions
last 2 versions
last 2 versions
last 2 versions



📦 Install
npm install antd
yarn add antd
🔨 Usage
import { DatePicker } from ""antd"";
ReactDOM.render(<DatePicker />, mountNode);
And import style manually:
import ""antd/dist/antd.css""; // or 'antd/dist/antd.less'
Or import components on demand.
TypeScript
See Use in TypeScript.
🌍 Internationalization
See i18n.
🔗 Links

Home page
Components
Ant Design Pro
Change Log
rc-components
Mobile UI
Ant Design Icons
Ant Design Colors
Ant Design Pro Layout
Ant Design Pro Blocks
Dark Theme
Landing Pages
Motion
Scaffold Market
Developer Instruction
Versioning Release Note
FAQ
CodeSandbox Template for bug reports
Awesome Ant Design
Customize Theme

⌨️ Development
Use Gitpod, a free online dev environment for GitHub.

Or clone locally:
$ git clone git@github.com:ant-design/ant-design.git
$ cd ant-design
$ npm install
$ npm start
Open your browser and visit http://127.0.0.1:8001 , see more at Development.
🤝 Contributing 
Read our contributing guide and let's build a better antd together.
We welcome all contributions. Please read our CONTRIBUTING.md first. You can submit any ideas as pull requests or as GitHub issues. If you'd like to improve code, check out the Development Instructions and have a good time! :)
If you are a collaborator, please follow our Pull Request principle to create a Pull Request by collaborator template.

❤️ Sponsors and Backers  



"
49,"

Design patterns implemented in Java




Introduction
Design patterns are the best formalized practices a programmer can use to
solve common problems when designing an application or system.
Design patterns can speed up the development process by providing tested, proven
development paradigms.
Reusing design patterns help prevent subtle issues that cause major
problems, and it also improves code readability for coders and architects who
are familiar with the patterns.
Getting started
This site showcases Java Design Patterns. The solutions have been developed by
experienced programmers and architects from the open source community. The
patterns can be browsed by their high level descriptions or by looking at their
source code. The source code examples are well commented and can be thought as
programming tutorials how to implement a specific pattern. We use the most
popular battle-proven open source Java technologies.
Before you dive into the material, you should be familiar with various
software design principles.
All designs should be as simple as possible. You should start with KISS, YAGNI,
and Do The Simplest Thing That Could Possibly Work principles. Complexity and
patterns should only be introduced when they are needed for practical
extensibility.
Once you are familiar with these concepts you can start drilling down into
patterns by any of the following approaches

Using difficulty tags, Difficulty-Beginner, Difficulty-Intermediate & Difficulty-Expert.
Using pattern categories, Creational, Behavioral, and others.
Search for a specific pattern. Can't find one? Please report a new pattern here.

Hopefully you find the object oriented solutions presented on this site useful
in your architectures and have as much fun learning them as we had developing them.
How to contribute
If you are willing to contribute to the project you will find the relevant information in
our developer wiki. We will help
you and answer your questions in the Gitter chatroom.
License
This project is licensed under the terms of the MIT license.

"
50,"

30 seconds of code

Short JavaScript code snippets for all your development needs


Visit our website to view our snippet collection.
Use the Search page to find snippets that suit your needs. You can search by name, tag, language or using a snippet's description. Just start typing a term and see what comes up.
Browse the JavaScript Snippet List to see all the snippets in this project or click individual tags at the top of the same page to narrow down your search to a specific tag.
Click on each snippet card to view the whole snippet, including code, explanation and examples.
You can use the button on the right side of a snippet card to copy the code to clipboard.
If you like the project, give it a star. It means a lot to the people maintaining it.

Want to contribute?

If you want to help us improve, take a minute to read the Contribution Guidelines first.
Use the Snippet Template to add new snippets to the collection.
If you find a problem with a specific snippet, please open an issue.
If you find a problem with the website, please report it in the web repository.

Credits & Sponsors

This repository is maintained by the 30-seconds organization on GitHub.
All snippets are licensed under the CC0-1.0 License, unless explicitly stated otherwise.
Logos, names and trademarks are not to be used without the explicit consent of the maintainers or owners of the 30 seconds GitHub organization.
Our website is powered by Netlify, Gatsby, Travis CI & GitHub.


"
51,"



Material-UI

React components that implement Google's Material Design.















Installation
Material-UI is available as an npm package.
Stable channel v4
// with npm
npm install @material-ui/core

// with yarn
yarn add @material-ui/core
v3.x (Migration from v3 to v4)
v0.x (Migration to v1)
Please note that @next will only point to pre-releases; to get the latest stable release use @latest instead.
Who sponsors Material-UI?
Diamond 💎
3/3 slots available
Diamond Sponsors are those who have pledged $2,000/month and more to Material-UI.
Please contact us at diamond@material-ui.com to subscribe to this tier.
Gold 🏆
via Patreon




via OpenCollective



Gold Sponsors are those who have pledged $500/month and more to Material-UI.
There is more!
See the full list of our backers.
Usage
Here is a quick example to get you started, it's all you need:
import React from 'react';
import ReactDOM from 'react-dom';
import Button from '@material-ui/core/Button';

function App() {
  return (
    <Button variant=""contained"" color=""primary"">
      Hello World
    </Button>
  );
}

ReactDOM.render(<App />, document.querySelector('#app'));
Yes, it's really all you need to get started as you can see in this live and interactive demo:

Questions
For how-to questions and other non-issues,
please use StackOverflow instead of Github issues.
There is a StackOverflow tag called ""material-ui"" that you can use to tag your questions.
Examples
Are you looking for an example project to get started?
We host some.
Documentation
Check out our documentation website.
Premium Themes
You can find complete templates & themes in our premium themes section.
Contributing
Read our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Material-UI.
Notice that contributions go far beyond pull requests and commits.
Although we love giving you the opportunity to put your stamp on Material-UI, we also are thrilled to receive a variety of other contributions.
Changelog
Recently Updated?
Please read the changelog.
Roadmap
The future plans and high priority features and enhancements can be found in the roadmap file.
License
This project is licensed under the terms of the
MIT license.

"
52,"
jQuery — New Wave JavaScript


Contribution Guides
In the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:

Getting Involved
Core Style Guide
Writing Code for jQuery Foundation Projects

Environments in which to use jQuery

Browser support
jQuery also supports Node, browser extensions, and other non-browser environments.

What you need to build your own jQuery
To build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.
For Windows, you have to download and install git and Node.js.
macOS users should install Homebrew. Once Homebrew is installed, run brew install git to install git,
and brew install node to install Node.js.
Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from source
if you swing that way. Easy-peasy.
How to build your own jQuery
Clone a copy of the main jQuery git repo by running:
git clone git://github.com/jquery/jquery.git
Enter the jquery directory and run the build script:
cd jquery && npm run build
The built version of jQuery will be put in the dist/ subdirectory, along with the minified copy and associated map file.
If you want to create custom build or help with jQuery development, it would be better to install grunt command line interface as a global package:
npm install -g grunt-cli

Make sure you have grunt installed by testing:
grunt -V

Now by running the grunt command, in the jquery directory, you can build a full version of jQuery, just like with an npm run build command:
grunt

There are many other tasks available for jQuery Core:
grunt -help

Modules
Special builds can be created that exclude subsets of jQuery functionality.
This allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.
For example, an app that only used JSONP for $.ajax() and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.
Any module may be excluded except for core, and selector. To exclude a module, pass its path relative to the src folder (without the .js extension).
Some example modules that can be excluded are:

ajax: All AJAX functionality: $.ajax(), $.get(), $.post(), $.ajaxSetup(), .load(), transports, and ajax event shorthands such as .ajaxStart().
ajax/xhr: The XMLHTTPRequest AJAX transport only.
ajax/script: The <script> AJAX transport only; used to retrieve scripts.
ajax/jsonp: The JSONP AJAX transport only; depends on the ajax/script transport.
css: The .css() method. Also removes all modules depending on css (including effects, dimensions, and offset).
css/showHide:  Non-animated .show(), .hide() and .toggle(); can be excluded if you use classes or explicit .css() calls to set the display property. Also removes the effects module.
deprecated: Methods documented as deprecated but not yet removed.
dimensions: The .width() and .height() methods, including inner- and outer- variations.
effects: The .animate() method and its shorthands such as .slideUp() or .hide(""slow"").
event: The .on() and .off() methods and all event functionality. Also removes event/alias.
event/alias: All event attaching/triggering shorthands like .click() or .mouseover().
event/trigger: The .trigger() and .triggerHandler() methods. Used by the alias module.
offset: The .offset(), .position(), .offsetParent(), .scrollLeft(), and .scrollTop() methods.
wrap: The .wrap(), .wrapAll(), .wrapInner(), and .unwrap() methods.
core/ready: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with jQuery() will simply be called immediately. However, jQuery(document).ready() will not be a function and .on(""ready"", ...) or similar will not be triggered.
deferred: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. Note that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (grunt custom:-deferred,-ajax,-effects,-core/ready).
exports/global: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.
exports/amd: Exclude the AMD definition.

The build process shows a message for each dependent module it excludes or includes.
AMD name
As an option, you can set the module name for jQuery's AMD definition. By default, it is set to ""jquery"", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply set the ""amd"" option:
grunt custom --amd=""custom-name""
Or, to define anonymously, set the name to an empty string.
grunt custom --amd=""""
Custom Build Examples
To create a custom build, first check out the version:
git pull; git checkout VERSION
Where VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:
npm install
Create the custom build using the grunt custom option, listing the modules to be excluded.
Exclude all ajax functionality:
grunt custom:-ajax
Excluding css removes modules depending on CSS: effects, offset, dimensions.
grunt custom:-css
Exclude a bunch of modules:
grunt custom:-ajax,-css,-deprecated,-dimensions,-effects,-event/alias,-offset,-wrap
For questions or requests regarding custom builds, please start a thread on the Developing jQuery Core section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process.
Running the Unit Tests
Make sure you have the necessary dependencies:
npm install
Start grunt watch or npm start to auto-build jQuery as you work:
grunt watch
Run the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the ""test"" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:

Windows: WAMP download
Mac: MAMP download
Linux: Setting up LAMP
Mongoose (most platforms)

Building to a different directory
To copy the built jQuery files from /dist to another directory:
grunt && grunt dist:/path/to/special/location/
With this example, the output files would be:
/path/to/special/location/jquery.js
/path/to/special/location/jquery.min.js
To add a permanent copy destination, create a file in dist/ called "".destination.json"". Inside the file, paste and customize the following:
{
  ""/Absolute/path/to/other/destination"": true
}
Additionally, both methods can be combined.
Essential Git
As the source code is handled by the Git version control system, it's useful to know some features used.
Cleaning
If you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):
git reset --hard upstream/master
git clean -fdx
Rebasing
For feature/topic branches, you should always use the --rebase flag to git pull, or if you are usually handling many temporary ""to be in a github pull request"" branches, run the following to automate this:
git config branch.autosetuprebase local
(see man git-config for more information)
Handling merge conflicts
If you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature
git mergetool. Even though the default tool xxdiff looks awful/old, it's rather useful.
The following are some commands that can be used there:

Ctrl + Alt + M - automerge as much as possible
b - jump to next merge conflict
s - change the order of the conflicted lines
u - undo a merge
left mouse button - mark a block to be the winner
middle mouse button - mark a line to be the winner
Ctrl + S - save
Ctrl + Q - quit

QUnit Reference
Test methods
expect( numAssertions );
stop();
start();
Note: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.
Test assertions
ok( value, [message] );
equal( actual, expected, [message] );
notEqual( actual, expected, [message] );
deepEqual( actual, expected, [message] );
notDeepEqual( actual, expected, [message] );
strictEqual( actual, expected, [message] );
notStrictEqual( actual, expected, [message] );
throws( block, [expected], [message] );
Test Suite Convenience Methods Reference (See test/data/testinit.js)
Returns an array of elements with the given IDs
q( ... );
Example:
q(""main"", ""foo"", ""bar"");

=> [ div#main, span#foo, input#bar ]
Asserts that a selection matches the given IDs
t( testName, selector, [ ""array"", ""of"", ""ids"" ] );
Example:
t(""Check for something"", ""//[a]"", [""foo"", ""bar""]);
Fires a native DOM event without going through jQuery
fireNative( node, eventType )
Example:
fireNative( jQuery(""#elem"")[0], ""click"" );
Add random number to url to stop caching
url( ""some/url"" );
Example:
url(""index.html"");

=> ""data/index.html?10538358428943""


url(""mock.php?foo=bar"");

=> ""data/mock.php?foo=bar&10538358345554""
Run tests in an iframe
Some tests may require a document other than the standard test fixture, and
these can be run in a separate iframe. The actual test code and assertions
remain in jQuery's main test files; only the minimal test fixture markup
and setup code should be placed in the iframe file.
testIframe( testName, fileName,
  function testCallback(
      assert, jQuery, window, document,
	  [ additional args ] ) {
	...
  } );
This loads a page, constructing a url with fileName ""./data/"" + fileName.
The iframed page determines when the callback occurs in the test by
including the ""/test/data/iframeTest.js"" script and calling
startIframeTest( [ additional args ] ) when appropriate. Often this
will be after either document ready or window.onload fires.
The testCallback receives the QUnit assert object created by testIframe
for this test, followed by the global jQuery, window, and document from
the iframe. If the iframe code passes any arguments to startIframeTest,
they follow the document argument.
Questions?
If you have any questions, please feel free to ask on the
Developing jQuery Core forum or in #jquery on irc.freenode.net.

"
53,"

Open Source Society University

  Path to a free self-taught education in Computer Science!












Contents

Summary
Curriculum

Prerequisites
Intro CS
Core CS
Advanced CS
Final project
Pro CS


Code of conduct
Community

How to show your progress
Team


References

Summary
The OSSU curriculum is a complete education in computer science using online materials.
It's not merely for career training or professional development.
It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines,
and for those who have the discipline, will, and (most importantly!) good habits to obtain this education largely on their own,
but with support from a worldwide community of fellow learners.
It is designed according to the degree requirements of undergraduate computer science majors, minus general education (non-CS) requirements,
as it is assumed most of the people following this curriculum are already educated outside the field of CS.
The courses themselves are among the very best in the world, often coming from Harvard, Princeton, MIT, etc.,
but specifically chosen to meet the following criteria.
Courses must:

Be open for enrollment
Run regularly (ideally in self-paced format, otherwise running at least once a month or so)
Fulfill the academic requirements of OSSU
Fit neatly into the progression of the curriculum with respect to topics and difficulty level
Be of generally high quality in teaching materials and pedagogical principles

When no course meets the above criteria, the coursework is supplemented with a book.
When there are courses or books that don't fit into the curriculum but are otherwise of high quality,
they belong in extras/courses or extras/readings.
Organization. The curriculum is designed as follows:

Intro CS: for students to try out CS and see if it's right for them
Core CS: corresponds roughly to the first three years of a computer science curriculum, taking classes that all majors would be required to take
Advanced CS: corresponds roughly to the final year of a computer science curriculum, taking electives according to the student's interests
Final Project: a project for students to validate, consolidate, and display their knowledge, to be evaluated by their peers worldwide
Pro CS: graduate-level specializations students can elect to take after completing the above curriculum if they want to maximize their chances of getting a good job

Duration. It is possible to finish Core CS within about 2 years if you plan carefully and devote roughly 18-22 hours/week to your studies.
Courses in Core CS should be taken linearly if possible, but since a perfectly linear progression is rarely possible,
each class's prerequisites are specified so that you can design a logical but non-linear progression
based on the class schedules and your own life plans.
Cost. All or nearly all course material prior to Pro CS is available for free.
However, some courses may charge money for assignments/tests/projects to be graded.
Note that Coursera offers financial aid.
Decide how much or how little to spend based on your own time and budget;
just remember that you can't purchase success!
Process. Students can work through the curriculum alone or in groups, in order or out of order.

For grouping up, please use the cohorts repository to find or create a cohort suited to you.
We recommend doing all courses in Core CS, only skipping a course when you are certain that you've already learned the material previously.
For simplicity, we recommend working through courses (especially Core CS) in order from top to bottom, as they have already been topologically sorted by their prerequisites.
Courses in Advanced CS are electives. Choose one subject (e.g. Advanced programming) you want to become an expert in and take all the courses under that heading. You can also create your own custom subject, but we recommend getting validation from the community on the subject you choose.

Content policy. If you plan on showing off some of your coursework publicly, you must share only files that you are allowed to.
Do NOT disrespect the code of conduct that you signed in the beginning of each course!
How to contribute. Please see CONTRIBUTING.
Getting help. Please check our Frequently Asked Questions, and if you cannot find the answer, file an issue or talk to our friendly community!
Curriculum
Curriculum version: 8.0.0 (see CHANGELOG)

Prerequisites
Intro CS

Introduction to Programming
Introduction to Computer Science


Core CS

Core programming
Core math
Core systems
Core theory
Core applications


Advanced CS

Advanced programming
Advanced math
Advanced systems
Advanced theory
Advanced applications


Final project
Pro CS


Prerequisites

Core CS assumes the student has already taken high school math and physics, including algebra, geometry, and pre-calculus.
Some high school graduates will have already taken AP Calculus, but this is usually only about 3/4 of a college calculus class, so the calculus courses in the curriculum are still recommended.
Advanced CS assumes the student has already taken the entirety of Core CS
and is knowledgeable enough now to decide which electives to take.
Note that Advanced systems assumes the student has taken a basic physics course (e.g. AP Physics in high school).

Intro CS
Introduction to Programming
If you've never written a for-loop, or don't know what a string is in programming, start here. Choose one of the two course series below. Either one will give you an introduction to programming that assumes no prior knowledge.
Trying to decide between them?
Python for Everyone will introduce you to a popular language and will quickly move to practical programming tasks - using web APIs and databases. This will give you a taste of what many professional developers do.
Fundamentals of Computing will also start by introducing you to Python. It then moves on to give an introduction to academic Computer Science topics, like sorting and recursion. This will give you a taste of what the following courses will be like. (Students who complete Fundamentals of Computing can skip Intro to Computer Science and begin Core CS.)
Topics covered:
simple programs
simple data structures



Courses
Effort
Prerequisites




Python for Everyone
58 hours
none


Fundamentals of Computing
138 hours
high school mathematics



Introduction to Computer Science
This course will introduce you to the world of computer science. Students who have been introduced to programming, either from the courses above or through study elsewhere, should take this course for a flavor of the material to come. If you finish the course wanting more, Computer Science is likely for you!
Topics covered:
computation
imperative programming
basic data structures and algorithms
and more



Courses
Duration
Effort
Prerequisites




Introduction to Computer Science and Programming using Python (alt)
9 weeks
15 hours/week
high school algebra



Core CS
All coursework under Core CS is required, unless otherwise indicated.
Core programming
Topics covered:
functional programming
design for testing
program requirements
common design patterns
unit testing
object-oriented design
Java
static typing
dynamic typing
ML-family languages (via Standard ML)
Lisp-family languages (via Racket)
Ruby
and more



Courses
Duration
Effort
Prerequisites




How to Code - Simple Data
7 weeks
8-10 hours/week
none


How to Code - Complex Data
6 weeks
8-10 hours/week
How to Code: Simple Data


Software Construction - Data Abstraction
6 weeks
8-10 hours/week
How to Code - Complex Data


Software Construction - Object-Oriented Design
6 weeks
8-10 hours/week
Software Construction - Data Abstraction


Programming Languages, Part A
4 weeks
8-16 hours/week
recommended: Java, C


Programming Languages, Part B
3 weeks
8-16 hours/week
Programming Languages, Part A


Programming Languages, Part C
3 weeks
8-16 hours/week
Programming Languages, Part B



Readings

Required to learn about monads, laziness, purity: Learn You a Haskell for a Great Good!

Note: probably the best resource to learn Haskell: Haskell Programming from First Principles paid


Required, to learn about logic programming, backtracking, unification: Learn Prolog Now!

Core math
Topics covered:
linear transformations
matrices
vectors
mathematical proofs
number theory
differential calculus
integral calculus
sequences and series
discrete mathematics
basic statistics
O-notation
graph theory
vector calculus
discrete probability
and more



Courses
Duration
Effort
Prerequisites




Essence of Linear Algebra
-
-
pre-calculus


Linear Algebra - Foundations to Frontiers (alt)
15 weeks
8 hours/week
Essence of Linear Algebra


Calculus 1A: Differentiation
13 weeks
6-10 hours/week
pre-calculus


Calculus 1B: Integration
13 weeks
5-10 hours/week
Calculus 1A


Calculus 1C: Coordinate Systems & Infinite Series
13 weeks
5-10 hours/week
Calculus 1B


Mathematics for Computer Science1
13 weeks
5 hours/week
Calculus 1C



1: Students struggling with MIT Math for CS can consider taking the Discrete Mathematics Specialization first.
It is more interactive but less comprehensive, and it costs money to unlock full interactivity.
Core systems
Topics covered:
procedural programming
manual memory management
boolean algebra
gate logic
memory
computer architecture
assembly
machine language
virtual machines
high-level languages
compilers
operating systems
network protocols
and more



Courses
Duration
Effort
Additional Text / Assignments
Prerequisites




Introduction to Computer Science - CS50 (alt)
12 weeks
10-20 hours/week
After the sections on C, skip to the next course. Why?
introductory programming


Build a Modern Computer from First Principles: From Nand to Tetris (alt)
6 weeks
7-13 hours/week
-
C-like programming language


Build a Modern Computer from First Principles: Nand to Tetris Part II 
6 weeks
12-18 hours/week
-
one of these programming languages, From Nand to Tetris Part I


Introduction to Computer Networking
8 weeks
4–12 hours/week
Assignment 1Assignment 2Assignment 3Assignment 4
algebra, probability, basic CS


ops-class.org - Hack the Kernel
15 weeks
6 hours/week
Replace course textbook with Operating Systems: Three Easy Pieces
algorithms



Core theory
Topics covered:
divide and conquer
sorting and searching
randomized algorithms
graph search
shortest paths
data structures
greedy algorithms
minimum spanning trees
dynamic programming
NP-completeness
and more



Courses
Duration
Effort
Prerequisites




Algorithms: Design and Analysis, Part I
8 weeks
4-8 hours/week
any programming language, Mathematics for Computer Science


Algorithms: Design and Analysis, Part II
8 weeks
4-8 hours/week
Part I



Core applications
Topics covered:
Agile methodology
REST
software specifications
refactoring
relational databases
transaction processing
data modeling
neural networks
supervised learning
unsupervised learning
OpenGL
raytracing
block ciphers
authentication
public key encryption
and more



Courses
Duration
Effort
Prerequisites




Databases
12 weeks
8-12 hours/week
some programming, basic CS


Machine Learning
11 weeks
4-6 hours/week
linear algebra


Computer Graphics
6 weeks
12 hours/week
C++ or Java, linear algebra


Cryptography I
6 weeks
5-7 hours/week
linear algebra, probability


Software Engineering: Introduction
6 weeks
8-10 hours/week
Software Construction - Object-Oriented Design


Software Development Capstone Project
6-7 weeks
8-10 hours/week
Software Engineering: Introduction



Advanced CS
After completing every required course in Core CS, students should choose a subset of courses from Advanced CS based on interest.
Not every course from a subcategory needs to be taken.
But students should take every course that is relevant to the field they intend to go into.
The Advanced CS study should then end with one of the Specializations under Advanced applications.
A Specialization's Capstone, if taken, may act as the Final project, if permitted by the Honor Code of the course.
If not, or if a student chooses not to take the Capstone, then a separate Final project will need to be done to complete this curriculum.
Advanced programming
Topics covered:
debugging theory and practice
goal-oriented programming
GPU programming
CUDA
parallel computing
object-oriented analysis and design
UML
large-scale software architecture and design
and more



Courses
Duration
Effort
Prerequisites




Compilers
9 weeks
6-8 hours/week
none


Software Debugging
8 weeks
6 hours/week
Python, object-oriented programming


Software Testing
4 weeks
6 hours/week
Python, programming experience


LAFF - On Programming for Correctness
7 weeks
6 hours/week
linear algebra


Introduction to Parallel Programming (alt)
12 weeks
-
C, algorithms


Software Architecture & Design
8 weeks
6 hours/week
software engineering in Java



Advanced math
Topics covered:
parametric equations
polar coordinate systems
multivariable integrals
multivariable differentials
probability theory
and more



Courses
Duration
Effort
Prerequisites




Multivariable Calculus
13 weeks
12 hours/week
MIT Calculus 1C


Introduction to Probability - The Science of Uncertainty
18 weeks
12 hours/week
Multivariable Calculus



Advanced systems
Topics covered:
digital signaling
combinational logic
CMOS technologies
sequential logic
finite state machines
processor instruction sets
caches
pipelining
virtualization
parallel processing
virtual memory
synchronization primitives
system call interface
and more



Courses
Duration
Effort
Prerequisites




Reliable Distributed Systems, Part 1
5 weeks
5 hours/week
Scala, intermediate CS


Reliable Distributed Systems, Part 2
5 weeks
5 hours/week
Part 1


Electricity and Magnetism, Part 11
7 weeks
8-10 hours/week
calculus, basic mechanics


Electricity and Magnetism, Part 2
7 weeks
8-10 hours/week
Electricity and Magnetism, Part 1


Computation Structures 1: Digital Circuits
10 weeks
6 hours/week
electricity, magnetism


Computation Structures 2: Computer Architecture
10 weeks
6 hours/week
Computation Structures 1


Computation Structures 3: Computer Organization
10 weeks
6 hours/week
Computation Structures 2



1 Note:
These courses assume knowledge of basic physics.
(Why?)
If you are struggling, you can find a physics MOOC or utilize the materials from Khan Academy:
Khan Academy - Physics
Advanced theory
Topics covered:
formal languages
Turing machines
computability
event-driven concurrency
automata
distributed shared memory
consensus algorithms
state machine replication
computational geometry theory
propositional logic
relational logic
Herbrand logic
concept lattices
game trees
and more



Courses
Duration
Effort
Prerequisites




Introduction to Logic
10 weeks
4-8 hours/week
set theory


Automata Theory
7 weeks
10 hours/week
discrete mathematics, logic, algorithms


Computational Geometry
16 weeks
8 hours/week
algorithms, C++


Introduction to Formal Concept Analysis
6 weeks
4-6 hours/week
logic, probability


Game Theory
8 weeks
x hours/week
mathematical thinking, probability, calculus



Advanced applications
These Coursera Specializations all end with a Capstone project.
Depending on the course, you may be able to utilize the Capstone as your Final Project for this Computer Science curriculum.
Note that doing a Specialization with the Capstone at the end always costs money.
So if you don't wish to spend money or use the Capstone as your Final, it may be possible to take the courses in the Specialization for free by manually searching for them, but not all allow this.



Courses
Duration
Effort
Prerequisites




Robotics (Specialization)
26 weeks
2-5 hours/week
linear algebra, calculus, programming, probability


Data Mining (Specialization)
30 weeks
2-5 hours/week
machine learning


Big Data (Specialization)
30 weeks
3-5 hours/week
none


Internet of Things (Specialization)
30 weeks
1-5 hours/week
strong programming


Cloud Computing (Specialization)
30 weeks
2-6 hours/week
C++ programming


Full Stack Web Development (Specialization)
27 weeks
2-6 hours/week
programming, databases


Data Science (Specialization)
43 weeks
1-6 hours/week
none


Functional Programming in Scala (Specialization)
29 weeks
4-5 hours/week
One year programming experience



Final project
OSS University is project-focused.
You are encouraged to do the assignments and exams for each course, but what really matters is whether you can use your knowledge to solve a real-world problem.
After you've gotten through all of Core CS and the parts of Advanced CS relevant to you, you should think about a problem that you can solve using the knowledge you've acquired.
Not only does real project work look great on a resume, but the project will also validate and consolidate your knowledge.
You can create something entirely new, or you can find an existing project that needs help via websites like
CodeTriage
or
First Timers Only.
Another option is using the Capstone project from taking one of the Specializations in Advanced applications;
whether or not this makes sense depends on the course, the project, and whether or not the course's Honor Code permits you to display your work publicly.
In some cases, it may not be permitted;
do not violate your course's Honor Code!
Put the OSSU-CS badge in the README of your repository!


Markdown: [![Open Source Society University - Computer Science](https://img.shields.io/badge/OSSU-computer--science-blue.svg)](https://github.com/ossu/computer-science)
HTML: <a href=""https://github.com/ossu/computer-science""><img alt=""Open Source Society University - Computer Science"" src=""https://img.shields.io/badge/OSSU-computer--science-blue.svg""></a>

Evaluation
Upon completing your final project, submit your project's information to PROJECTS
via a pull request and use our community channels to announce it to your fellow students.
Your peers and mentors from OSSU will then informally evaluate your project.
You will not be ""graded"" in the traditional sense — everyone has their own measurements for what they consider a success.
The purpose of the evaluation is to act as your first announcement to the world that you are a computer scientist
and to get experience listening to feedback — both positive and negative — and taking it in stride.
The final project evaluation has a second purpose: to evaluate whether OSSU,
through its community and curriculum, is successful in its mission to guide independent learners in obtaining a world-class computer science education.
Cooperative work
You can create this project alone or with other students!
We love cooperative work!
Use our channels to communicate with other fellows to combine and create new projects!
Which programming languages should I use?
My friend, here is the best part of liberty!
You can use any language that you want to complete the final project.
The important thing is to internalize the core concepts and to be able to use them with whatever tool (programming language) that you wish.
Pro CS
After completing the requirements of the curriculum above, you will have completed the equivalent of a full bachelor's degree in Computer Science, or quite close to one.
You can stop in the Advanced CS section, but the next step to completing your studies is to develop skills and knowledge in a specific domain.
Many of these courses are graduate-level.
Choose one or more of the following specializations:

Mastering Software Development in R Specialization by Johns Hopkins University
Artificial Intelligence Engineer Nanodegree by IBM, Amazon, and Didi
Machine Learning Engineer Nanodegree by Kaggle
Cybersecurity MicroMasters by the Rochester Institute of Technology
Android Developer Nanodegree by Google

These aren't the only specializations you can choose. Check the following websites for more options:

edX: xSeries
Coursera: Specializations
Udacity: Nanodegree

Where to go next?

Look for a job as a developer!
Check out the readings for classic books you can read that will sharpen your skills and expand your knowledge.
Join a local developer meetup (e.g. via meetup.com).
Pay attention to emerging technologies in the world of software development:

Explore the actor model through Elixir, a new functional programming language for the web based on the battle-tested Erlang Virtual Machine!
Explore borrowing and lifetimes through Rust, a systems language which achieves memory- and thread-safety without a garbage collector!
Explore dependent type systems through Idris, a new Haskell-inspired language with unprecedented support for type-driven development.




Code of conduct
OSSU's code of conduct.
Community

Subscribe to our newsletter.
Use our forum if you need some help.
You can also interact through GitHub issues.
We also have a chat room! 
Add Open Source Society University to your Linkedin profile!


PS: A forum is an ideal way to interact with other students as we do not lose important discussions, which usually occur in communication via chat apps.
Please use our forum for important discussions.

How to show your progress

Create an account in Trello.
Copy this board to your personal account.
See how to copy a board here.

Now that you have a copy of our official board, you just need to pass the cards to the Doing column or Done column as you progress in your study.
We also have labels to help you have more control through the process.
The meaning of each of these labels is:

Main Curriculum: cards with that label represent courses that are listed in our curriculum.
Extra Resources: cards with that label represent courses that were added by the student.
Doing: cards with that label represent courses the student is current doing.
Done: cards with that label represent courses finished by the student.
Those cards should also have the link for at least one project/article built with the knowledge acquired in such course.
Section: cards with that label represent the section that we have in our curriculum.
Those cards with the Section label are only to help the organization of the Done column.
You should put the Course's cards below its respective Section's card.

The intention of this board is to provide our students a way to track their progress, and also the ability to show their progress through a public page for friends, family, employers, etc.
You can change the status of your board to be public or private.
Team

Eric Douglas: founder of OSSU and co-maintainer of all its curricula
hanjiexi: lead technical maintainer
waciumawanjohi: lead academic maintainer
Contributors

References

Google - Guide for Technical Development
Coursera
edX
Udacity
Stanford University
Carnegie Mellon University: Computer Science Major Requirements
MIT Open Courseware
Teach Yourself Computer Science
Obtaining a Thorough CS Background Online


"
54,"





































webpack

    webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.
  

Table of Contents

Install
Introduction
Concepts
Contributing
Support
Core Team
Sponsoring
Premium Partners
Other Backers and Sponsors
Gold Sponsors
Silver Sponsors
Bronze Sponsors
Backers
Special Thanks

Install
Install with npm:
npm install --save-dev webpack
Install with yarn:
yarn add webpack --dev
Introduction
webpack is a bundler for modules. The main purpose is to bundle JavaScript
files for usage in a browser, yet it is also capable of transforming, bundling,
or packaging just about any resource or asset.
TL;DR

Bundles ES Modules, CommonJS, and AMD modules (even combined).
Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time).
Dependencies are resolved during compilation, reducing the runtime size.
Loaders can preprocess files while compiling, e.g. TypeScript to JavaScript, Handlebars strings to compiled functions, images to Base64, etc.
Highly modular plugin system to do whatever else your application requires.

Get Started
Check out webpack's quick Get Started guide and the other guides.
Browser Compatibility
webpack supports all browsers that are ES5-compliant (IE8 and below are not supported).
webpack also needs Promise for import() and require.ensure(). If you want to support older browsers, you will need to load a polyfill before using these expressions.
Concepts
Plugins
webpack has a rich plugin
interface. Most of the features
within webpack itself use this plugin interface. This makes webpack very
flexible.



Name
Status
Install Size
Description




mini-css-extract-plugin


Extracts CSS into separate files. It creates a CSS file per JS file which contains CSS.


compression-webpack-plugin


Prepares compressed versions of assets to serve them with Content-Encoding


i18n-webpack-plugin


Adds i18n support to your bundles


html-webpack-plugin


Simplifies creation of HTML files (index.html) to serve your bundles


extract-text-webpack-plugin


Extract text from a bundle, or bundles, into a separate file



Loaders
webpack enables the use of loaders to preprocess files. This allows you to bundle
any static resource way beyond JavaScript. You can easily write your own
loaders using Node.js.
Loaders are activated by using loadername! prefixes in require() statements,
or are automatically applied via regex from your webpack configuration.
Files



Name
Status
Install Size
Description




raw-loader


Loads raw content of a file (utf-8)


val-loader


Executes code as module and considers exports as JS code


url-loader


Works like the file loader, but can return a Data Url if the file is smaller than a limit


file-loader


Emits the file into the output folder and returns the (relative) url



JSON



Name
Status
Install Size
Description







Loads a JSON file (included by default)





Loads and transpiles a JSON 5 file





Loads and transpiles a CSON file



Transpiling



Name
Status
Install Size
Description




<script>


Executes a JavaScript file once in global context (like in script tag), require()s are not parsed





Loads ES2015+ code and transpiles to ES5 using Babel





Loads ES2015+ code and transpiles to ES5 using Traceur





Loads TypeScript like JavaScript


awesome-typescript-loader


Awesome TypeScript loader for webpack





Loads CoffeeScript like JavaScript



Templating



Name
Status
Install Size
Description







Exports HTML as string, requires references to static resources





Loads Pug templates and returns a function





Compiles Markdown to HTML





Loads and transforms a HTML file using PostHTML





Compiles Handlebars to HTML



Styling



Name
Status
Install Size
Description




<style>


Add exports of a module as style to DOM





Loads CSS file with resolved imports and returns CSS code





Loads and compiles a LESS file





Loads and compiles a Sass/SCSS file





Loads and compiles a Stylus file





Loads and transforms a CSS/SSS file using PostCSS



Linting & Testing



Name
Status
Install Size
Description







Tests with mocha (Browser/NodeJS)





PreLoader for linting code using ESLint





PreLoader for linting code using JSHint



Frameworks



Name
Status
Install Size
Description







Loads and compiles Vue Components





Process HTML & CSS with preprocessor of choice and require() Web Components like first-class modules





Loads and compiles Angular 2 Components





Riot official webpack loader



Performance
webpack uses async I/O and has multiple caching levels. This makes webpack fast
and incredibly fast on incremental compilations.
Module Formats
webpack supports ES2015+, CommonJS and AMD modules out of the box. It performs clever static
analysis on the AST of your code. It even has an evaluation engine to evaluate
simple expressions. This allows you to support most existing libraries out of the box.
Code Splitting
webpack allows you to split your codebase into multiple chunks. Chunks are
loaded asynchronously at runtime. This reduces the initial loading time.
Optimizations
webpack can do many optimizations to reduce the output size of your
JavaScript by deduplicating frequently used modules, minifying, and giving
you full control of what is loaded initially and what is loaded at runtime
through code splitting. It can also make your code chunks cache
friendly by using hashes.
Contributing
We want contributing to webpack to be fun, enjoyable, and educational for anyone, and everyone. We have a vibrant ecosystem that spans beyond this single repo. We welcome you to check out any of the repositories in our organization or webpack-contrib organization which houses all of our loaders and plugins.
Contributions go far beyond pull requests and commits. Although we love giving you the opportunity to put your stamp on webpack, we also are thrilled to receive a variety of other contributions including:

Documentation updates, enhancements, designs, or bugfixes
Spelling or grammar fixes
README.md corrections or redesigns
Adding unit, or functional tests
Triaging GitHub issues -- especially determining whether an issue still persists or is reproducible.
Searching #webpack on twitter and helping someone else who needs help
Teaching others how to contribute to one of the many webpack's repos!
Blogging, speaking about, or creating tutorials about one of webpack's many features.
Helping others in our webpack gitter channel.

If you are worried or don't know where to start, you can always reach out to Sean Larkin (@TheLarkInn) on Twitter or simply submit an issue and a maintainer can help give you guidance!
We have also started a series on our Medium Publication called The Contributor's Guide to webpack. We welcome you to read it and post any questions or responses if you still need help.
Looking to speak about webpack? We'd love to review your talk abstract/CFP! You can email it to webpack [at] opencollective [dot] com and we can give pointers or tips!!!
Creating your own plugins and loaders
If you create a loader or plugin, we would <3 for you to open source it, and put it on npm. We follow the x-loader, x-webpack-plugin naming convention.
Support
We consider webpack to be a low-level tool used not only individually but also layered beneath other awesome tools. Because of its flexibility, webpack isn't always the easiest entry-level solution, however we do believe it is the most powerful. That said, we're always looking for ways to improve and simplify the tool without compromising functionality. If you have any ideas on ways to accomplish this, we're all ears!
If you're just getting started, take a look at our new docs and concepts page. This has a high level overview that is great for beginners!!
Looking for webpack 1 docs? Please check out the old wiki, but note that this deprecated version is no longer supported.
If you want to discuss something or just need help, here is our Gitter room where there are always individuals looking to help out!
If you are still having difficulty, we would love for you to post
a question to StackOverflow with the webpack tag. It is much easier to answer questions that include your webpack.config.js and relevant files! So if you can provide them, we'd be extremely grateful (and more likely to help you find the answer!)
If you are twitter savvy you can tweet #webpack with your question and someone should be able to reach out and help also.
If you have discovered a 🐜 or have a feature suggestion, feel free to create an issue on Github.
License

Core Team






Tobias Koppers
Core

Founder of webpack




Johannes Ewald
Loaders & Plugins

Early adopter of webpack




Sean T. Larkin
Public Relations

Founder of the core team




Kees Kluskens
Development

Sponsor








Sponsoring
Most of the core team members, webpack contributors and contributors in the ecosystem do this open source work in their free time. If you use webpack for a serious task, and you'd like us to invest more time on it, please donate. This project increases your income/productivity too. It makes development and applications faster and it reduces the required bandwidth.
This is how we use the donations:

Allow the core team to work on webpack
Thank contributors if they invested a large amount of time in contributing
Support projects in the ecosystem that are of great value for users
Support projects that are voted most (work in progress)
Infrastructure cost
Fees for money handling

Premium Partners




Other Backers and Sponsors
Before we started using OpenCollective, donations were made anonymously. Now that we have made the switch, we would like to acknowledge these sponsors (and the ones who continue to donate using OpenCollective). If we've missed someone, please send us a PR, and we'll add you to this list.

Google Angular Team, Architects.io,



Gold Sponsors
Become a gold sponsor and get your logo on our README on Github with a link to your site.
































Silver Sponsors
Become a silver sponsor and get your logo on our README on Github with a link to your site.
































Bronze Sponsors
Become a bronze sponsor and get your logo on our README on Github with a link to your site.







































































































Backers
Become a backer and get your image on our README on Github with a link to your site.





































































































Special Thanks to
(In chronological order)

@google for Google Web Toolkit (GWT), which aims to compile Java to JavaScript. It features a similar Code Splitting as webpack.
@medikoo for modules-webmake, which is a similar project. webpack was born because I wanted Code Splitting for modules-webmake. Interestingly the Code Splitting issue is still open (thanks also to @Phoscur for the discussion).
@substack for browserify, which is a similar project and source for many ideas.
@jrburke for require.js, which is a similar project and source for many ideas.
@defunctzombie for the browser-field spec, which makes modules available for node.js, browserify and webpack.
Every early webpack user, which contributed to webpack by writing issues or PRs. You influenced the direction...
@shama, @jhnns and @sokra for maintaining this project
Everyone who has written a loader for webpack. You are the ecosystem...
Everyone I forgot to mention here, but also influenced webpack.


"
55,"

Redux is a predictable state container for JavaScript apps.
(Not to be confused with a WordPress framework – Redux Framework.)
It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger.
You can use Redux together with React, or with any other view library.
It is tiny (2kB, including dependencies).

Note: We are currently planning a rewrite of the Redux docs. Please take some time to fill out this survey on what content is most important in a docs site. Thanks!






Learn Redux
We have a variety of resources available to help you learn Redux, no matter what your background or learning style is.
Just the Basics
If you're brand new to Redux and want to understand the basic concepts, see:

The Motivation behind building Redux, the Core Concepts, and the Three Principles.
The basic tutorial in the Redux docs
Redux creator Dan Abramov's free ""Getting Started with Redux"" video series on Egghead.io
Redux co-maintainer Mark Erikson's ""Redux Fundamentals"" slideshow and list of suggested resources for learning Redux
If you learn best by looking at code and playing with it, check out our list of Redux example applications, available as separate projects in the Redux repo, and also as interactive online examples on CodeSandbox.
The Redux Tutorials section of the React/Redux links list. Here's a top list of our recommended tutorials:

Dave Ceddia's posts What Does Redux Do? (and when should you use it?) and How Redux Works: A Counter-Example are a great intro to the basics of Redux and how to use it with React, as is this post on React and Redux: An Introduction.
Valentino Gagliardi's post React Redux Tutorial for Beginners: Learning Redux in 2018 is an excellent extended introduction to many aspects of using Redux.
The CSS Tricks article Leveling Up with React: Redux covers the Redux basics well.
This DevGuides: Introduction to Redux tutorial covers several aspects of Redux, including actions, reducers, usage with React, and middleware.



Intermediate Concepts
Once you've picked up the basics of working with actions, reducers, and the store, you may have questions about topics like working with asynchronous logic and AJAX requests, connecting a UI framework like React to your Redux store, and setting up an application to use Redux:

The ""Advanced"" docs section covers working with async logic, middleware, routing.
The Redux docs ""Learning Resources"" page points to recommended articles on a variety of Redux-related topics.
Sophie DeBenedetto's 8-part Building a Simple CRUD App with React + Redux series shows how to put together a basic CRUD app from scratch.

Real-World Usage
Going from a TodoMVC app to a real production application can be a big jump, but we've got plenty of resources to help:

Redux creator Dan Abramov's free ""Building React Applications with Idiomatic Redux"" video series builds on his first video series and covers topics like middleware, routing, and persistence.
The Redux FAQ answers many common questions about how to use Redux, and the ""Recipes"" docs section has information on handling derived data, testing, structuring reducer logic, and reducing boilerplate.
Redux co-maintainer Mark Erikson's ""Practical Redux"" tutorial series demonstrates real-world intermediate and advanced techniques for working with React and Redux (also available as an interactive course on Educative.io).
The React/Redux links list has categorized articles on working with reducers and selectors, managing side effects, Redux architecture and best practices, and more.
Our community has created thousands of Redux-related libraries, addons, and tools. The ""Ecosystem"" docs page lists our recommendations, and there's a complete listing available in the Redux addons catalog.
If you're looking to learn from actual application codebases, the addons catalog also has a list of purpose-built examples and real-world applications.

Finally, Mark Erikson is teaching a series of Redux workshops through Workshop.me. Check the workshop schedule for upcoming dates and locations.
Help and Discussion
The #redux channel of the Reactiflux Discord community is our official resource for all questions related to learning and using Redux. Reactiflux is a great place to hang out, ask questions, and learn - come join us!
Before Proceeding Further
Redux is a valuable tool for organizing your state, but you should also consider whether it's appropriate for your situation. Don't use Redux just because someone said you should - take some time to understand the potential benefits and tradeoffs of using it.
Here are some suggestions on when it makes sense to use Redux:

You have reasonable amounts of data changing over time
You need a single source of truth for your state
You find that keeping all your state in a top-level component is no longer sufficient

Yes, these guidelines are subjective and vague, but this is for good reason. The point at which you should integrate Redux into your application is different for every user and different for every application.

For more thoughts on how Redux is meant to be used, see:

You Might Not Need Redux
The Tao of Redux, Part 1 - Implementation and Intent
The Tao of Redux, Part 2 - Practice and Philosophy
Redux FAQ


Developer Experience
Dan Abramov (author of Redux) wrote Redux while working on his React Europe talk called “Hot Reloading with Time Travel”. His goal was to create a state management library with a minimal API but completely predictable behavior. Redux makes it possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer.
Influences
Redux evolves the ideas of Flux, but avoids its complexity by taking cues from Elm.
Even if you haven't used Flux or Elm, Redux only takes a few minutes to get started with.
Installation
To install the stable version:
npm install --save redux
This assumes you are using npm as your package manager.
If you're not, you can access these files on unpkg, download them, or point your package manager to them.
Most commonly, people consume Redux as a collection of CommonJS modules. These modules are what you get when you import redux in a Webpack, Browserify, or a Node environment. If you like to live on the edge and use Rollup, we support that as well.
If you don't use a module bundler, it's also fine. The redux npm package includes precompiled production and development UMD builds in the dist folder. They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. For example, you can drop a UMD build as a <script> tag on the page, or tell Bower to install it. The UMD builds make Redux available as a window.Redux global variable.
The Redux source code is written in ES2015 but we precompile both CommonJS and UMD builds to ES5 so they work in any modern browser. You don't need to use Babel or a module bundler to get started with Redux. You can even use the ES module build that's available at es/redux.mjs which can be referenced using type=""module"" in your script tag or as a standard import.
Complementary Packages
Most likely, you'll also need the React bindings and the developer tools.
npm install --save react-redux
npm install --save-dev redux-devtools
Note that unlike Redux itself, many packages in the Redux ecosystem don't provide UMD builds, so we recommend using CommonJS module bundlers like Webpack and Browserify for the most comfortable development experience.
The Gist
The whole state of your app is stored in an object tree inside a single store.
The only way to change the state tree is to emit an action, an object describing what happened.
To specify how the actions transform the state tree, you write pure reducers.
That's it!
import { createStore } from 'redux'

/**
 * This is a reducer, a pure function with (state, action) => state signature.
 * It describes how an action transforms the state into the next state.
 *
 * The shape of the state is up to you: it can be a primitive, an array, an object,
 * or even an Immutable.js data structure. The only important part is that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * In this example, we use a `switch` statement and strings, but you can use a helper that
 * follows a different convention (such as function maps) if it makes sense for your
 * project.
 */
function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counter)

// You can use subscribe() to update the UI in response to state changes.
// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.
// However it can also be handy to persist the current state in the localStorage.

store.subscribe(() => console.log(store.getState()))

// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'INCREMENT' })
// 1
store.dispatch({ type: 'INCREMENT' })
// 2
store.dispatch({ type: 'DECREMENT' })
// 1
Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called actions. Then you write a special function called a reducer to decide how every action transforms the entire application's state.
If you're coming from Flux, there is a single important difference you need to understand. Redux doesn't have a Dispatcher or support many stores. Instead, there is just a single store with a single root reducing function. As your app grows, instead of adding stores, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components.
This architecture might seem like an overkill for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action.
Learn Redux from Its Authors
Redux Video Tutorials by Dan Abramov
Getting Started with Redux
Getting Started with Redux is a video course consisting of 30 videos narrated by Dan Abramov, author of Redux. It is designed to complement the “Basics” part of the docs while bringing additional insights about immutability, testing, Redux best practices, and using Redux with React. This course is free and will always be.

“Great course on egghead.io by @dan_abramov - instead of just showing you how to use #redux, it also shows how and why redux was built!”
Sandrino Di Mattia


“Plowing through @dan_abramov 'Getting Started with Redux' - its amazing how much simpler concepts get with video.”
Chris Dhanaraj


“This video series on Redux by @dan_abramov on @eggheadio is spectacular!”
Eddie Zaneski


“Come for the name hype. Stay for the rock solid fundamentals. (Thanks, and great job @dan_abramov and @eggheadio!)”
Dan


“This series of videos on Redux by @dan_abramov is repeatedly blowing my mind - gunna do some serious refactoring”
Laurence Roberts

So, what are you waiting for?
Watch the free ""Getting Started with Redux"" video series

Note: If you enjoyed Dan's course, consider supporting Egghead by buying a subscription. Subscribers have access to the source code of every example in my videos and tons of advanced lessons on other topics, including JavaScript in depth, React, Angular, and more. Many Egghead instructors are also open source library authors, so buying a subscription is a nice way to thank them for the work that they've done.

Building React Applications with Idiomatic Redux
The Building React Applications with Idiomatic Redux course is a second free video series by Dan Abramov. It picks up where the first series left off, and covers practical production ready techniques for building your React and Redux applications: advanced state management, middleware, React Router integration, and other common problems you are likely to encounter while building applications for your clients and customers. As with the first series, this course will always be free.
Watch the free ""Idiomatic Redux"" video series
Practical Redux course
Practical Redux is a paid interactive course by Redux co-maintainer Mark Erikson. The course is designed to show how to apply the basic concepts of Redux to building something larger than a TodoMVC application. It includes real-world topics like:

Adding Redux to a new Create-React-App project and configuring Hot Module Replacement for faster development
Controlling your UI behavior with Redux
Using the Redux-ORM library to manage relational data in your Redux store
Building a master/detail view to display and edit data
Writing custom advanced Redux reducer logic to solve specific problems
Optimizing performance of Redux-connected form inputs

And much more!
The course is based on Mark's original free ""Practical Redux"" blog tutorial series, but with updated and improved content.
Redux Fundamentals Workshop
Redux co-maintainer Mark Erikson has put together a Redux Fundamentals workshop, and slides are available here. They cover:

The history and purpose of Redux
Reducers and actions, and working with a Redux store
Using Redux with React
Using and writing Redux middleware
Working with AJAX calls and other side effects
Unit testing Redux apps
Real-world Redux app structure and development

Documentation

Introduction
Basics
Advanced
Recipes
FAQ
Troubleshooting
Glossary
API Reference

For PDF, ePub, and MOBI exports for offline reading, and instructions on how to create them, please see: paulkogel/redux-offline-docs.
For Offline docs, please see: devdocs
Examples
Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online.

Counter Vanilla: Source
Counter: Source | Sandbox
Todos: Source | Sandbox
Todos with Undo: Source | Sandbox
Todos w/ Flow: Source
TodoMVC: Source | Sandbox
Shopping Cart: Source | Sandbox
Tree View: Source | Sandbox
Async: Source | Sandbox
Universal: Source
Real World: Source | Sandbox

If you're new to the NPM ecosystem and have troubles getting a project up and running, or aren't sure where to paste the gist above, check out simplest-redux-example that uses Redux together with React and Browserify.
Testimonials

“Love what you're doing with Redux”
Jing Chen, creator of Flux


“I asked for comments on Redux in FB's internal JS discussion group, and it was universally praised. Really awesome work.”
Bill Fisher, author of Flux documentation


“It's cool that you are inventing a better Flux by not doing Flux at all.”
André Staltz, creator of Cycle

Thanks

The Elm Architecture for a great intro to modeling state updates with reducers;
Turning the database inside-out for blowing my mind;
Developing ClojureScript with Figwheel for convincing me that re-evaluation should “just work”;
Webpack for Hot Module Replacement;
Flummox for teaching me to approach Flux without boilerplate or singletons;
disto for a proof of concept of hot reloadable Stores;
NuclearJS for proving this architecture can be performant;
Om for popularizing the idea of a single state atom;
Cycle for showing how often a function is the best tool;
React for the pragmatic innovation.

Special thanks to Jamie Paton for handing over the redux NPM package name.
Logo
You can find the official logo on GitHub.
Change Log
This project adheres to Semantic Versioning.
Every release, along with the migration instructions, is documented on the GitHub Releases page.
Patrons
The work on Redux was funded by the community.
Meet some of the outstanding companies that made it possible:

Webflow
Ximedes

See the full list of Redux patrons, as well as the always-growing list of people and companies that use Redux.
License
MIT

"
56,"
The Fuck     
The Fuck is a magnificent app, inspired by a @liamosaur
tweet,
that corrects errors in previous console commands.
Is The Fuck too slow? Try the experimental instant mode!

More examples:
➜ apt-get install vim
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?

➜ fuck
sudo apt-get install vim [enter/↑/↓/ctrl+c]
[sudo] password for nvbn:
Reading package lists... Done
...
➜ git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master


➜ fuck
git push --set-upstream origin master [enter/↑/↓/ctrl+c]
Counting objects: 9, done.
...
➜ puthon
No command 'puthon' found, did you mean:
 Command 'python' from package 'python-minimal' (main)
 Command 'python' from package 'python3' (main)
zsh: command not found: puthon

➜ fuck
python [enter/↑/↓/ctrl+c]
Python 3.4.2 (default, Oct  8 2014, 13:08:17)
...
➜ git brnch
git: 'brnch' is not a git command. See 'git --help'.

Did you mean this?
    branch

➜ fuck
git branch [enter/↑/↓/ctrl+c]
* master
➜ lein rpl
'rpl' is not a task. See 'lein help'.

Did you mean this?
         repl

➜ fuck
lein repl [enter/↑/↓/ctrl+c]
nREPL server started on port 54848 on host 127.0.0.1 - nrepl://127.0.0.1:54848
REPL-y 0.3.1
...
If you're not afraid of blindly running corrected commands, the
require_confirmation settings option can be disabled:
➜ apt-get install vim
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?

➜ fuck
sudo apt-get install vim
[sudo] password for nvbn:
Reading package lists... Done
...
Requirements

python (3.4+)
pip
python-dev

Installation
On OS X, you can install The Fuck via Homebrew (or via Linuxbrew on Linux):
brew install thefuck
On Ubuntu / Mint, install The Fuck with the following commands:
sudo apt update
sudo apt install python3-dev python3-pip python3-setuptools
sudo pip3 install thefuck
On FreeBSD, install The Fuck with the following commands:
pkg install thefuck
On ChromeOS, install The Fuck using chromebrew with the following command:
crew install thefuck
On other systems, install The Fuck  by using pip:
pip install thefuck
Alternatively, you may use an OS package manager (OS X, Ubuntu, Arch).
#
It is recommended that you place this command in your .bash_profile,
.bashrc, .zshrc or other startup script:
eval $(thefuck --alias)
# You can use whatever you want as an alias, like for Mondays:
eval $(thefuck --alias FUCK)
Or in your shell config (Bash, Zsh, Fish, Powershell, tcsh).
Changes are only available in a new shell session. To make changes immediately
available, run source ~/.bashrc (or your shell config file like .zshrc).
To run fixed commands without confirmation, use the --yeah option (or just -y for short, or --hard if you're especially frustrated):
fuck --yeah
To fix commands recursively until succeeding, use the -r option:
fuck -r
Updating
pip3 install thefuck --upgrade
Note: Alias functionality was changed in v1.34 of The Fuck
How it works
The Fuck attempts to match the previous command with a rule. If a match is
found, a new command is created using the matched rule and executed. The
following rules are enabled by default:

adb_unknown_command – fixes misspelled commands like adb logcta;
ag_literal – adds -Q to ag when suggested;
aws_cli – fixes misspelled commands like aws dynamdb scan;
az_cli – fixes misspelled commands like az providers;
cargo – runs cargo build instead of cargo;
cargo_no_command – fixes wrongs commands like cargo buid;
cat_dir – replaces cat with ls when you try to cat a directory;
cd_correction – spellchecks and correct failed cd commands;
cd_mkdir – creates directories before cd'ing into them;
cd_parent – changes cd.. to cd ..;
chmod_x – add execution bit;
choco_install – append common suffixes for chocolatey packages;
composer_not_command – fixes composer command name;
cp_omitting_directory – adds -a when you cp directory;
cpp11 – adds missing -std=c++11 to g++ or clang++;
dirty_untar – fixes tar x command that untarred in the current directory;
dirty_unzip – fixes unzip command that unzipped in the current directory;
django_south_ghost – adds --delete-ghost-migrations to failed because ghosts django south migration;
django_south_merge – adds --merge to inconsistent django south migration;
docker_login – executes a docker login and repeats the previous command;
docker_not_command – fixes wrong docker commands like docker tags;
docker_image_being_used_by_container ‐ removes the container that is using the image before removing the image;
dry – fixes repetitions like git git push;
fab_command_not_found – fix misspelled fabric commands;
fix_alt_space – replaces Alt+Space with Space character;
fix_file – opens a file with an error in your $EDITOR;
gem_unknown_command – fixes wrong gem commands;
git_add – fixes ""pathspec 'foo' did not match any file(s) known to git."";
git_add_force – adds --force to git add <pathspec>... when paths are .gitignore'd;
git_bisect_usage – fixes git bisect strt, git bisect goood, git bisect rset, etc. when bisecting;
git_branch_delete – changes git branch -d to git branch -D;
git_branch_delete_checked_out – changes git branch -d to git checkout master && git branch -D when trying to delete a checked out branch;
git_branch_exists – offers git branch -d foo, git branch -D foo or git checkout foo when creating a branch that already exists;
git_branch_list – catches git branch list in place of git branch and removes created branch;
git_checkout – fixes branch name or creates new branch;
git_commit_amend – offers git commit --amend after previous commit;
git_commit_reset – offers git reset HEAD~ after previous commit;
git_diff_no_index – adds --no-index to previous git diff on untracked files;
git_diff_staged – adds --staged to previous git diff with unexpected output;
git_fix_stash – fixes git stash commands (misspelled subcommand and missing save);
git_flag_after_filename – fixes fatal: bad flag '...' after filename
git_help_aliased – fixes git help <alias> commands replacing  with the aliased command;
git_merge – adds remote to branch names;
git_merge_unrelated – adds --allow-unrelated-histories when required
git_not_command – fixes wrong git commands like git brnch;
git_pull – sets upstream before executing previous git pull;
git_pull_clone – clones instead of pulling when the repo does not exist;
git_pull_uncommitted_changes – stashes changes before pulling and pops them afterwards;
git_push – adds --set-upstream origin $branch to previous failed git push;
git_push_different_branch_names – fixes pushes when local brach name does not match remote branch name;
git_push_pull – runs git pull when push was rejected;
git_push_without_commits – Creates an initial commit if you forget and only git add ., when setting up a new project;
git_rebase_no_changes – runs git rebase --skip instead of git rebase --continue when there are no changes;
git_remote_delete – replaces git remote delete remote_name with git remote remove remote_name;
git_rm_local_modifications –  adds -f or --cached when you try to rm a locally modified file;
git_rm_recursive – adds -r when you try to rm a directory;
git_rm_staged –  adds -f or --cached when you try to rm a file with staged changes
git_rebase_merge_dir – offers git rebase (--continue | --abort | --skip) or removing the .git/rebase-merge dir when a rebase is in progress;
git_remote_seturl_add – runs git remote add when git remote set_url on nonexistent remote;
git_stash – stashes your local modifications before rebasing or switching branch;
git_stash_pop – adds your local modifications before popping stash, then resets;
git_tag_force – adds --force to git tag <tagname> when the tag already exists;
git_two_dashes – adds a missing dash to commands like git commit -amend or git rebase -continue;
go_run – appends .go extension when compiling/running Go programs;
go_unknown_command – fixes wrong go commands, for example go bulid;
gradle_no_task – fixes not found or ambiguous gradle task;
gradle_wrapper – replaces gradle with ./gradlew;
grep_arguments_order – fixes grep arguments order for situations like grep -lir . test;
grep_recursive – adds -r when you try to grep directory;
grunt_task_not_found – fixes misspelled grunt commands;
gulp_not_task – fixes misspelled gulp tasks;
has_exists_script – prepends ./ when script/binary exists;
heroku_multiple_apps – add --app <app> to heroku commands like heroku pg;
heroku_not_command – fixes wrong heroku commands like heroku log;
history – tries to replace command with most similar command from history;
hostscli – tries to fix hostscli usage;
ifconfig_device_not_found – fixes wrong device names like wlan0 to wlp2s0;
java – removes .java extension when running Java programs;
javac – appends missing .java when compiling Java files;
lein_not_task – fixes wrong lein tasks like lein rpl;
long_form_help – changes -h to --help when the short form version is not supported
ln_no_hard_link – catches hard link creation on directories, suggest symbolic link;
ln_s_order – fixes ln -s arguments order;
ls_all – adds -A to ls when output is empty;
ls_lah – adds -lah to ls;
man – changes manual section;
man_no_space – fixes man commands without spaces, for example mandiff;
mercurial – fixes wrong hg commands;
missing_space_before_subcommand – fixes command with missing space like npminstall;
mkdir_p – adds -p when you try to create a directory without parent;
mvn_no_command – adds clean package to mvn;
mvn_unknown_lifecycle_phase – fixes misspelled life cycle phases with mvn;
npm_missing_script – fixes npm custom script name in npm run-script <script>;
npm_run_script – adds missing run-script for custom npm scripts;
npm_wrong_command – fixes wrong npm commands like npm urgrade;
no_command – fixes wrong console commands, for example vom/vim;
no_such_file – creates missing directories with mv and cp commands;
open – either prepends http:// to address passed to open or create a new file or directory and passes it to open;
pip_install – fixes permission issues with pip install commands by adding --user or prepending sudo if necessary;
pip_unknown_command – fixes wrong pip commands, for example pip instatl/pip install;
php_s – replaces -s by -S when trying to run a local php server;
port_already_in_use – kills process that bound port;
prove_recursively – adds -r when called with directory;
pyenv_no_such_command – fixes wrong pyenv commands like pyenv isntall or pyenv list;
python_command – prepends python when you try to run non-executable/without ./ python script;
python_execute – appends missing .py when executing Python files;
quotation_marks – fixes uneven usage of ' and "" when containing args';
path_from_history – replaces not found path with similar absolute path from history;
react_native_command_unrecognized – fixes unrecognized react-native commands;
remove_shell_prompt_literal – remove leading shell prompt symbol $, common when copying commands from documentations;
remove_trailing_cedilla – remove trailing cedillas ç, a common typo for european keyboard layouts;
rm_dir – adds -rf when you try to remove a directory;
scm_correction – corrects wrong scm like hg log to git log;
sed_unterminated_s – adds missing '/' to sed's s commands;
sl_ls – changes sl to ls;
ssh_known_hosts – removes host from known_hosts on warning;
sudo – prepends sudo to previous command if it failed because of permissions;
sudo_command_from_user_path – runs commands from users $PATH with sudo;
switch_lang – switches command from your local layout to en;
systemctl – correctly orders parameters of confusing systemctl;
terraform_init.py – run terraform init before plan or apply;
test.py – runs py.test instead of test.py;
touch – creates missing directories before ""touching"";
tsuru_login – runs tsuru login if not authenticated or session expired;
tsuru_not_command – fixes wrong tsuru commands like tsuru shell;
tmux – fixes tmux commands;
unknown_command – fixes hadoop hdfs-style ""unknown command"", for example adds missing '-' to the command on hdfs dfs ls;
unsudo – removes sudo from previous command if a process refuses to run on super user privilege.
vagrant_up – starts up the vagrant instance;
whois – fixes whois command;
workon_doesnt_exists – fixes virtualenvwrapper env name os suggests to create new.
yarn_alias – fixes aliased yarn commands like yarn ls;
yarn_command_not_found – fixes misspelled yarn commands;
yarn_command_replaced – fixes replaced yarn commands;
yarn_help – makes it easier to open yarn documentation;

The following rules are enabled by default on specific platforms only:

apt_get – installs app from apt if it not installed (requires python-commandnotfound / python3-commandnotfound);
apt_get_search – changes trying to search using apt-get with searching using apt-cache;
apt_invalid_operation – fixes invalid apt and apt-get calls, like apt-get isntall vim;
apt_list_upgradable – helps you run apt list --upgradable after apt update;
apt_upgrade – helps you run apt upgrade after apt list --upgradable;
brew_cask_dependency – installs cask dependencies;
brew_install – fixes formula name for brew install;
brew_reinstall – turns brew install <formula> into brew reinstall <formula>;
brew_link – adds --overwrite --dry-run if linking fails;
brew_uninstall – adds --force to brew uninstall if multiple versions were installed;
brew_unknown_command – fixes wrong brew commands, for example brew docto/brew doctor;
brew_update_formula – turns brew update <formula> into brew upgrade <formula>;
dnf_no_such_command – fixes mistyped DNF commands;
nixos_cmd_not_found – installs apps on NixOS;
pacman – installs app with pacman if it is not installed (uses yay or yaourt if available);
pacman_not_found – fixes package name with pacman, yay or yaourt.
yum_invalid_operation – fixes invalid yum calls, like yum isntall vim;

The following commands are bundled with The Fuck, but are not enabled by
default:

git_push_force – adds --force-with-lease to a git push (may conflict with git_push_pull);
rm_root – adds --no-preserve-root to rm -rf / command.

Creating your own rules
To add your own rule, create a file named your-rule-name.py
in ~/.config/thefuck/rules. The rule file must contain two functions:
match(command: Command) -> bool
get_new_command(command: Command) -> str | list[str]
Additionally, rules can contain optional functions:
side_effect(old_command: Command, fixed_command: str) -> None
Rules can also contain the optional variables enabled_by_default, requires_output and priority.
Command has three attributes: script, output and script_parts.
Your rule should not change Command.
Rules api changed in 3.0: To access a rule's settings, import it with
from thefuck.conf import settings
settings is a special object assembled from ~/.config/thefuck/settings.py,
and values from env (see more below).
A simple example rule for running a script with sudo:
def match(command):
    return ('permission denied' in command.output.lower()
            or 'EACCES' in command.output)


def get_new_command(command):
    return 'sudo {}'.format(command.script)

# Optional:
enabled_by_default = True

def side_effect(command, fixed_command):
    subprocess.call('chmod 777 .', shell=True)

priority = 1000  # Lower first, default is 1000

requires_output = True
More examples of rules,
utility functions for rules,
app/os-specific helpers.
Settings
Several The Fuck parameters can be changed in the file $XDG_CONFIG_HOME/thefuck/settings.py
($XDG_CONFIG_HOME defaults to ~/.config):

rules – list of enabled rules, by default thefuck.const.DEFAULT_RULES;
exclude_rules – list of disabled rules, by default [];
require_confirmation – requires confirmation before running new command, by default True;
wait_command – max amount of time in seconds for getting previous command output;
no_colors – disable colored output;
priority – dict with rules priorities, rule with lower priority will be matched first;
debug – enables debug output, by default False;
history_limit – numeric value of how many history commands will be scanned, like 2000;
alter_history – push fixed command to history, by default True;
wait_slow_command – max amount of time in seconds for getting previous command output if it in slow_commands list;
slow_commands – list of slow commands;
num_close_matches – maximum number of close matches to suggest, by default 3.

An example of settings.py:
rules = ['sudo', 'no_command']
exclude_rules = ['git_push']
require_confirmation = True
wait_command = 10
no_colors = False
priority = {'sudo': 100, 'no_command': 9999}
debug = False
history_limit = 9999
wait_slow_command = 20
slow_commands = ['react-native', 'gradle']
num_close_matches = 5
Or via environment variables:

THEFUCK_RULES – list of enabled rules, like DEFAULT_RULES:rm_root or sudo:no_command;
THEFUCK_EXCLUDE_RULES – list of disabled rules, like git_pull:git_push;
THEFUCK_REQUIRE_CONFIRMATION – require confirmation before running new command, true/false;
THEFUCK_WAIT_COMMAND – max amount of time in seconds for getting previous command output;
THEFUCK_NO_COLORS – disable colored output, true/false;
THEFUCK_PRIORITY – priority of the rules, like no_command=9999:apt_get=100,
rule with lower priority will be matched first;
THEFUCK_DEBUG – enables debug output, true/false;
THEFUCK_HISTORY_LIMIT – how many history commands will be scanned, like 2000;
THEFUCK_ALTER_HISTORY – push fixed command to history true/false;
THEFUCK_WAIT_SLOW_COMMAND – max amount of time in seconds for getting previous command output if it in slow_commands list;
THEFUCK_SLOW_COMMANDS – list of slow commands, like lein:gradle;
THEFUCK_NUM_CLOSE_MATCHES – maximum number of close matches to suggest, like 5.

For example:
export THEFUCK_RULES='sudo:no_command'
export THEFUCK_EXCLUDE_RULES='git_pull:git_push'
export THEFUCK_REQUIRE_CONFIRMATION='true'
export THEFUCK_WAIT_COMMAND=10
export THEFUCK_NO_COLORS='false'
export THEFUCK_PRIORITY='no_command=9999:apt_get=100'
export THEFUCK_HISTORY_LIMIT='2000'
export THEFUCK_NUM_CLOSE_MATCHES='5'
Third-party packages with rules
If you'd like to make a specific set of non-public rules, but would still like
to share them with others, create a package named thefuck_contrib_* with
the following structure:
thefuck_contrib_foo
  thefuck_contrib_foo
    rules
      __init__.py
      *third-party rules*
    __init__.py
    *third-party-utils*
  setup.py

The Fuck will find rules located in the rules module.
Experimental instant mode
The default behavior of The Fuck requires time to re-run previous commands.
When in instant mode, The Fuck saves time by logging output with script,
then reading the log.

Currently, instant mode only supports Python 3 with bash or zsh. zsh's autocorrect function also needs to be disabled in order for thefuck to work properly.
To enable instant mode, add --enable-experimental-instant-mode
to the alias initialization in .bashrc, .bash_profile or .zshrc.
For example:
eval $(thefuck --alias --enable-experimental-instant-mode)
Developing
See CONTRIBUTING.md
License MIT
Project License can be found here.

"
57,"






Awesome Vue.js 

A curated list of awesome things related to Vue.js


Resources

Official Resources
External Resources
Job Portal
Community
Conferences
Podcasts
Youtube Channels
Official Examples
Tutorials
Examples
Books
Blog Posts


Projects Using Vue.js

Open Source
Commercial Products
Apps/Websites
Interactive Experiences
Enterprise Usage
A11y


Components & Libraries

UI Components


Table


Notification


Loader

Progress Bar



Tooltip


Overlay


Parallax


Icons


Menu


Minus Plus Input


Carousel


Charts


Time


Calendar


Map


Audio / Video


Infinite Scroll


Pull-to-refresh


Markdown


PDF


Tree


Social Sharing


QR Code


Search


Miscellaneous


Tabs


Form

Phone Number Input
Picker
Generator

Date Picker


Select
Slider
Drag and Drop
Autocomplete
Type Select
Color Picker
Switch
Masked Input
Rich Text Editing
Image Manipulation
Video Manipulation
File Upload
Context Menu
Miscellaneous
Wizard
CSV
Comment System



Canvas


Link Preview


Tour



UI Layout
Frameworks

Responsive
Mobile
Component Collections
Admin Template
Server-side rendering
Static website generator
Other


UI Utilities

Event Handling
Responsive Design
Form

Validation


Resize
Scroll
Routing
Lazy Load
Pagination
Animation
Meta Tags
Portal
Filters
SVG
Miscellaneous
WebGL
Fullscreen
Page visibility
Printing


Utilities

Typescript
HTTP Requests
i18n
Custom Events
Persistence
State Management

Redux
Mobx
Authentication/Authorization
Vuex Utilities

Sync Between Tabs




GraphQL
Concurrency Management
Code Style
CSS
Asset Management
Page Navigation
Miscellaneous
Web Workers
JSX
Migration
Web Sockets
Payment
- Stripe
- Paypal
- Plaid


Integrations

Vue CLI 3 Plugins
- Google Analytics
- Yandex Metrika


Dev Tools

Inspect
Docs
Test
- Browser-less require
Source Code Editing

Atom
Sublime Text
Vim
Visual Studio Code
Visual Studio
Brackets
Intellij
Emacs
Kate




Scaffold

Client
Universal
Server
Electron
Parts


Runtime

Command Line / Terminal


Prerendering



Resources
Official Resources

Official Guide
API Reference
GitHub Repo
Release Notes
Style Guide
Vue.js News

External Resources

Vue.js資料まとめ(for japanese) by @hashrock
Vue.js Newsletter - Weekly dose of handpicked Vue.js news
Vue.js Tips - Tips to become a better Vue.js developer
Vue.js Wikipedia
Vue.js Radar - Curated newsletter + site covering new Vue.js releases/contributions.
Vue News - Social website focusing on the latest Vue.js news and information.
Vue Curated Resources - Recommended Vue.js courses and tutorials.
BuiltForVue - NPM Mirror of all Vue.js components and packages.
Vue School - Learn Vue.js from video courses by core members and industry experts
VueDose. Tips & tricks about the Vue ecosystem, for busy devs.
Vuelibs. A minimalistic list of Vue.js libraries and components based on the awesome-vue repo.

Job Portal

Vue.js Jobs - VueJobs - A Vue.js job portal to hire or get hired for all your Vue.js jobs.
Vue.js Interview Questions - A List of 300 VueJS Interview Questions and Answers

Community

Twitter
Official Forum
vue-requests - Request a Vue.js module you wish existed or get ideas for modules
VueJS Iran - Telegram Channel & group (group link available in channel bio)
vueslack - 2300+ registered users worldwide
Vue Land - Discord chat server
VueJS Russia - Telegram Group [Russian]
VueJS Viet Nam - Facebook group
VueJS Spanish - Slack Group
VueJS Korean - Slack Group
VueJS Thailand - Facebook Group
VueJS Brasil - Telegram Group [Portuguese]
VueJS Brasil - Facebook Page [Portuguese]
VueJS Brasil - Facebook Group [Portuguese]
VueJS en español - Facebook Group [Spanish]
VueJS India 🇮🇳  - Discord chat server
VueJS Indonesia - Telegram Group [Indonesian]
VueJS Hong Kong - Facebook group
VueJS Arab - Telegram Group
VueJS Vix - Telegram Group [Portuguese]
VueJS Vix - Meetup Page [Portuguese]
VueJS Norway - Meetup
VueJS Israel 🇮🇱 - Facebook Page
VueJS Finland - Meetup
VueJS Finland - Facebook Page
Hablemos de Vue.js - Telegram Group [Castellano]

Conferences

VueConf
Vue.js London
VueConf US
VueConf Toronto

Podcasts

Full Stack Radio #30 (11-23-2015)
JavaScript Jabber #187 (11-25-2015)
Changelog #184 (11-27-2015)
Software Engineering Daily (12-29-2015)
JavaScript Air 016 (03-30-2016)
Codecasts #2 - Falando Sobre Vuejs e Web Components (2016-08-19) [pt-BR]
Full Stack Radio #50 (09-21-2016)
和 Vue.js 框架的作者聊聊前端框架开发背后的故事 [zh-CN]
MW S04E08 - Vue.js with Evan You and Sarah Drasner (04-27-2017)
Request For Commits #12 - Crowdfunding Open Source (Vue.js) (06-15-2017)
The Web Platform Podcast 132: Vue.js (07-27-2017)
JavaScript Jabber #276 with Maximilian Schwarzmüller (08-29-2017)
Animating VueJS with Sarah Drasner(Software Engineering Daily 01-12-2017)
Views on Vue (weekly podcast on Vue started 03-06-2018)
The Official Vue.js News Podcast
Vue podcast list via The QIT Tech Podcast Indexer
DNE 138 - Vale a pena VueJS? (01-05-2018)
Cynical Developer #99 (10-15-2018)
Syntax #130 (03-27-2019)

Youtube Channels

VueNYC
VueConf EU

Official Examples

Basic Examples
Vue.js TodoMVC
CoffeeScript Version
Vue.js HackerNews Clone
Vue.js 2.0 HackerNews Clone

Tutorials

Vue.js screencasts on Laracasts
Vuejs 2 Authentication Tutorial on Auth0 blog
Create a GitHub File Explorer Using Vue.js on Scotch.io
Vue.js Tutorial on Vegibit
Vue.js build set-up from scratch with webpack, vue-loader and hot reload
Vuex basics: Tutorial and explanation
Vuex introduction video - James Browne from London Vue.js Meetup #1
Vue.js 中文系列视频教程 on Laravist
Develop a Reactive Invoice App using Vue.js on craigmckenna.com
Hybrid App Example with Laravel and Vue.js in Portuguese by @vedovelli
Vue.js Introduction Turkish Language on oguzhan.in
Vue.js VideoTutoral Series in Spanish (3-8-2016) on YouTube by Juan Andrés Núñez
Vue.js Screencast Series in Spanish on Styde.net
讲解Vue.js 官网 中文-含代码、百度云、youtube on bhnddowinf
Exploring Real Time Apps with VueJS, ES2015 and Webpack on Pusher
Vue.js in Bahasa Indonesia on sekolahkoding.com
Vue.js from Scratch Series in Russian on YouTube by .dev
Створення сервісу для зберігання файлів з Flask, RethinkDB та Vue.js, ч. 1 Ukraine
VueJS 2 French tutorial Français par Grafikart
Jayway Vue.js 2 workshop. Build an e-commerce site with vue-router, vuex and vue-resource
How to Create Great VueJS Applications Using Wijmo Controls
讲解Vue.js 2 官网 中文-含代码、百度云、youtube on bhnddowinf
Vue.js Cheatsheet: Server-side Applications, Router, Vuex Store, GraphQL and more by @xpepermint
Medium like Image Loading with Vue.js
How to Use Vuex in a Laravel Spark Project on Metric Loop
How To Set Up Modules in Vuex on Metric Loop
Learn Vue 2: Step By Step on Laracasts
Vue.js 中文教程
Up and Running with the Vue.js 2.0 Framework on SitePoint
How to make API Calls with Vuex on Metric Loop
How to Use Vuex to Build a Feature on Metric Loop
Vue.js 2.0 Fundamentals on YouTube by DevMarketer
Vuex For The Clueless — The Missing Primer On Vue’s Application Data Store
Real-time Grid Component Laravel, Vue.js, Vuex & Socket.io
VueJS 2 - The Complete Guide (incl. Vuex) - Udemy Tutorial
Develop Web Apps with Vue.js on egghead.io
Vue.js 2 - Getting Started
Vue.js 2 & Vuex (Basics)
Türkçe VueJS Eğitim Videoları on YouTube by Fatih Acet
Building a JSON Tree View Component in Vue.js from Scratch in Six Steps on digimondo devblog by Arvid Kahl
Let's Vue! - OpenLecture 2017.01 in Russian on YouTube by Illya Klymov (@xanf)
Bootstrapping your first Vue.js application using vue-cli by @afropolymath
Build vue-hackernews-2.0 from Scratch by @ Detachment
Role Based Authorization for your Vue.js and Nuxt.js Applications Using vue-kindergarten
Complete Vue.js Application Tutorial - Creating a Simple Budgeting App with Vue by @matthiaswh
Vue.js Tutorial: A Prerendered, SEO-Friendly Example
Vue.js Introduction For People Who Know Just Enough jQuery To Get By
Fetching Data from a Third-Party API with Vue.js and Axios
Fun Projects with Vue 2 (Video) by Peter van Meijgaard, Packt. (April 2017)
Vue JS: Simultaneously Running Express and Webpack Dev Server on Medium by Henrik Fogelberg
Vue JS 2 Tutorials on Youtube by The Net Ninja
Add a headless CMS to VueJs in 5 Minutes
vue 架构中的 Watcher
Building Your First App With Vue.js
5 Practical Examples For Learning Vue.js
Migrating from KnockoutJS to VueJS by @jesalg
Create a quiz with Vue.js by @rap2h
Vue.js: Getting Started by @chadcampbell
Vue.js 2 & Firebase - Building Real Time Single Page Web Applications
Vue.js 2 & Vue-Resource - Real-World Application With External API Access
Interactive Vue.js Screencasts For Beginners
Vue.JS ile NASA API'ını Kullanarak Veri Çekme on YouTube by Ali GÖREN
Web development with Vue.js 2 (Video) by Olga Filipova, Packt. (June 2017)
Build a realtime chart with VueJS and Pusher
Intro to Vue, repo for Frontend Masters Course
Vue Guide on CSS-Tricks
Using Typescript in your VueJS app
Vue.js视频系列，免费、入门、实战 on nodelover
Vue.js 预览 on ninghao.net
Vue.js: Development Machine Setup by @chadcampbell
Building a Vue v2 JS app using Vue-router by @mikestreety
Build your own carousel with Vue by @Atom_Hernandez
Unit Testing Vue.js Components with the Official Vue Testing Tools and Jest by @alexjoverm
Creating Vue.js Transitions & Animation: Live Examples by @udyuxdev
Creating Custom Vue.js Plugins
Async in VueJS part 1
Async in VueJS part 2
Using localStorage with Vuex store without a plugin by @mikestreety
Using props for accessing URL parameters within components with Vue Router by @mikestreety
Deploy Vue.js — SSR(Vuetify) on Production with Pm2 and Nginx
Testing Vue Components on laracast
Building a Full Stack Web App with Vue.js and Express.js by @CodyLSeibert
Vue.js 2 Recipes (Video) by Peter van Meijgaard, Packt. (September 2017)
Getting Started with Vue.js on Sabe.io
Building Your First Advanced CRUD Application with Vue 2 (Video) by Peter van Meijgaard, Packt. (July 2017)
프론트엔드 개발자를 위한 Vue.js 입문서
누구나 다루기 쉬운 Vue.js (Video) on Inflearn by Captain Pangyo
Build a Vue.js Blog in 2 hours tops on Snipcart
Getting Started with VueJS 2 by Sachin Bhatnagar @sachinbee on Udemy
Getting Started with Vuex: Managing State in Vue.js on Sabe.io
Vue2 ACL using CASL by Sergii Stotskyi
JavaScript Choice Made Easy - Angular v. React v. Vue (Video) by Daniel Kmak, Packt. (November 2017)
Vuejs 2.5+ Authentication Tutorial using Auth0 on Storyblok blog
GraphCMS beginners guide with Vue on GraphCMS
Vue.js debugging in Chrome and VS Code This recipe shows how to use the Debugger for Chrome extension with VS Code to debug Vue.js applications generated by the Vue CLI.
Getting Started with Vue JS 2 (Video) by Sachin Bhatnagar, Packt. (January 2018)
Building a movie app interface with Vue.js by Hassan Djirdeh, @djirdehh
Let’s Build a Custom Vue.js Router by Hassan Djirdeh, @djirdehh
Getting started with Vue, Webpack 4 & Babel by Bjorn Krols, @KrolsBjorn
How to add Bootstrap 4 to your Vue project by Bjorn Krols, @KrolsBjorn
How to add Semantic UI to your Vue project by Bjorn Krols, @KrolsBjorn
How to add ESLint to your Vue project by Bjorn Krols, @KrolsBjorn
How to make content dynamic via URL query parameters in Vue by Bjorn Krols, @KrolsBjorn
How to enable history mode for AWS S3 hosted Vue applications by Bjorn Krols, @KrolsBjorn
A basic introduction to debugging Vue applications using breakpoints by Bjorn Krols, @KrolsBjorn
Build a Vue.Js E-Commerce App with ButterCMS Headless Backend
MASTER VUE.JS
Build a voting application with Go and Vue.js
Build a collaborative painting app using Vue.js
Build a realtime payment dashboard with Stripe
Build a cryptocurrency tracker using Vue.js
Build a design feedback app using Vue.js
Developing a Single Page App with Flask and Vue.js
Accepting Payments with Stripe, Vue.js, and Flask
API Driven Development With Laravel and VueJS (Free Course) on serversideup.net
Managing State in Vue.js by Hassan Djirdeh, @djirdehh
Real World Projects with Vue.js by Daniel Khalil, Packt. (August 2018)
Heartbeat (Vue + NW.js Video series) by @ackzell (2017 - 2018)
Firebase Server-Side Render Vue Apps with Nuxt.js (Server-side Rendering with JavaScript Frameworks)
Firebase Measuring Vue SSR Performance with Nuxt.js (Server-side Rendering with JavaScript Frameworks)
Creating an interactive map with D3 and Vue (October 2018)
The guide to write universal, SSR-ready Vue components
Vue.js Fundamentals by Vue School
Vuex for Everyone by Vue School
Vue.js Form Validation by Vue School
The Vue.js Master Class by Vue School
Vue.js Firebase Realtime Database by Vue School
Vue.js Firebase Authentication by Vue School
Dynamic Forms with Vue.js by Vue School
Custom Vue.js Directives by Vue School
Vue.js Application Development Essentials by Bartłomiej Potaczek, Packt. (October 2018)
Troubleshooting Vue.js by Christian Hur, Packt. (October 2018)
Nuxt.js - Vue.js on Steroids by Maximilian Schwarzmüller, Packt. (October 2018)
Building an Electron File Explorer with Quasar (and Vue) by @hawkeye64. (November 2018)
Build Web Apps with Vue JS 2 & Firebase on Udemy by the Net Ninja
Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex) on Udemy by Maximilian Schwarzmüller
SPA Application using Vue.js, Vuex, Vuetify, and Firebase (Part 1) by Jennifer Bland @ratracegrad. (November 2018)
SPA Application using Vue.js, Vuex, Vuetify, and Firebase (Part 2) by Jennifer Bland @ratracegrad. (November 2018)
SPA Application using Vue.js, Vuex, Vuetify, and Firebase (Part 3) by Jennifer Bland @ratracegrad. (November 2018)
SPA Application using Vue.js, Vuex, Vuetify, and Firebase (Part 4) by Jennifer Bland @ratracegrad. (November 2018)
Adding Internationalization to a Vue Application by Jennifer Bland @ratracegrad. (November 2018)
Practical Projects with Vue JS 2 by Jack Herrington, Packt. (December 2018)
Vue.js 기초 다지기 (Video) on Lessipe by Lessipe
Full Stack Web Development with Vue.js and Node.js by Haider Rehman, Packt. (January 2019)
Vue for Designers by Design+Code (February 2019)
Vue Introduction in Turkish by Talat Tufekci
Data pulling using Vue-Resource in Turkish by Talat Tufekci
Spa Application using Vue-router in Turkish by Talat Tufekci
Create Vue Projects using Vue-cli in Turkish by Talat Tufekci
Messaging between Vue components and Vuex in Turkish by Talat Tufekci
How to Dynamically Add a Class Name in Vue by Michael Thiessen
Build a Library web application with Vue JS, Node JS, and SQL or MongoDB using ScaffoldHub By Felipe Lima @scaffoldhub_io
Building a Realtime Location tracking app with NativeScript + Vue by Saibbyweb

Examples

Starter Application with JWT Auth + sample backend API in Laravel
Node Webkit + Vue example by @brandonjpierce
Vue Samples by @superlloyd
HackerNews clone with vue.js + vue-router by @kazupon
Electron + Vue example by @bradstewart
Single page application example (Vue + Voie) by Boris Okunskiy
Begin - Task Manager SPA written in Vue + Lumen by Raj Abishek
Vue Mini Shop by BosNaufal
Vue SoundCloud by mul14
Feature Requests (Laravel + Vue Combo) by haydenbbickerton
Vue Cookbook (Vue1.0 + express) by @yjj5855: A demo first screen rendering of a service
Strong Together - A starter project to build single page Vue.js apps as stand-alone or for Laravel / Laravel Spark projects, based on Browserify and Semantic-ui) by WebSemantics
vuetest: an ad admin web with user auth, bootstrap ui, uploader, WYSIWYG editor in iframe
vue-shopping by andylei18
Vue-cnodejs,060 by @shinygang
vue-zhihu-daily by hilongjw
VueChess -Multiplayer online chess game  by gustaYo
Ngexplorer-vuejs-client -Vue client for Ngexplorer   by gustaYo
Vue 2048 (Vue + Webpack) by @pengfu: Popular 2048-Game implemented using Vue,Webpack,Sass,ES6
Vue Simple PWA by BosNaufal
Tour of Heroes (Vue 2.0): A Vue 2.0 port of the Angular 2.0 Tour of Heroes demo app. Highlights: ES6/7, render functions, JSX, revue (redux bindings for Vue), vue-router, Airbnb eslint, webpack. by @aweber1
vue-table-pagination A table with pagination by echovic
Feathers and Vue 2.0 Blog Admin Demo Demo for using Feathers with Vue 2.0. It includes authentication, vue-router, vue-infinite-loading and roles by delay
vue-zhihudaily-2.0 Zhihudaily demo built with Vue 2.0, vue-router & vuex, with server-side rendering. by cs1707
vue-demo-todolist a simply vue2.0 demo built with Vue 2.0, vue-cli. by fishenal
vue-AdminLte by liujians
Vue(2.0) + Node.js: A blog content manage system (CMS) by @ycwalker
ngexplorer-quasar -Implementation of Ngexplorer with quasar framework by gustaYo
zhihu-daily-vue a zhihu daily base on vue2.0 by moonou
loopback-vue loopback+vue+vue-resource,ionic-app,vue page分页功能,authenticate 权限控制,accesstoken机制,credentials,CI,docker  qxl1231
vue-s3-dropzone A Vue.js drag-and-drop component uploads files to AWS S3 serverlessly
easy-vue a easy example using the vue to implement easy web with vue 2.0, vuex 2.0, vue-router 2.0, vue-infinite-scroll 2.0, vue-progressbar 2.0 by TIGERB
Vuex Events Messaging Demo by Metric Loop
vue-memo a simple demo build with Vue.js(>2.x.), vue-router(>2.x.), vuex(>2.x.), vuex-router-sync@next(>3.x.) and Firebase(>3.6.x) by akifo
Resume Vue JSON based Resume based on Vue 2.0 by ChangJoo Park
App example with JWT Authentication developed with Phoenix Framework, Vue and Vue Router (demo) by @Angarsk8
Sample CRUD app with router in Vue 2.0 by @shershen08
ASP.NET Core Vue.js server-side rendering sample by @mgyongyosi
vuefire-quickstart - Documented Firebase integration w/ webpack and eslint, by @sejr.
hello-vue-django Vue.js and Django integration starter project with hot code reload
Real Time Social News App developed with Phoenix, Vue, Vue Router and Vuex (demo) by @Angarsk8
vue-calculator a simply calculator built with Vue 2.0, vue-cli(webpack-simple). by CaiYiLiang
Wikipedia-viewer A simple wikipedia-viewer page built with vue2.x ,vue-router,vue-cli(webpack-simple) and ajax(jsonp). by CaiYiLiang
vue2.x-douban A simple of douban movie build with vue2.x,vue-router and axios(豆瓣电影). by Superman
vue-laravel-example Vue - Laravel - Example is a simple example to set Vue with Laravel. by Jiajian Chan
vue-foundation A demo app integrating VueJS with Zurb Foundation, built using the webpack vue-cli f
aspnetcore-Vue-starter A VueJS 2 starter template as part of an asp.net MVC dotnetcore project. This template includes the VueJS client app and a backend API controller.
vue-reddit-app A Reddit SPA demo built with Vue 2.X , Vue Router 2 , Vuex and axios. Using Muse-UI and vue-cli webpack template by @yujiahaol68
vue-music-qq A qq-music project is based on vue-cli. The pages are simple and smooth
NavigationTab with Vue-Redux and Plain VueJSX  Navigation Tab with both plain Vue JSX and Vue + Redux Binding
Veggie Map An interactive demo using Vuejs + Vue router + Leaflet and Firebase
vuejs-d3 examples how to use d3 for visualisations.
vue-twitter-client A Twitter Client App build with Vue 2.X, Vuex, electron-vue and Electron
Douban Awesome douban Example created with Vue2.x + Vuex + Vue-router + vue-resource. by jeneser
Storyblok vuejs-boilerplate - Integrates Storyblok's Component System, allows to create editable Websites.
Vuexpresso - A boilerplate using VueX, Vue-Router, Vue-Apollo, webpack, GraphQL, Apollo-client, express and mongo
Vue.js with Sails.js example project - This project is for those who are new to single-page applications and want to learn through a real example.
Vue.js & Pyramid web framework app - A boilerplate using Pylons Pyramid webframework backend Vuejs webpack2, vue-router, yarn(packet manager)
vue-feathers-chat A sample realtime chat made with Vue in frontend and Feathers in backend, but using just Socket.IO-Client for the communication
vue-xplan A rotating earth demo page created with Vue and three.js
vueSocketChatRoom A socket chat room using vue2.x,vuex2.x,vue-router2.x,vux2.x,socket.io
vue-tetris (Use Vue, Vuex, Immutable to code Tetris) by @Binaryify: Use Vue, Vuex, Immutable to code Tetris.
route-planner-vue by @Kasheftin: The tool for planning routes with multiple sortable layers, draggable directions, markers and shapes on google map.
MyDiary-Vue A diary application build with Vue 2.X which is also have contact and todolist function
VueJS Example Projects on Github by Ali GÖREN
todo-mvc-webpack by voluntapear TodoMVC implementation on Vue 2 using the webpack-basic template with examples showing vuex, vue-router, central event bus and VueFire.
Chess Storybook Example with Vue 2.0 by gustaYo
Vue Weather Notifier A small sample animation app with SVG and Vuex
Nuxt Type An example Vue project with Nuxt for routing/SSR to demo page transitions
VueBlog A blog system supporting service side rendering by wmui
Cinemateka - An example of SPA made with Vue v1 & Laravel 5. Film & events schedule. Russian comments.
vue-2.x-boilerplate - A simple and small starter kit for a Vue project Vuex + vue-router
vue-minesweeper - A deadly simple minesweeper game with vuejs by rhapsodyn
X-Flowchart-Vue - A flowchart editor with SVG and Vue by OXOYO
koa-vue-notes-web - A fleshed-out SPA using Koa 2.3 on the backend and Vue 2.4 on the frontend. Includes fully featured user-authentication components, CRUD actions for the user's notes, and Vuex store modules.
Vuejs Shopping Cart - Shopping cart example using Vuejs and Firebase
PokedexVueJs by @rchung95
vuefire-auth A Vuefire Vue2-Auth-Email Verification with Firebase
vuefire-realtimedatabase A Vuefire Vue2-RealtimeDatabaseCRUD with Firebase
vuefire-storage A Vuefire Vue2-Storage with Firebase
Vue2-PWA-Blog by @deepak-singh
vue-firebase-auth-vuex A Vue2 Firebase Authentication with Vuex and support Progressive Web Apps
vue-chart-stater-kit Quick starter using Vue Router, Vue Chart, Element-UI
vue2.0-demos using mint-ui, Element-UI,And have Some demos（select city and so on）
conway Conway's Game of Life in Vue.
vuex-feature-scoped-structure An example application of the feature scoped vuex application structure
vuex-examples - Simple Examples on using Vuex to build Real World Apps
vue-vuex-todomvc - Example TodoMVC Vue.js app with Vuex store and server backend via REST and full set of E2E tests using Cypress.io test runner.
vuejs-sqljs-boilerplate - This is a boilerplate to use both Vue.js and sql.js together
X-WebDesktop-Vue - The WebDesktop system based on Vue by OXOYO
vuejs-music-player - A Vue.js lite music player
Vue.js Best Practices Example Project - A best practices example project using Vue.js + Vue Router + Vuex + Vuelidate
Vue.js [ONE] client - [ONE] client written with Vue2.5
Vue.js 2.5 with vue-cli v3 including authentication with auth0 by Dominik Angerer, Storyblok
Skeleton Vue+TypeScript - TypeScript, VueJS, ElementUI, Vue Router, Vuex, Material Icons, BrowserSync, Dockerfile
PENV Starter by @jesalg - A basic example of how to use VueJS, Express and PostgreSQL in conjunction.
vue-relay-examples - A collection of example applications using vue-relay.
laravel-vue-boilerplate - A Laravel 5.5 SPA boilerplate with a users CRUD using Vue.js 2.5, Bootstrap 4, TypeScript, Sass, Pug and Jest.
Vue Design System - An open source boilerplate for building UI Design Systems with Vue.js.
Vue Bulma Demo - A simple demo website to check out Bulma / Vue JS & express in conjunction.
Starter application ready for production with TypeScript, vuex, vue-router, HMR and more
vue.js与laravel结合的前后端分离开发模板- A template website to laravel passport / Vue.JS & Element UI.
Hands-On Web Development with Vue.js by Roman Kuba, Packt. (May 2018)
Vue Online Shopping Mall - A online shopping mall SPA demo, 基于VUE开发的前后端分离电子商城前端项目
FUE - Admin SPA client and server side boilerplate with Vue.js + Vue Router + Vuex + Vuetify + FeathersJS
Vue + TypeScript Cookbook - A small cookbook covering some less-than-obvious solutions for people getting started with Vue + TypeScript
Vuejs Examples
ASP.NET Core Vue Starter CLI 3.0 A Vue starter template using Vue CLI 3.0 with custom configuration (default TypeScript, Vue, Router, Vuex, Vuetify) integrated with ASP.​NET Core by @SoftwareAteliers (September 2018)
vue-soundcloud A Soundcloud client built with Vue.js 2, by Soroush Chehresa
vue-cart  A simple shop cart made with vue, vuex and vue router. by crisgon
Nuxt + Apollo + Element A Vue.js SSR boilerplate with Nuxt, Element (custom theme) and Vue Apollo.
vue-daily-zhihu a simple demo build with Vue 2.0 & vue-router & vuex by walleeeee
charcoal A starter template using the Vue CLI 3.0 and styled with Bulma by Seth Davis
Multi-page ASP.NET Core Vue with TypeScript - Multi-page ASP.NET Core Vue, Typescript, Vuex, Vue router, Bulma, Sass and Jest application. Template/starting point on how to use Vue.js as a multi page(multiple mini spa's) application in .NET Core MVC.
CION - Design system boilerplate for Vue.js - A design system build primarily for Vue.js applications. It utilizes design tokens, a living styleguide with integrated code playgrounds and reusable components for common UI tasks.
Vue websockets example - A basic example of Websockets usage with Vue.js 2 + Node project for full working example.
Vue(2.0) + Node.js: A blog by @FatDong1
vue-todo-list ToDo List sample app based on Vue + Vuex + Vuetify + Vee-Validate
Vue.js and Ionic v4 examples - A set of examples of how to use Ionic v4 with Vue.js
 Personal Website that use Vue, Vuex and Vue-Router  - A simple website example that made with vue, vuex and vue-router by Muratcan Şentürk
Client-Side Vue.js - Demo - Vue.js client-side for tiny, quick-loading, node.js-less Single Page Apps by Justin Wash
Large scale Vue.js application boilerplate + Vuex
Snake game on Vue.js without Canvas
Build a Vue chat app with CometChat

Books

The Majesty Of Vue.js by Alex Kyriakidis & Kostas Maniatis, Packt. (Nov 2016)
Learning Vue.js 2 by Olga Filipova, Packt. (Dec 2016)
The Majesty Of Vue.js 2 by Alex Kyriakidis and Kostas Maniatis, Leanpub. (Mar 2017)
Vue.js 2 Cookbook by Andrea Passaglia, Packt. (May 2017)
Vue.js in Action by Erik Hanchett and Benjamin Listwon (Spring 2018)
Testing Vue.js Applications by Edd Yerburgh (Summer 2018)
Vue.js 2 and Bootstrap 4 Web Development by Olga Filipova, Packt. (September 2017)
Front-end com Vue.js by Leonardo Vilarinho, Casa do Código. (November 2017)
Vue.js 2 Web Development Projects by Guillaume Chau, Packt. (November 2017)
Full-Stack Vue.js 2 and Laravel 5 by Anthony Gore, Packt. (December 2017)
Vue.js 2.x by Example by Mike Street, Packt. (December 2017)
Mastering Vue.js by Oleksandr Kocherhin. (January 2018)
Fullstack Vue: The Complete Guide to Vue.js by Hassan Djirdeh, Nate Murray, & Ari Lerner. (March 2018)
Vue.js 2 Design Patterns and Best Practices by Paul Halliday, Packt. (March 2018)
Vuex Quick Start Guide by Andrea Koutifaris, Packt. (April 2018)
Full-Stack Web Development with Vue.js and Node by Aneeta Sharma, Packt. (May 2018)
The Vue Handbook by Flavio Copes. (July 2018)
ASP.NET Core 2 and Vue.js by Stuart Ratcliffe, Packt. (July 2018)
Vue.js: Construa aplicações incríveis by Caio Incau, Casa do Código. (September 2017)
Getting to Know Vue.js by Brett Nelson, Apress. (August 2018)
Vue: Build & Deploy by Daniel Schmitz, Leanpub. (September 2018)
Building Applications with Spring 5 and Vue.js 2 by James J. Ye, Packt. (October 2018)
Vue.js Quick Start Guide by Ajdin Imsirovic, Packt. (October 2018)
Vue.js Component Patterns Course by Frederik Dietz (April 2019)

Blog Posts

Vue x Hasura GraphQL
Using GraphQL Mutations in Vue.js
Learn How To Build A Data-Driven Search UI with Vue.JS
Using GitLab CI/CD to auto-deploy your Vue.js application to AWS S3
Dockerizing a Vue App
Deploying a Flask and Vue App to Heroku with Docker and Gitlab CI
Large-scale Vuex application structures by Kevin Peters
Composing computed properties in Vue.js by Kevin Peters
Learn how to refactor Vue.js Single File Components with a real-world example by Kevin Peters

Projects Using Vue.js
Open Source

PageKit - Modular and lightweight CMS built with Symfony components and Vue.js.
npmcharts.com - Compare npm packages and spot download trends.
Koel - A personal music streaming server that works.
Raven Reader - Simple RSS Reader made using atom electron and vue.js.
Gokotta - A simple music player built by electron and vue.
CoPilot - An admin portal based on AdminLTE with vue.js integration.
Retrospectify - A simple tool for doing collaborative retrospectives in agile teams.
jade-press - Cms based on mongodb, nodejs, koa, vue and more.
astralapp - Organize Your GitHub Stars With Ease.
EME - An Elegant Markdown Editor.
Github-explorer - A spa which can help you check your github in a better way.
Hotel - Start your dev servers from your browser and get local domains in seconds.
Surfbird - A Twitter client written with modern web technologies.
Approach0 - A math-aware search engine.
Flox - Self Hosted Movie, Series and Anime Watch List.
JavaScript Guessing Game - A game for identifying JavaScript tools and libraries.
vue-ghpages-blog - A blog based on GitHub pages by Vue.js 2 + Webpack 2.
Vuedo - Blog platform, built with Laravel and Vue.js.
vue-music163 - A Vue.js project for music.
Tomato5 - Real-time collaboration tool, it combines Pomodoro Technique with a team status share board.
Web Learn - A service which provides simple access to thousands of video tutorials on web developing and programming.
ExcelJSON - A tool to convert CSV, TSV to/from JSON.
Materialize-blog - A material blog built with Laravel5.3 and Vue2.x.
VueCompomnentGenerator - Generate vue single file component on browser.
SDR News - News for web designers and developers aggregated from multiple sources (Reddit, Hacker News and Prominent Blogs).
PJ Blog - Open source blog built with Laravel and Vue.js.
Lulumi-browser - Lulumi-browser is a light weight browser coded with Vue.js 2 and Electron.
vue-wordpress-pwa
OpenAPI 3 viewer - Browse and test a REST API described with the OpenAPI 3.0 Specification
Stacer - Linux System Optimizer and Monitoring
Distrochooser.de - An orientation guide for Linux beginners
Buka - EBook Management
Docute - A framework for writing documentation without build process
pm86 - Production process manager for Node.js apps Websites
vms - A Vue.js 2.0 Management System
nativescript-vue - A Vue.js implementation of the NativeScript renderer.
piper - A drag-and-drop mobile website builder base on Vue.
mmf-blog-vue2 - A blog based on Vue2(Vue-router, Vuex) and Webpack2.
Media Manager - Web File Manager.
dyu/bookmarks - A self-contained, self-hosted bookmarking app powered by leveldb, built with Vue2.1.x.
JSON Schema Editor - An intuitive editor for JSON schema. Develop with Vue.js 2 and Firebase.
npm-stats - npm package download statistics dashboard
vue2-admin-lte - a project that converts AdminLTE to work with Vuejs (v2.x).
Dockeron - A project built on Electron + Vue.js for Docker on desktop.
Flamme - An open source Tinder desktop client built with electron and Vue.js for educational purposes
Goldfish - A HashiCorp Vault UI built with VueJS, Golang, and Bulma CSS
Adminify - An Admin dashboard based on Vuetify, check the Online Demo
promptie - A framework written in Vue.js for creating command-line like interfaces in web browsers.
Hare - 🐇 Application boilerplate based on Vue.js 2.x, Koa 2.x, Element-UI and Nuxt.js
Paper-Dashboard -Creative Tim Paper Dashboard made for Vue
AdminLTE-VueJS2 - An open source project that implements  VueJS (v2.x) on AdminLTE.
Material Dashboard - Creative Tim Material Dashboard made for Vue
Explore-Github - VueJS 2 Github Explorer Using API v3
CoreUI - Open Source Admin Template powered by Vue.js
ChuckNorris - Chuck Norris Jokes Generator built with VueJS + api.chucknorris.io
LeafPlayer - A simple and fast, privately hosted music streaming server.
JSON Editor - A schema-aware JSON editor. Develop with Vue2.
Voten - A Reddit-like platform built with Vue2 and Laravel.
News Weaver - A web based RSS Reader/Aggregator made using VueJS and VuetifyJS
Wake Up Billie Joe! - A web site countdown to October, based on Green Day's song Wake me up when September Ends. Created using Vue and Firebase.
Astrum - A lightweight pattern library designed to be included with any web project.
vue2-pwa-vision - A Face Detection Google Cloud Vision with Vue2 + Vuetify + Progressive Web App
vue2-pwa-rekognition - A Face Detection Amazon Rekognition with Vue2 + Vuetify + Progressive Web App
AmmoBin.ca - meta search site for online ammo prices across Canada
SPA-asp.net-api-vuejs- - A Vue.js single page application for basic task Management & messaging using ASP .NET Webapi 2 and SQL server
Book-Trading-Club - Trade or loan books with other book readers in your area. Built using nodejs and vuejs2
vuejs-extension-pack vscode - An extension packf or vscode with popular VS Code extensions for Vue.js development.
Wiki.js - A modern, lightweight and powerful wiki app built on NodeJS, Git and Markdown
vue-pwa-speech - A Speech to text With Google Cloud Speech on Vue2 + Vuetify + Progressive Web App
vue-speech-streaming - A Performing Streaming Speech Recognition results in real time Speech To Text with Google Cloud Speech + socket.io on Progressive Web App
My Animation List - A tool to easy get css animation code
vue-input-streaming - A TextInput Streaming RealTime And Two Way Data Binding Broadcasting with Pusher
TidyTab - A Chrome extension for tidying up those tabs.
peregrine-cms - A Vue.js and Apache Sling based head-optional CMS
concept-to-clinic - Lung cancer prediction project with Vue.js interface
grid-awesome - Generate boilerplate css for grid layouts using the css display: grid; property.
Light Bootstrap Dashboard - Creative Tim Light Bootstrap Dashboard made for Vue
Hubaga - A free and lightweight WordPress eCommerce plugin for developers and other digital shops.
vue-webpack-buefy - Vue.js starter with full-featured Webpack and Buefy
Coypu - Text-editor-like weekly planner
core-server - Highly scalable VueJs framework with an integrated API system, and multiple advanced features.
discord-logo - A Vue.js animated discord logo generator based on SVGs. (Github Page)
node-vue-template - A starter template for building complete application using Node.js (API) and Vue.js (SPA) with some included packages and configurations to help start the development quickly.
vue-storefront - Vue.js Storefront - PWA for eCommerce. 100% offline, platform agnostic, headless, Magento2 supported.
fd-vue - Vue.js client for an IoT framework
wildfire - A drop-in replacement for other comment plug-ins.
Ride Receipts - Simple automation desktop app to download and organize your tax invoices from Uber and Lyft.
vue-chrome-extension-boilerplate - Boilerplate for Chrome extension using Vue.js and Webpack
TimeMark - A Time manager which will can record your time and some more function will be developed.
Laravel Enso - SPA Admin Panel built with Bulma, VueJS and Laravel, packing lots of features out of the box.
Code Notes - A simple code snippet manager for developers built with Electron & Vue.js.
Pomotroid - Simple, visually-pleasing and customizable Pomodoro timer.
XMR Miner - Cryptocurrency (XMR) mining app, built with Vue.js and visualized with D3
XMR Paper - Monero wallet generator, built with Vue.js
JoyProxy - Chrome extension for handling proxy settings
activity-automation - Manage daily activities and get reports on timely basis.
jsettlers-web Popular German board game to build hexes, settlements, cities, roads with earned resources
Tamiat CMS - Tamiat is a front-end focused CMS, uses Vue.JS as the frontend and integrates with Firebase for the backend functionality.
vuegg - vue GUI generator: Create mockups and code in one go! It leverages the creation of pages, components and styles with its visual editor. Generate all scaffolding code for your next vuejs project.
Podlove Web Player - Podcast-optimized, HTML5-based audio player featuring chapters, transcripts and embedding.
Leo Vue - Use the open source Leo outlining editor/IDE to create webapps with nested menus, with support for Vue components in content.
Justine - A configurable HTML documentation generator (currently supports JSDoc) using Vue components for the documentation template
Deezer-Vue - Deezer client built with Vue\Vuex
Vuep.run - Online SFC editor for Vue
V·oogle - Google.com, reVued
Pomidorus - Pomodoro time tracker build using Vue and D3 🍅
Hubble - 🔭 Travel through GitHub Stars' history.
Vuepress - Minimalistic Vue-powered static site generator
Socialhome - A federated rich profile builder with social networking features
GenVue - a hostable, web application that lets confidential users upload and share private files build on Vue.js, Vuetifyjs and NetCore WebAPI stack
vue-array - Array object operation under Vue, Array object operation under Vue Use this package to manipulate the array. Vue can monitor the changes in the array
Laqu-l - A complete App starter kit with Quasar Framework, GraphQL API backend with OAUTH 2.0 authentication, Firebase ready, multilanguage capability and more.
Protovue - A prototyping component library that helps designers and developers quicky scaffold an abstracted app layout.
Chattier - SPA social network built with Laravel 5.6, Vue.js 2, and Bulma (Buefy components + Bulmaswatch themes). Also uses JWT authentication.
chrome-ribbon-reminder - A Chrome extension written using Vue and Async/Await. Uses a popup display and changes badge counts.
Faviator - A simple easy favicon generator.
Modular Genealogy - Genealogy / family tree management system using Laravel 5.7, Vue.js 2.5 and various components. Work in progress.
Minimal Notes - Web app build with Vue.js
Roast an app built to help coffee enthusiasts find their next cup of coffee while learning about Laravel + Vue.js.
Stack Edit - In-browser Markdown editor
Bael Blog Template -  A static generated blog template that uses Netlify CMS for the backend and Netlify for hosting. Features a brutalist aesthetic, fuzzy search, serverless email signup, and more.
Buefy Shop Sample shop, open source, built with Nuxt, Stripe, Firebase, Bulma and Serverless Functions.
sysmon A B/S mode system monitor for Linux. You can remotely watch the usage of your system resources via web browser everywhere.
eth-vue A Truffle Box that provides everything you need to quickly build Ethereum dApps that have authentication features with Vue.js, including configuration for easy deployment to the Ropsten Network. It's also Gravatar-enabled.
Nippon-color Inspired by nipponcolors dot com. This is a nippon-color PWA build with vue-cli 3.
Saleina CMS A static site content management system built with vue using git as a backend.
Vuido A framework for creating native desktop applications. It can run on Windows, OS X and Linux, using native GUI components.
YouGet YouTube Video/Audio/Subtitle Downloader + Cutter
Vue Pug Stylus Vue + Pug + Stylus boilerplate 💚 🐶 🖌
Crypto News allows you to convert cryptocurrencies, view latest news and exchange rates for each ICO – all the data from the world of cryptocurrencies in one place.
Epiboard A new tab page extension with material design and useful features 🆕 🎉
zhudyos/duic Distributed configuration center 🆕
Vuemmerce Free ecommerce template built with Vue.js and Bulma framework 🆕
Nucleus Layered architecture ASP.NET Core API and Vuejs client application startup template
Carpoolear The open source Vue.js frontend (mobile and cordova app) for the argentinian carpooling application: Carpoolear
Statusfy: Statusfy is a Status Page System, easy to use and completely Open Source.
DynamoDb-GUI-Client: Cross-platform GUI client for DynamoDb
RosterWebApp Open source rostering web application which allows the rostering of employees/teams to work sessions and other features.
Vue E-Store Templet - An e-commerce templet build with vue/vuex/vue-router and bootstrap4.
Kitty Ipsum - Generate lorem ipsum composed of ""meow"" in different languages.
Git Superstar - Count your git stars and top repositories.
Twill - An open source CMS toolkit for Laravel that helps developers rapidly create a custom admin console that is intuitive, powerful and flexible.
MATH_BOT - Learn math by programming a robot.
Vue Crossword - A Vue.js based crossword puzzle builder and filler front-end application. Built with CodeSandbox.
Vue Org Chart - Manage and publish your interactive organization chart (orgchart), free and no webserver required.
Beep - Account Security Scanner built with Vue.js and Ionic 4
Vue CRUD - Vue.js based REST-ful CRUD system. Vue CRUD allows you to easily create fast applications such as CMS or CRM.
Vue HQ Admin Dashboard – A modern admin dashboard powered by Vue, Sass, Firestore, and Netlify.
MToDo - Mini To Do Lists with simple auth built with Vue.js and JSON Server as data mock. Great as reference for anyone that finding reference about real world Vue.js
FireX Proxy - FireX Proxy is the user's trusted Chrome and Firefox browser extension that allows you to unblock any website and browse the web privately and securely. 🛡
VueSolitaire - Solitaire (spider,klondike) imlemented in Vue.js.
Thermal - One stop to all Git repository.
QMK Configurator - QMK Firmware Keyboard Configuration UI in Vue.js.
Eplee Sweet, simple epub reader made with Vue.js and Electron.js.
vue-realworld-example-app - Exemplary fullstack Medium.com clone
Daily - Curated dev news delivered to your new tab 👩🏽‍💻
Laravel File Manager - Powerful file manager for Laravel
Vue Crypto Dashboard - Cryptocurrency Dashboard made with Vue.js

Commercial Products

Wijmo - A collection of UI controls with VueJS support.
Collate Notes
Formester - Form, email marketing automation made easy
ChatWoot - Livechat and agent collaboration over Facebook messenger.
VueA - VueJS Admin template with multiple layouts and laravel version.
Teleo - Team collab-app moving effortlessly between talking, planning & doing
Cover - A high quality Component Library built on Vue.js
EducationLink - CRM and sales automation for education agents and colleges.
Pragmatic v2.0 - Responsive and configurable admin template built with Vue.js and Element.
Seat - Simple and modern team communication and collaboration solution.
Moonitor - Cryptocurrency tracker for Desktop.
Deskree - Online collaboration platform that combines Ideas, Tasks, and Issues in one place.
OSHCExpress - A comparison and ecommerce for OSHC (Overseas Student Health Cover) insurance (Australia's insurance for international students).
Agiloo - Project Management app for Scrum and Kanban
ScaffoldHub - Online Web App Generator for VueJS with NodeJS, and MongoDB or SQL.
Commandeer - Could Management Reimagined. A Desktop cloud management app built with Vue.js and Electron.
SA Email Builder - Email template builder responsive made with VueJS and Quasar Framework

Apps/Websites

Laravel Spark
Vice Video
Formlets
Laracasts
esa.io
稀土掘金
Prague Airport
Portfolio Site
Laravist
Atiiv - An app aimed for personal trainers and their clients.
Statamic
Embalses! - A tool to report water dam level using the U.S. Geological Survey database.
TravelMap - A simple way for travelers to create a blog based on a Map.
Proper Cloth Shirt Builder - Custom shirt builder.
CheckIt
Reddit News - A browser extension which show notifications and news from reddit.
Powerpuff Yourself by Cartoon Networks
小桃酱
cloudradioo - Web app that plays randomly all top 50 songs from the soundcloud charts
vNotes - Simple and beautiful notepad to Markdown with Vue.js and Local Storage API.
Open Function Computers
Dermail - A webmail client written in Vue.js for Dermail, a mail system written in node.js.
octimine - A patent search engine.
Draxed - A web based MySQL and PostgreSQL data browser and dashboard manager.
Leapspotleap - A simple way to look up wikipedia articles near you. Or simply navigate to a place and find interesting wikipedia information. Responsive web app.
X-SONGTAO - A Personal blog. FE and CMS are in same vue SPA.
Jobinja - A Job Board and career platform operating in Iran.
滚蛋吧！莆田系 - Show all Putian hospital information
Jobi : Recruiting Platform 
The Spice House - Ecommerce website for high quality spices. Checkout, cart, the product detail page, and search are built using Vue. Checkout is a single page app written with Vue & Vuex.
Livestorm - Webinar / Live events app.
Metric Loop - A technology services and solutions website.
Holden
Global-Exam - Online Training for Language Proficiency Tests
SlugSurvival - A webapp that helps student better plan their courses (hobby project, not in affiliation with UCSC).
FreePoll.Online - A group decision making tool built using Vue.js, vue-sortable, Semantic UI and Zappa.
GitRelease - Track github project's new release on mac menubar using vue.js with electron.
12BAY.VN - Applications online flight bookings.
PLAYCODE.IO - Playground for Rapid Frontend Experiments.
The Void Radio - Underground House Music Online Radio.
Bitly Vue - Shorten URLs with VueJS & Bitly API.
Storyblok - API Based/Decoupled CMS using VueJS for its frontend.
WizzAir
Moving to HTTPS - Guide to moving different platform/hosting sites to HTTPS
Booknshelf - Discover great books and bookshelves on different topics.
Top HN - A real time display of top news activity on Hacker News
Euronews - Euronews is a multilingual news media service, headquartered in Lyon, France.
Roozame روزامه� - Roozame is a Persian smart news media service.
Koumoul
NinjaCalc - A suite of embedded engineering related calculators, built as an open-source single-page app with vue.js.
Vue.js Feed - The latest Vue.js news, tutorials, plugins, and more. Made with Vue.js and Laravel, based on Vuedo.
蒜瓣 - A web app developed with Vue2.0 and Douban API
Guess Right - A 'guess the word' game - Written with Vue/vuex/vue-router (front-end) and Laravel/MySQL (back-end). Code is Open Source on GitHub (although not the live files that run the game at kdcinfo).
GRAP - Business communication service
Easy Mock
mmf-blog-vue2-ssr A blog built with Vue 2.0, vue-router & vuex, with server-side rendering
JSON Schema Editor - An intuitive editor for JSON schema built with Vue.js and Firebase.
Winsome Trivia - A single or multiplayer trivia game featuring over 2,000 unique questions built with Vue.js and powered by the Open Trivia Database.
Moon Organizer - Lunar calendar app
Flash-Vue - ‘Flashcards of the Future’ bring learning everywhere 🚀
Kinderbesteck - A full Online Shop SPA with Vue2.0, Vuex, Vue Router
n2ex - A vue ssr(nust) website, use v2ex API
Power Thesaurus - A crowdsourced online thesaurus
Chattanosy - A community-powered database of new things and places in Chattanooga, TN.
PAIXIN - A genuine picture sale website
CodeBottle - Drag-and-drop snippets to your projects
1XBET - A betting company operating since 2007
MyOwnTV - A streaming website for creating internet television
CrowdCircus - Europe’s biggest crowdfunding- and crowdinvesting-aggregator
Talk to Someone - Free, anonymous and confidential online text chat with strangers around the world.
轮子工厂 - A ui components and libraries sharing website
ابیات ناب پارسی - A collection of Persian poems
Ripplectron - Ripple(Blockchain coin) Wallet Desktop client for vue-electron
PingBreak A free and simple website monitoring service using vuejs for real-time dashboard
Todoist Tribute - Todoist clone, written in Rails + Vue
JSON Editor - A schema-aware JSON editor built with Vue2 and firebase.
Develteam - A social network for indie game developers.
Mixsii - A free video chat room site for teens, adults, family, and friends.
PipQuest - A retro-style puzzle game built in Vue
Matryx - A decentralized collaboration platform.
iPrevYou - YouTube™ Player - A chrome app for watching youtube videos on your desktop.
Item Manager - An application to transfer items for Destiny 2 game.
Frontend Masters Intro to Vue - Frontend Masters full day course
TR-101 - A drum synth / sequencer.
Bazaar - Media sharing platform.
WynnStats - A unofficial WynnCraft statistics.
Vectr - A free vector graphics software
brain bits - A P300 online spelling mechanism for Emotiv headsets
Coin Dashboard - The fully client-side cryptocurrency asset dashboard.
Habitica - online task management application in  the form of a role-playing game.
MadeWithVueJs - A Gallery of Projects made with Vue.js (also the Site itself uses Vue.js)
CodeDependencyScanner - A C# dektop application that display .Net assembly code dependencies build with Vue, Neutronium and D3.js.
Thousand Ether Homepage - The Million Dollar Homepage reimagined as an Ethereum DApp. Build on Vue.js and open source.
Let's Enchance - free online image upscale and enhancement with neural networks.
Pi.TEAM - Online Invoicing and Accounting - Simple to use online accounting and invoicing, free for single users and freelancers.
Vuethwallet - A simple app generate ethereum wallet with vuejs.
Tipe - Next Generation API-first CMS. Create your content with powerful editing tools and access it from anywhere with a GraphQL or REST API. Stop letting your CMS decide how you build your apps.
Vuethexplore - A simple app explore ethereum blockchain with vuejs.
Fintechers - Fintech focused job board.
Devjournal - Collaborative todo list for projects and ideas.
Bubbleflat - Online platform that helps students and young Professionals find their perfect roommates by searching for people with similar lifestyles, interests, or schools. Laravel & Vuejs
TeaQuinox Tea Co -- ecommerce site that specializes in loose leaf tea.
blip - Test websites for speed, mobile-friendliness, security and the HTML5 doctype. Find businesses around a location and test their websites en masse, or just test your own URL.
sunpos - Sun position, elevation, azimuth, ecliptic/equatorial coordinates and sunrise/sunset time (Julian day) calculation and conversion utilities. Web site is programmed using pure JS, Vuejs and i18n Vuejs localization plugin. Visualization is created using D3.js.
U3xyz - A personal blog base on vue ssr.
27.ua - Ukraine-based internet hypermarket
Chess Guardian - Answer chess positional questions from your own games.
Blackjack Break - A quick game of blackjack
MECHANICAL - Reddit mod for Firefox that surfaces contextual data insights.
GameVix - Swap your used video game discs with others, hassle free. PWA with Material Design.
VivifyScrum - Agile project management app for teams that deliver. Customizable Scrum and Kanban boards.
9GAG - Popular online platform and social media website
CryptoVue - Real-time cryptocurrency dashboard
Kitchen Stories - Cooking platform
MailRabbit - Create, A/B test, and monitor transactional emails without a developer.
Vue资源精选 - great Vue components list, category, inline demo show and brief
Cronhub - Painless Cron Monitoring Tool
wrkprty - Pop-up coworking events for freelancers, remote workers, and professionals looking to get out of the office.
Made with love - The Made with Love ❤️ around the world, initiative is a movement to celebrate 🎉, promote 📣 and build a brand 👑. It feed Tech news, design inspiration and trends from over 💯 sources including Dribbble, ProductHunt, Behance and Techcrunch. 💝
Path to Product - Discover over 1,000 product jobs at startups and tech companies.
V·oogle - Google.com, reVued. A joke-project. :)
Broker Notes - 'Study to become a Real Estate Agent' 🏠
SyncLounge - SyncLounge is a tool to sync Plex content across multiple players in multiple locations.
HCE.it - The website of an Italian agency, entirely made with Vue using a Laravel-based headless CMS.
Pages - Web design inspiration
Scrumpy - A Beautiful Project Management Tool for Agile Teams
Spektrum - The website of Spektrum Media Agency
SPK The website of SPK Ecosystem
IDDEF ☪️ The Federation of the Associations that Value Humanity's webpage, CMS, CRM and Donation and all e-commerce pages are designed with Vue.js, Vuex and pure JavaScript 🙏
Configuration File Management - A simple way to manage your configuration files
Roast an app built to help coffee enthusiasts find their next cup of coffee while learning about Laravel + Vue.js.
YBR - Centralized YBS Public eComplaint Management System. (Full SPA)
Regex Fiddler
Myanpwel - The website of event ticketing platform.
CryptoArte - An Ethereum art collection, non-fungible token, and Dapp.
Muuviez - A movie discovery and tracking website with stylish design
NAGA VIRTUAL - NAGA VIRTUAL is the first independent virtual goods market.
Scroll.in - Scroll.in is an independent news, information, and entertainment venture.
Akunyi - Charity Website
What Would Mark Ruffalo Do? - Motivational website based on the story that Mark Ruffalo failed at several hundred auditions before finding success.
Brandy - brand assets manager for your menu bar.
Ruster社区 - Rust fullstack community forum for CN.
NBC Sports - NBC Sports is a sports news website.
WITHIN - Extraordinary stories in Virtual Reality.
plottr.io - Plan your running and cycling routes
beCamp - A community-organized tech conference in Charlottesville, VA. Website code is open-source.
Trustpilot - a free and open to all review platform.
Lagom - Simple, intuitive and fully responsive WHMCS theme
ScoutMyTrip - Roadtrip Planner - Road trip planning app for India which helps travelers to build their itinerary, discover points of interest, find hotels, gas stations, food joints etc along the route.
Podflix - Podcast app.
GamersClub - Biggest company of eSport community development in Brazil
MIT - Official Website of Massachusetts Institute of Technology.
Elvenar - Elvenar is a browser based fantasy city builder game.
Beacon - 💙 A service that allows you to share your content across multiple websites.
Artfinder - Artfinder is a website for buying & selling art paintings.
Rolodromo - A spanish website dedicated to tabletop RPG.
GitHubExplorer - Pure static page webapp for exploring GitHub. Using Vuejs and GitHub GraphQL API v4.
Keynote - Present with Vue.
HappyPlants - A progressive web app for organizing your plants 🌱.
Pocket Lists - World's friendliest to-do list app.
Padlet - Collaborative bulletin boards
Glovo - On-demand delivery
MySigMail - MySigMail is a free, in browser, email signature generator without creating account
Wordguru - A simple verbal game where you split into teams and try to guess as many keywords as you can.
ApiFlash - A Chrome based screenshot API built on top of AWS Lambda for Developers
Kitty Ipsum - Generate lorem ipsum composed of ""meow"" in different languages.
Git Superstar - Count your git stars and top repositories.
DECS - The decentralised all-in-one workspace to manage code snippets and to protect sensitive data.
Careup - Business management tool for dentists 🦷.
Asciiur - Internet's ascii art collection
Tapestri Designer - Free tool to design PCR primers for genome sequencing experiments (NGS)
Remote-Access-SSH - Web based remote host access with node-ssh
Map Marker Generator - A Free Online Tool To Generate Custom Map Icons On The Fly
Monocle Reader - Follow feeds, Twitter, YouTube, Blogs and everything else, all in one place.
前站导航 - 前端社区、文档收录.
Geenes - Generate and apply color palettes to your UI, then export it to sketch or code.
Blurrish - Encrypted Morning Pages journal for Mac/Windows, built with Vue and Electron. Blurs as you write so you can journal in public workspaces.
ExifShot - What and how on photography, beautifully.
Studolog - Online file sharing platform for students, including tester and reviews. Currently in Czech 🇨🇿 only.
sum.cumo – Digital business models (with Vue as a tech stack centerpiece).
Gamebrary - Open source tool to organize video game collections.
Guds - Compare prices across supermarkets. Only available in México 🇲🇽.
Premium Poker Tools - What poker players use to study.
QMK Configurator - Configure, Build, and Download Custom QMK Firmware from your browser.
Worksome - Marketplace/platform for qualified it professionals and freelancers and companies looking to hire them.
Translator-vuejs - Translation App built with Vuejs, Yandex API & ResponsiveVoice.js API.
Big Timer - Fullscreen countdown timer for workshops, meetings and presentations. Big Timer helps workshop facilitators, meeting chairs, design sprinters, presenters and aspiring game show hosts stick to their program.
Wirenook - Free online app for building responsive website wireframes. Hi- and Lo- Fidelity, project sharing and svg download.
Kvalitetskontroll - Norwegian management system tailored for the construction industry.
Poolside FM - A retro-style music player

Interactive Experiences

Jean-Pierre Morin | 1700 LAPOSTE
Facebook NewsFeed
YouTube AdBlitz 2016
Omnisense Experience
Louis Ansa Website (portfolio)
Djeco.com
Tolks.io
Meet Graham
NOIZE original
TR-101 Synth Drum Machine
Bootstrap 4 Editor
Subtletab - Browser Extension
web-riimote - Turn your smartphone into a 3D controller (source code)
CSS ColorVars - Interactive tool code generation (source code)

Enterprise Usage

Alibaba
Baidu
Sina Weibo
Xiaomi
Ele.me
Optimizely
Expedia
UCWeb
Line
Nintendo
Celtra
Sainsbury's
AREX
DJI
Octimine GmbH
Hunliji
GitLab
Clemenger BBDO Melbourne
ZenMate
Codeship
Storyblok
Monito - Building the Booking.com for international money transfers
Hypefactors - Software for data-driven PR professionals
Adobe
IBM
Cotabox
Aromajoin - Develop the finest digital scent products based on the harmony of hardware, software and material technology.
Carrefour

A11y

Vue A11y project - Vue.js community project to improve web accessibility.
vue-skip-to - It helps people who only use the keyboard to jump to what matters most.
vue-axe - Accessibility auditing for Vue.js applications.
vue-announcer - A simple way with Vue to announce any useful information for screen readers.
eslint-plugin-vue-a11y - Static AST checker for accessibility rules on elements in .vue
vue-focus-lock - It is a trap! A lock for a Focus. A11y util for scoping a focus.
vue-a11y-calendar - Accessible, internationalized Vue calendar.

Components & Libraries
UI Components
Table
Tables / data grids

vuetable-2 - Data table simplify.
vue-tables-2 - Vue.js 2 grid components.
vue-datasource - A vue.js server side component to create dynamic tables.
ag-grid-vue - Vue adaptor for ag-Grid.
vue-data-tables - Vue2.0 DataTables, based on element-ui.
vue-floatThead - Vue 2.0 component for floatThead, a floating & sticky table header plugin.
vuetiful-datatable - Datatable component with sorting, filtering, pagination, grouping and aggregation.
vue-materialize-datatable - VueJS datatable for Materialize CSS
vue-good-table - An easy to use, VueJS (2.x) table plugin with sorting, column filtering, pagination etc.
vue-grid - A flexible grid component for Vue.js
vue-easytable - A powerful table components based on Vue2.x
vue2-datatable-component - The best Datatable for Vue.js 2.x which never sucks
vue-js-grid - Vue.js 2.x responsive grid system with smooth sorting, drag-n-drop and reordering
vue-handsontable-official A Vue.js wrapper for the Handsontable spreadsheet component
vue-grid - A powerful flexbox grid system for Vue.js 2.x, built with inline-styles
vue-data-tablee - Based on vue-good-table, a simple and pretty table component
vue-scrolling-table - Simple table component with flexbox sizing, scrolled table body (horizontal and vertical), slots for all tr/th/td rendering.
el-search-table-pagination - Combines Form, Table and Pagination components of Element UI together. Based on Vue 2.x.(Detail)
vue-crud-x - Extensible crud component using Vuetify layout, other than the usual page, sort, filter, it is able to do nested CRUD, custom forms, filters, operations.
Vue Datatable - VueJS powered Datatable with Laravel server-side loading and JSON template setup
v2-table - A simple table component based Vue 2.x.
vue-cheetah-grid - A high-performance grid engine that work on a canvas for Vue.js.
vue-table-component - A straight to the point Vue component to display tables.
@lossendae/vue-table - Simple table component for Vue.js 2.x with pagination and sortable columns.
el-data-table - base on element-ui, makes crud easily
DevExtreme Vue Grid - High-performance plugin-based Vue data grid for Bootstrap.
vue-ads-table-tree - A vue Table component, with filtering, sorting and pagination. Rows can have child rows, so a tree structure can be build. It also supports async calls to load rows from the backend. It's built with the css framework tailwindcss
Syncfusion Data Grid for Vue - Displays and manipulates tabular data with features such as paging, sorting, filtering, editing, and grouping.
@marketconnect/vue-pivot-table - A vue component for pivot table
vue-teible - Lightweight and flexible table component for the web ⚡️
vue-jqxgrid - Vue data grid with filtering, sorting, editing, grouping, data export and other features.
vue-jqxpivotgrid - Vue pivot data grid with pivot designer, drill through cells, pivot functions.
toast-ui.vue-grid - Vue Wrapper for TOAST UI Grid.
vueye-datatable - Vueye data table is a responsive data table component based on Vue.js 2, it organizes your data per pages in order to navigate easily.
vue-sorted-table - A plugin to turn tables into sorted tables. Supports nested object keys, custom icons and reusable components.
vue-bootstrap4-table - An advanced data table based on Vue 2 and Bootstrap 4, which includes Multi column filtering, Multi column sorting, Pagination & Info, Checkbox rows and Highly customizable slot options.
vuejs-smart-table - Straight Forward Table Component using the vanilla HTML Table Structure with Sorting, Filtering, Pagination and Selection out of the box.
@myena/vue-table - Table Components for Client/Server data handling. Filter, sort, paginate, group, expanding details row. Highly customizible via slots for filter, headers, column, pagination, details row.
vue-jd-table - Advanced and flexible data table component for Vue 2. Feature Rich: search, filtering, exporting, pagination (traditional and virtual scroll) and so much more!
vue-grd - Simple, Light-weight and Flexible Vue.js component for grid layout.
iview-table-page - Combines Table and Page components of iview UI together. Based on Vue 2.x. And Hear are some examples to use iview-table-page.

Notification
Toaster / snackbar — Notify the user with a modeless temporary little popup

vue-notifications - Vue.js agnostic non-blocking notifications library.
vue-easy-toast - A toast plugin for vue/vue2.
vue-toasted - Responsive Touch Compatible Toast plugin for VueJS.
vue-notifikation - Vue.js notification plugin.
vue-notification - Vue.js 2+ notification plugin using Velocity for animations.
vs-notify - Tiny but powerful notification component with no dependencies.
vue2-notify - Vue.js 2+ notification plugin.
vue-notifyjs - Minimalist, 3kb themable notification plugin
vueup - Simple, lightweight and elegant global notification popup for Vue.js
vuex-flash - Flash message component for VueJS 2.x within Vuex 2.x.
vue-snotify - Vue.js 2 Notification Center
vue-notify-me - Stackable notification Alert for Vue
vue-noty - A Vue.js 2 wrapper around Noty
vue-notice - Vue.js 2 wrapper around Noty.js with native API
vue-flash-message - Simple yet flexible notification plugin
@voerro/vue-notifications - Simple Vue.js 2 notifications plugin with HTML and styling support.
vue-awesome-notifications - Lightweight Vue.js notification library with advanced async support.
vue-izitoast - A Vue.js 2 wrapper around IziToast.
vue-toastr-2 - Simple toast notifications for Vue.js built on toastr
vue-snack - A Vue.JS plugin for Snackbars based on Google Material.
vue-m-message - A message plugin for vue.
vue-notification-bell - A Vue UI component for showing notifications.
v-tostini - Really plain toast notifications mechanism for Vue.js 2.x. No CSS included.
vue-toast-notification - Yet another Vue.js Toast notification plugin.

Loader
Loaders / spinners / progress bars — Let the user know that something is loading

vue-radial-progress - Radial progress bar component for Vue.js.
vue-simple-spinner - A simple, flexible spinner for Vue.js
vue-wait - Complex Loader Management for Vue/Vuex and Nuxt applications.
vue-progress-path - Customizable progress indicators and spinners that support any custom SVG path.
vue-blockui - BlockUI for vue 2, similar to jquery blockUI, can be used for loading screen.
epic-spinners - Easy to use css spinners collection with vue.js integration.
svg-progress-bar - A simple progress bar for Vue.js.
vue-loading-overlay - Tiny full screen loading indicator
vue-loaders - vue wrappers for loaders.css
vue-promise-btn - Tiny and powerful tool for asynchronous buttons(or any other tag) lock with fancy built-in spinner
vue-spinkit - 🌈 A collection of loading indicators animated with CSS for VueJS
vue2-form-loading - A VueJS directive can be used with forms in order to disable submit button while the next page is loading
vue-element-loading - ⏳ Loading inside a container or full screen for Vue.js
tb-skeleton - A skeleton screen loading for Vue.js
vue-spinners - 💫 A collection of loading spinner components for Vuejs
vue-progress-bar - This is a cascading progress bar plugin based on vue
vue-loading-button - 👇 Straightforward button with slideout loading indicator

Progress Bar
A slim progress bar at the top of the page

vue-progressbar - A lightweight progress bar for vue.
vue2-loading-bar - Simplest Youtube Like Loading Bar Component For Vue 2.
vue-top-progress - Yet another top progress loading bar component for Vue.js.
vue-nprogress - Progress bars is based on nprogress for Vue.
vue-progress-button - Vue.js 2.x animated button component.
vue-simple-progress - A simple, flexible progress bar for Vue.js
vue-component-loading - Manage a loading state inside each component and display the global loading state with a progressbar.
vue-scroll-progress - Simple Vue.js plugin for page scroll progress bar
vue-read-progress - Customizable progress bar at the top of the page that shows the scroll progress
easy-circular-progress - Easy circular progress component with counting effect

Tooltip
Tooltips / popovers

v-tooltip - Easy tooltips with Vue 2.x.
vue-popper-component - Popper.js directive for Vue.js.
vue-directive-tooltip - Simple, flexible tooltip directive (based on Popper.js) 
vue-popperjs - VueJS 2.x popover component based popper.js
vue-tooltipster - VueJS 2.x tooltip component based tooltipster.js. Support html content, hover and hover+click events.
k-pop - Simple popover component based on popper.js. Highly customizable. Comes with themes. Supports custom triggers and can listen to any event.

Overlay
Overlay / modal / alert / dialog / lightbox / popup

vuedals - A VueJS (2.x) Plugin for multiple modals windows with a single component instance.
sweet-modal-vue - The sweetest library to happen to modals. Now available for Vue.js.
vue-js-modal - Simple to use, highly customizable, mobile friendly Vue.js 2.0+ modal with 0 dependencies.
vudal - Modal window for vue.js
vodal - A vue modal with animations.
vue-image-lightbox - A Vue image lightbox/gallery to display images nicely.
vue2-simplert - Vue 2 Simple Alert Component (SweetAlert Inspired) By Irfan Maulana
Vue-Semantic-Modal - Vue 2 Semantic-UI modal component without jQuery dependency
v-img - Easy to install image gallery.
vue-dialog-drag - Draggable dialog
vue-ya-semantic-modal - Yet another semantic-ui modal component for Vue2 without Jquery but with Vue transition
vue-pure-lightbox - Very simple lightbox plugin without any dependencies - only Vue! 🖼
v-viewer - Image viewer component for vue, supports rotation, scale, zoom and so on, based on viewer.js
vue-messagebox - Easy and made-to-order messagebox component on Vue.
vuejs-dialog - A lightweight, promise based alert, prompt and confirm dialog.
@hscmap/vue-window - Window UI Component for vue2.
vue-gallery - VueJS responsive and customizable image and video gallery, carousel and lightbox, optimized for both mobile and desktop web browsers. Based on blueimp-gallery
vue-swal - A small wrapper for integrating SweetAlert to Vuejs. (Compatible with SSR)
vue-modal-dialogs - ✨ Promisify your own dialogs!
vue-img-view - a plugin for Vue.js, you can drag / view / rotate pictures anywhere
vue-modaltor - most advance configurable modal component for vuejs
v-modal-backdrop - A simple generic backdrop component for vue
vue-cute-modal - A simple and easy to use Modal component for Vue applications.
v-dialogs - A simple and powerful dialog, including Modal, Alert, Mask and Toast modes, based on Vue2.x
vue-gallery-slideshow - Responsive gallery component for VueJS
vue-a11y-dialog - A Vue.js component wrapper for the accessible dialog a11y-dialog.
vue-slideout-panel - Stackable panel component for VueJS
v-gallery - A Vue2 plugin for images show in gallery or carousel
vue2-image-loader - A image lazyLoad loader component for vue2
vue-my-photos - A simple dependency-free image lightbox component with filtering capabilities
vue-img-orientation-changer - A Vue.js directive that automatically adjust your img to correct orientation.
vue-topmodal - A fully customisable, easy to use, Vue.js modal component. (Responsive, Stackable, Scrollable, Animated)
vue-modal 🖼 - Feed your objects array for multiple switchable modal content or quickly inline your content. A fully customisable vue modal component .
@innologica/vue-stackable-modal - Library for modal dialogs which can be stacked. Fully customizable and very easy to use.
vue-sweetalert2 - wrapper for sweatlaert2 with support for TypeScript, Nuxt and SSR

Parallax

vue-parallax - Scrolls an image slower than the window to create a neat optical effect.
vue-parallaxy - Vue.js component for parallax image scroll effects.
vue-mouse-parallax - A simple to use Mouse Parallax Component - Made with Vue.js
vue-parallax-js - Tiny vue component that adds a directive for parallax effect on elements.

Icons

vue-awesome - Font Awesome component for Vue.js, using inline SVG.
vue-material-design-icons - A collection of SVG Material Design icons as single file components.
vue-icon-font - A iconfont plugin for Vuejs (support Font-class and Symbol).
vue-ionicons - Vue Icon Set Components from Ionic Team.
vue-ico - Dead easy icons for Vue with drop-in browser support & selective bundling
mdi-vue - Material Design Icon components for Vuejs
vue-fontawesome - Font Awesome 5 Vue component
g-icon - Simple icon component for your svg icons (compatible with Font Awesome-like font toolkits)
vue-simple-line-icons - Simple Line Icons component for Vuejs
vue-country-flag - Vue component for country flag icons - vicon - Vicon is an simple iconfont component for vue.
md-svg-vue - Material Design Icons by Google for Vue.js & Nuxt.js (server side support (with caching), inline svg rendering, official icon names)
vue-lang-code-flags - Vue component which shows the flag of the country from which the language comes from
vue-zondicons - Vue component for the beautiful Zondicon svg icons
vue-eva-icons - Simply beautiful open source eva icons as Vue components.
vue-unicons - 1000+ Pixel-perfect svg unicons for your next project as Vue components.
vue-fa - Simple FontAwesome 5 Vue.js 2 component.
vue-cryptoicon - Beautiful pixel perfect 400+ cryptocurrency and 10+ Fiat currency icon.

Menu

vue-accordion - Simple accordion nav menu component for Vue.js.
vue-js-dropdown - Vue.js 2 dropdown menu component. Light, easy to use and extend, no external deps.
vue-slideout - Vue implementation of the popular library slideout
vue-quick-menu - This is web navigation component base on vue.js2.
@hscmap/vue-menu - Menu / Context Menu component for vue2.
vue-router-nav - Minimalistic responsive navigation bar that renders routes of vue-router.
vue-drawer-layout - A simple DrawerLayout component like Android has for Vue.js.
vue-simple-menu - Simple menu component with a set of basic functionality, which is enought in 80% of cases
vue-tree-navigation - Vue.js 2 tree navigation with vue-router support
bp-vuejs-dropdown - Vuejs => 2 dropdown. Easy to use, no external, optional.
vue-bulma-accordion - Simple, easily configurable accordion or collapsible styled with Bulma custom or built in icons available
v-selectmenu - A simple, easier and highly customized menu solution for Vue2.
vue-burger-menu - An off-canvas sidebar Menu component with different CSS animations.
vue-dynamic-dropdown - A Highly Customizable, easy-to-use elegant dropdown component
vue-navigation-bar - A simple, pretty navbar for your Vue projects.
vue-simple-search-dropdown - A simple searchable input dropdown component with no external dependency
@innologica/vue-dropdown-menu - Dropdown menu component for Vue. Any element can be dropdown trigger and anything can be dropded down content.
vue-menu-aim - Menu triangle select, aka Amazon

Minus Plus Input

minus-plus-input - A number input with plus minus; included for Vue.js v1 and v2.
vue-integer-plusminus - Integer input with increment and decrement buttons for vue 2.
vue-numeric-input - Number input component with controls.
vue-number-smarty - Number input that can change value on scrolling when field is focused.
vuetify-number-smarty - Number input that can change value on scrolling when field is focused (Vuetify.js implementation).

Carousel

vue-easy-slider - Slider Component of Vue.js.
vue-l-carousel - A responsive carousel(namely slider or swiper) component for Vue.js v2.x+.
vue-awesome-swiper - Swiper(slide) component for Vue.js(1.x ~ 2.x).
vue-lory - Vue Slider Component based on lory.
vue-slick - Vue component for Slick-carousel.
vue-flickity - A Vue Component for Flickity.js.
vue-carousel-3d - Vue Carousel 3D - Beautiful, flexible and touch supported 3D Carousel for Vue.js.
vue-carousel - A flexible, responsive, touch-friendly carousel for Vue.js.
vue-coverflow - A vue2.x coverflow component.
vue-agile – A carousel component inspired by Slick, written in Vue.js and vanilla JS only.
vue-tiny-slider – A carousel component created by ganlanyuan, written in Vue.js. No jQuery. Works in IE8+.
vue2-text-swimlane - A Text Swimlane plugin for Vue.js
vue-picture-swipe - Vue Picture Swipe Gallery (a gallery of image with thumbnails, lazy-load and swipe) backed by photoswipe.
vue2-siema - Plugin wrapper for the very tiny Siema carousel/slider library.
vue-flux - Image slider which comes with 20 cool transitions.
vue-glide - Vue slider & carousel component on top of the Glide.js
vue-owl-carousel - Vue component for Owl Carousel 2
vueper-slides - A touch ready and responsive slideshow / carousel for Vue JS.
vue-canvas-carousel - Vue canvas component for vuc-carousel
Hooper - Customizable accessible carousel slider optimized for Vue
Lingallery - Simple image gallery component for Vue which displays a large image with thumbnails below
vue-piece-slider - Animated slides in a fragmented look
vue2-photo-carousel - A photo carousel component for Vue2

Charts

vue-morris - VueJS component wrapping Morris.js.
vue-charts - Google Charts plugin for Vue.js.
vue-chartjs - Vue.js wrapper for Chart.js.
hchs-vue-charts - Based on Vue2.0 wrapper for ChartJs.
vue-echarts - ECharts component for Vue.js.
vuetrend - Simple, elegant spark lines for Vue.js.
vue-highcharts - Highcharts component for Vue.
vue-echarts-v3 - Vue.js(v2.x+) component wrap for ECharts.js(v3.x+).
vue-chartist - Vue.js 2.0 component wrap for Chartist.
g2-vue - Factory wrapper for using G2 easily in a Vue Component.
vuebars - Simple, elegant spark bars for Vue.js.
vue-d3-network - Vue component to graph networks using d3-force
vue2vis - Vue2 wrapper for Visjs.
vue-c3 - A reusable vue component for c3 charts
vue-d2b - Vue components for d2b charts. (Including axis, pie, sankey, and sunburst charts)
VueChart - A very simple Vue wrapper for Chart.
vue-chartkick - Create beautiful JavaScript charts with one line of Vue
d3vue - A D3 Plugin for Creating Reactive Data Visualizations in VueJS
vue2-frappe - A simple wrapper around Frappe Charts for VueJS
vue-google-charts - Reactive Vue.js wrapper for Google Charts lib
vue-graph - Data visualization library for dashboard implementation in Vue.js
vue.d3.sunburst - Reactive sunburst component based on D3.js
v-chart-plugin - A customizable component for adding D3 charts that binds to your components data.
vue-jqxchart - Charting component with Pie, Bubble, Donut, Line, Bar, Column, Area, Waterfall, Polar & Spider series.
toast-ui.vue-chart - Vue Wrapper for TOAST UI Chart.
vue-apexcharts - Vue.js component for ApexCharts.
vue-doughnut-chart - Doughnut chart component for Vue.js.
v-charts - Chart components based on Vue2.x and Echarts.
vue-css-donut-chart - Lightweight Vue component for drawing pure CSS donut charts.
vue-trend-chart - Simple trend charts for Vue.js
vueplotlib - Declarative, interactive, linked plot components
vgauge - A Vue Wrapper to GaugeJS - Create beautiful gauges
vue-plotly - Wrapper for plotly.js declarative charting library that ships with 20 chart types, including 3D charts, statistical graphs, and SVG maps.
vue-funnel-graph-js - Funnel graph drawing library for Vue.js. Create vertical and horizontal animated SVG funnel charts and add labels, values, legend and other info.
pure-vue-chart - Lightweight vue charts implemented without any chart library dependencies

Time
Display time / date / age

vue-timeago - A tiny timeago component for Vue.
vue-moment-jalaali - Jalaali Moment.js filters for your Vue.js project.
vue-countdown-timer - Added timezone conversion support.
vue-analog-clock-range - Analog clock range to show time difference.
vue-moment-lib - A simple Vue.js 2.0 MomentJS library (filters & globals) using the same momentjs API.
vuejs-countdown - A simple countdown timer component for vue js 2.0
vue2-flip-countdown - A countdown timer with flip effect for Vue 2.x
timeline-vuejs - A minimalist timeline for Vue
vue-awesome-countdown - Countdown plug-in with high performance and high accuracy for Vue 2.5.0+. Official site: https://vac.js.org
vue-clock2 - Display clock component for Vue.
vuemodoro - Pomodoro timer as single file Vue component.

Calendar
Display non-editable events in a Calendar

vue-fullcalendar - Vue calendar fullCalendar. No jQuery required. Schedule events management.
vue-event-calendar - A simple events calendar for Vue2, no dependencies except Vue2.
vue-calendar-picker - Lightweight calendar component for events display, period selection and date picker.
vue-lunar-calendar - A vue component for lunar calendar. Uses Moment.js for date operations.
vue-simple-calendar - Flexbox-based Vue month calendar compenent; supports multi-day events, localization, holiday emoji, drag/drop. No dependencies.
vue2-calendar - A simple full calendar component aimed at being flexibile and lightweight.
vue-jlunar-datepicker - A Chinese lunar datepicker component with festivals and solar terms.
vue-full-calendar - A complete fullcalendar.io wrapper for both Vue 1 and 2
v-calendar - Animated calendar/datepicker that displays regions, indicators and day popovers for simple & recurring dates.
vue-infinite-calendar - A simple infinite calendar implementation for Vue 2
vue-calendar - A simple calendar components for Vue 2.1.5+, support custom content. No dependencies.
vue2-event-calendar - An events calendar for Vue2, support customize event items and calendar header.
vue2-datePicker-infinite - An infinite datePicker for Vue2, easy to use and no dependencies.
vue2-slot-calendar - A vue 2 calendar, datepicker component which supported lunar or date event, bootstrap style.
quasar-calendar - A vue.js calendar using the Quasar framework that implements monthly, multi-day and agenda views.
vue2-datepicker - A beautiful datepicker / datetimepicker component for Vue2
vue-pikaday - VueJS wrapper component for Pikaday datepicker
vue-tuicalendar - VueJS wrapper component for tui.calendar calendar
vue-jqxscheduler - VueJS Scheduler component.
toast-ui.vue-calendar - Vue Wrapper for TOAST UI Calendar.
vue-functional-calendar - Lightweight, high performance calendar component(Date Picker, Date Range) based on Vue.
vue-cal - A Vue JS full calendar, no dependency, no BS. 🤘.
vue-draggableCal - Not your ordinary datepicker. A Vuejs draggable date selector with a fresh responsive design, mobile ready and 0 dependencies, 17kb gzipped
vue-material-year-calendar -  A full year (12 months on a page) calendar for Vue2. Uses dayjs.
vuelendar - Simple and clean calendar written in VueJS

Map

vue2-google-maps - Google maps component for vue with 2-way data binding.
vue2-leaflet - Vue 2 components for Leaflet maps.
vue-mapbox-gl - Vue 2.x component for Mapbox GL JS
vue-yandex-maps - Vue 2.x component for Yandex Maps
vue-baidu-map - Vue 2.x component for Baidu Maps.
vue-choropleth - Vue 2.x component to display a choropleth map.
vuelayers - Vue 2 components to work with OpenLayers.
vue-googlemaps - Vue 2.x components to integrate Google Maps.
vue-static-map - Vue 2.x simple component to generate an static google map
vue-mapbox - Vue 2.x wrapper around Mapbox GL JS library that provides vueish-way to interact with the map.

Audio / Video

Vue-APlayer - 🍰 Easy-to-config music player for Vue 2.x.
vue-audio - audio-tag wrapper; sound player component for Vue 2.x
vue-dplayer - A Vue 2.x video player component based on DPlayer.
vue-canvasvideo - A Vue 2.x component for video backgrounds and autoplay video on iOS/Safari.
vue-music - A Vue component base on html5 <audio>.
vue-audio-visual - Vue HTML5 audio visualization components.
vue-plyr - A set of Vue components for the plyr video & audio player.
v-playback - A Vue2 plugin to make video play easier.
vue-audio-recorder - Audio recorder for Vue.js. It allows to create, play, download and store records on a server
vue-video-section - A simple video header/section component for Vue. Good for video backgrounds and overlaying content on them.

Infinite Scroll

vue-infinite-loading - An infinite scroll plugin for Vue.js 1.0 & Vue.js 2.0.
vue-mugen-scroll - Infinite scroll component for Vue.js 2.
vue-infinite-scroll - An infinite scroll directive for vue.js.
vue-loop - An infinite content loop component for Vue.js 2.
vue-scroller - An infinite content loop component for Vue.js 2, including functionalities such as 'pull-to-refresh', 'infinite-loading', 'snaping-scroll'.
vue-infinite-list - An infinite list mixin can recycle dom for Vue.js 2
vue-infinite-slide-bar - ∞ Infinite slide bar component.
vue-virtual-infinite-scroll - A vue2 component based on Iscroll, supports big data list with high performance scroll, infinite load and pull refresh.

Pull-to-refresh

vue-pull-refresh - A pull to refresh component for Vue.js 2.0.
vue-pull-to - A pull-down refresh and pull-up load more and infinite scroll for Vue.js component.
vue-data-loading - Another component for infinite scroll and pull down/up to load data.
vue-quick-loadmore - A pull-down refresh and pull-up infinite scroll plugin for Vue.

Markdown

vue-markdown - A Powerful and Highspeed Markdown Parser for Vue.
vue-mavonEditor - A markdown editor based on Vue that supports a variety of personalized features.
vue-simple-markdown - A Simple and Highspeed Markdown Parser for Vue.
vue-simplemde - A wrapper around simplemde. Delightful editing for beginners and experts alike. Features built-in autosaving and spell checking.
toast-ui.vue-editor - Vue Wrapper for TOAST UI Editor.

PDF

vue-pdf - A pdf viewer based on mozilla's PDF.js
pdfvuer - A PDF viewer for Vue using Mozilla's PDF.js with text support. Demo

Tree

Vue.D3.tree - A Tree View based on D3.js
vue-json-tree-view - A JSON Tree View Component for Vue.js.
vue-tree - A Tree Component for Vue.js 2.X.
liquor-tree - Amazing Vue Tree component
vue-trees-ui - A Tree Ui Base On Vue.
Bosket - Collection of tree view components for front-end frameworks (Vue, React, Angular and Riot).
plantain-00/tree-component - A reactjs, angular and vuejs tree component.
sl-vue-tree - A simple customizable draggable tree component for Vue.js
vue-draggable-nested-tree - A powerful customizable draggable tree view component for Vuejs2 @phphe
vuejs-tree - A highly customizable VueJs tree viewer
vue-jstree - A Tree Plugin For Vue2 with beautiful icons and drag&drop
vue-vtree - Universal and flexible tree component for Vue.js
vue-json-component - JSON tree view with no dependencies, TypeScript support, and easy customization.
vue-tree-list - A vue component for tree structure

Social Sharing

vue-social-sharing - A Vue.js component for sharing links to social networks, work with Vue.js 1.X or 2.X.
vue-goodshare - Vue.js component for social share with beautiful button design. Simple install, extensive documentation, developer support, SEO friendly, clean code without scripts tracking user activity on the page, high speed. Work with Vue.js 2.x.
vue-socialmedia-share - A Vue.js component for sharing links to social networks, with Vue 2.X
vue-picture-sharesheet - A Vue Picture Sharesheet Component heavily inspired by the Image Sharesheet in Apple's Newsroom
vue-twitter - A Vue.js component for embed twitter widgets (e.g timeline, buttons)
vue-share-buttons - Vue.js component for placing buttons in your project using which you can share anything

QR Code

vue-qriously - A Vue.js 2 component to draw QR codes on an HTML Canvas using qrious.
vue-qart - The directive of vue 2.x for qart.js.
vue-qrcode-reader - A Vue.js 2 component which detects and decodes QR codes from a camera stream.

Search

vue-fuse - A lightweight plugin for fuzzy search library, Fuse.js
vue-instantsearch - The ultimate toolbox for creating instant-search experiences using Algolia.
vue-innersearch - A Vue.js wrapper for Elasticsearch
reactivesearch-vue - UI components for building data-driven apps with Elasticsearch

Miscellaneous

vue-avatar - An avatar component for vue.js.
vue-touch-ripple - Touch ripple component for Vue.js(1.x ~ 2.x).
vue-typer - Vue component that simulates a user typing, selecting, and erasing text.
vue-keyboard - Vue 2 virtual keyboard component.
vue-twentytwenty - Image comparison component, works with Vue.js 2.x
vue-cookie-law - Cookie info plugin for Vue.js 2.x
vue-gravatar - A dead-simple gravatar component for Vue.js 2.x
vue-clipboard2 - An easy to use clipboard.js binding for Vue.js 2.x
vue-flashcard - FLashcard component with animation for Vue.js 2.x 💡
vue-truncate-collapsed - A simple component that truncates your text and adds a 'Read More/Show Less' clickable for Vue.js 2.x
vue-kanban - A flexible drag and drop kanban board component
vue-letter-avatar - A simple and elegant letter avatar component for vue.js
vue-highlightjs - Syntax highlighting with highlight.js
v-clipboard - Simple, tiny and easy to use directive to save your models to clipboard (less than 2kb minified, no dependencies)
vue-invisible-recaptcha - Super easy integration for Google's Invisible reCAPTCHA
vue-embed - Embed component is based on embed.js for Vue 2.x, a component that embeds emojis, media, maps, tweets, gists, code, services and markdown.
vue-particles - Vue.js component for particles backgrounds
vue-uniq-ids - Vue.js 2.x plugin that helps to use id-related attributes with no side-effect
vue-multivue - Use multiple vue apps of the same class on the same page.
vue-affix - A Vue.js 2.x plugin that affixes an element in the window while you scroll, similar to Bootstrap Affix but much simpler and smarter
X-Browser-Update-Vue - A Vue.js browser-update plugin.
vue-query-builder - A UI component for building complex queries with nested conditionals.
vue-info-card - A simple and beautiful card component with an elegant spark line and CSS3 flip animation.
v-offline - Simple, tiny and easy to use detection of offline & online events for your Vue app (less than 390b minified)
vue-word-cloud - A word cloud generator.
vue-flat-surface-shader - A Vue component for flat surface shader
vue-easteregg - Easey add an easteregg to your vue app (default with konami code)
vue-barcode-scanner
vue-heatmapjs - A Vue directive for tracking and visualising mouse activity
vue-maze - An itty-bitty maze game made as Vue.js component
vue-drag-verify - This is a vue component, which is sliding to unlock for login or sign up.
vue-balloon - Vue components for creating fixed, zoomable containers in the corner of a page. Similar to the mail composition wrapper used in gmail.
vue-sticker - Sticker effect to any directions
v-rating - ⭐️ Rating component in Semantic-UI made with VueJS (< 500B gzipped, blazing fast)
vue-content-placeholders -  Composable components for rendering fake (progressive) content like facebook in vue
vue-page-designer - Vue component for drag-and-drop to design and build mobile website.
vue-creativecommons - CreativeCommons.org Vue.js components library.
vue-status-indicator - A Vue.js component to show status indicator as colored dots.
vue-google-adsense - Vue.js Google Adsense Component with InFeed and InArticle Ads support
emoji-vue - Emoji 😎👌🏻 dropdown for Vue.js project
vue-chessboard -  Chessboard vue component to load positions, create positions and see threats.
vue-mindmap - Vue component for mindnode maps.
v-currency - Vue component for formatting currency.
vue-emoji-picker - Highly customizable unicode emoji picker 🔥🚀
vue-8-puzzle - An itty-bitty slide puzzle game made as Vue.js component
vue-e164 - Customizable phone formatter with E.164 standart support
vue-pgn - Vue.js component for viewing chess games in pgn format
vue-avatar-editor - Resize, rotate and crop your uploaded avatar using a clear user interface.
vue-connection-listener - Vue event bus plugin listening for online/offline changes.
vue-sauce - ""View source"" directive for Vue.
vue-prom - Vue promise wrapper component.
numeric-keyboard - Numeric keyboard for mobile browsers.
vue-zoom-on-hover - Image zoom on mouse hover
vue-responsive-image - A Vue component that lets you quickly create responsive image tags with an optimal number of image sources for all devices.
vue-highlight-text - Vue component for highlight multiple instances of a word
vue-cast-props - Provides a convenient way of converting props to common data types.
vue2-heropatterns - A Vue2 implementation allowing you to add the popular Hero Patterns onto any Div
vue-link - One component to link them all 🔗 (treat external and internal links same)
vue-identify-network - ⚡️Identify what kinda internet your users are using!
vue-cloneya - A vue component to clone DOM elements
vue-survey-builder - Survey builder for vue.js applications
vue-if-bot - A lightweight component to hide/show content to clients based on the user agent
vue-clampy - Vue.js (2+) directive that clamps the content of an element by adding an ellipsis to it if the content inside is too long.
vue-cookie-accept-decline - Show a banner with text, a decline button, and an accept button on your page. Remembers selection using cookies. Emits an event with current selection on creation. Good for GDPR requirements.
@lossendae/vue-avatar - An avatar component for VueJS 2.0.
vue-text-highlight - Text highlighter library for Vue.js 💄
vue2-hammer Hammer.js wrapper for Vue 2.x to support mobile touch..
vue-countable - Vue binding for countable.js. Provides real-time paragraph, sentence, word, and character counting.
v-show-slide - A Vue.js directive for animating an element to and from height: auto in a sliding motion.
vue-swipe-actions - iOS style swipe actions for Vue.js
vue-friendly-iframe - A Vue js component for creating super fast loading, non-blocking iframes.
vue-beautiful-chat - A simple and beautiful Vue chat component backend agnostic, fully customizable and extendable.
vue-magnifier - A simple image zooming / magnifying component for Vue.js 2.x.
vue-highlight-words - Vue component to highlight words within a larger body of text. Ported from react-highlight-words
vue-tags-ball - Create a beautiful and spherical tag with this plugin
vue-rippler - Simple Vue.js plugin for custom ripple effect
vue-contacts - Mobile contacts component for Vue
basic-vue-chat - Easy to use Vue.js chat
vue-resize-text - A vue directive which automatically resize font size based on element width.
vue-github-profile - A vue component to view the profile and repos of determined user
vue-niege - 🎄 🎅 Single File Vue component to add a snow storm through a canvas.
vue-dynamic-star-rating - A highly dynamic vue stars rating component, like google play rating ⭐️ ⭐️ ⭐️ ⭐️ ⭐️
vue-katex - Simple plugin for math typsetting using KaTeX in Vue.js
vue-canvas-identify - Vue canvas component for vuc-identify
vue-canvas-material - Vue canvas component for vuc-material
vue-baberrage - A simple Barrage plugin Base on Vue.js😎
vue-terminal-ui - 🖥Terminal UI emulator Vue: custom and basic commands
vue-command - A fully working Vue.js terminal emulator
vue-ribbon - Vue component for GitHub ribbons
avatio-avatar - Vue component for illustrated avatars - used by Avatio
vue-jazzicon - A dead-simple Jazzicon component for Vue.
vue-star-rating - A simple, highly customisable star rating component ⭐️ ⭐️ ⭐️
vue-fixed-header - Simple and cross-browser friendly fixed header component for Vue.js written by TypeScript.
vue-particle-effect-buttonsA bursting particles effects buttons component.
vue-insomnia - Prevent display screen from sleeping (wake lock).
vue-car-plate-keyboard - A car license plate number keyboard for VueJS 2.x.(车牌号输入键盘，支持新能源车牌🚗🚗🚗)
vue-dataflow-editor - Vue2 dataflow graph editor
cool-emoji-picker - A fast plug-n-play [Tw]emoji Picker (+textarea for Twemoji rendering) component for Vue.

Tabs

vue-tabs - Simple tabs and pills.
vue-swipe-tabs - A touch swipe tab component for vue.js(vue2).
vue-tabs-component - An easy way to display tabs with Vue.
vue-k-tabs - A simple tabs components with Gitlab design.
vue-tabs-with-active-line - Simple Vue 2 component, that allows you to make tabs with moving bottom line
vue-tabs-chrome - A Vue component for Chrome-like tabs.

Form
Let the user create & edit data
Phone Number Input Formatter

vue-phone-number-input - A beautiful input to format & valid phone number with country code 🔥

Picker

vue-smooth-picker - A smooth picker component for Vue 2.x, like iOS native datetime picker.

Generator

FormSchema Native - Generate a form using JSON Schema and Vue.js
vue-awesome-form - A vue.js component just like json-editor
vue-generator - Initial router and components for the Vue project.
vue-form-json - Generate a vue form with validation and bulma style, from json
form-create - Form builder with dynamic rendering, data collection, validation, and submission capabilities, supporting json data
element-form-builder - Build element-ui forms with JSON Schema.
ncform - a very nice configuration generation way to develop form
Laraform - Advanced form builder for Vue.js with Laravel support
vue-ele-form - Vue DataForm, based on element-ui

Date Picker
Date / datetime / time Picker

vue-datepicker - [unmaintained] Calendar and datepicker component with material design for Vue.js.
vue2-timepicker - [unmaintained] A dropdown time picker (hour|minute|second) for Vue 2.x, with flexible time format support.
vuejs-datepicker - A simple Vue.js datepicker component. Supports disabling of dates, inline mode, translations.
vuedt - [unmaintained] Crazy lightweight (5.5kb!) Vuejs Date and Time picker component with nice animations and not too much fuzz.
vue-flatpickr-component Vue.js component for flatpickr datetime picker
vue-bootstrap-datetimepicker Vue.js component for eonasdan-bootstrap-datetimepicker
vue-jalaali-datepicker - Jalaali calendar and datepicker for vue.js 2.
vue-date-picker - A vue date picker component inspired by material design
vue-monthly-picker - Vue.js component for month and year picker only
vue-hotel-datepicker - A responsive date range picker that displays the number of nights selected, allows custom check-in/check-out rules, blocking dates, localization support and more.
vue2-persian-datepicker - An awesome Persian datepicker component for vue. کامپوننت انتخاب تاریخ برای ویو.
vue-datetime - Mobile friendly datetime picker for Vue. Supports date, datetime and time modes, i18n and disabling dates.
vue-rangedate-picker - Range date picker with simple usage
v2-datepicker - A simple datepicker component based Vue 2.x.
vue-datepicker-local - A Beautiful Datepicker Component For Vue2.
vue-airbnb-style-datepicker - A Vue datepicker with a similar look and functionality as the popular AirBnb datepicker. Lightweight, configurable and good browser support!
vue-persian-datetime-picker Persian material datepicker. Supports datetime, date, time, year, month.
VCalendar Very customizable and powerful calendar/datepicker component with many features and good documentation.
@owumaro/vue-date-range-picker - A vue component using Bootstrap 4 styles for date range selection
vue-datepicker-mobile - A mobile friendly datepicker for vue2. 🇨🇳 select one day or range of date and custom it that you wish.
vue-draggable-cal - Not your ordinary datepicker. A Vuejs draggable date selector with a fresh responsive design, mobile ready and 0 dependencies, 17kb gzipped.
vue-vanilla-datetime-picker - Datetime picker for Vue.
vue2-daterange-picker - Vue2 date range picker based on bootstrap-daterangepicker (no jQuery dependency)
vue-timeselector - Fully and simply customizable powerful time picker component for Vue.js.
vue-date-picker - Lightweight datepicker component for Vue 2.x.
vue-ctk-date-time-picker - A beautiful VueJS component to pick date & time (with range mode) 🆕
simple-vue2-datetimepicker - A simple, easy to use vue.js component for date and time picking. 🆕
vue-business-hours - Vue component for selecting business hours in an administration panel or dashboard.
material-vue-daterange-picker - a daterange picker of Material Design style for Vuejs 2.x, which is compatible with vuetify and friendly for mobile.
vue-datepicker - A clean & responsive datepicker with Material Design style for Vuejs 2.x. (date/month/quarter && date range picker) 🆕

Select

vue-select - A native Vue.js component that provides similar functionality to Select2 without the overhead of jQuery.
vue-multiselect - Universal select/multiselect/tagging component for Vue.js.
stf-vue-select - most flexible and customized select Vue2
vue-select-image - Vue 2 Component for selecting image from list
@riophae/vue-treeselect - A multi-select component with nested options support for Vue.js.
@k186/pd-select - A mobile UI component like IOS picker for Vue 2.x,can be wheel pick what ever you defined.
vue-dropdowns - A minimalistic and adaptable way to display select boxes if using objects for vue2.x
v-cascade - A lovely component of cascade selector with Vue 2.x (Support both of PC and Mobile)
vue-multi-select - A custom component to make select/multiselect for Vue2.
v-region - A simple region selector, provide Chinese administrative division data.
v-selectpage - A powerful selector for Vue2, list or table view of pagination, use tags for multiple selection, i18n and server side resources supports.
vue-cool-select - Bootstrap / Material Design theme, support slots, autocomplete, events, validation and more.
@myena/advanced-select - Single/Multiple Select component with search, controls for (de)select all and a Bootstrap 3 theme
@alfsnd/vue-bootstrap-select - Vue version of bootstrap-select.

Slider

vue-slider-component - Slider for vue1.x and vue2.x.
vue-circle-slider - Circle slider component for vue2.x.
vue-netflix-slider - A Netflix like slider.
vue-slide-bar - Very simple vue slider bar component.
textra - Vue js add-on to slide text.
vue-knob-control - A rotary knob control for Vue.js

Drag and Drop

vuedraggable - Vue component allowing drag-and-drop sorting in sync with View-Model. Based on Sortable.js.
vue-dragula - Drag and drop so simple it hurts.
vue2-dragula - A vue-dragula fork for Vue2, with a lot of improvements.
awe-dnd - A sortable list directive with Vue.
vue-draggable-resizable - Vue2 component for draggable and resizable elements.
vddl - Vue components for modifying lists with the HTML5 drag & drop API, supports VueJs versions 1 and 2.
vue-drag-drop - A minimal and lightweight wrapper for the HTML5 Drag and Drop API.
vue-swing - A swipeable cards interface, as seen in apps like Jelly and Tinder.
vue-slicksort - A dependency-free set of mixins for animated, touch-friendly, sortable lists
draggable-vue-directive - A simple directive to handle drag and drop of any Vue component.
vue-smooth-dnd - Vue wrappers of smooth-dnd library. drag and drop, sortable library covering for many cases.
vue-drag-resize - A dependency-free Vue component for draggable and resizable elements with aspect ratio, reactive props etc
vue-drag-it-dude - Vue2 component, that allows you to drag object wherever you want.
vue-draggable - Vue Drag and Drop library without any dependency. Simple and easy to use.
vue-nestable - A simple drag & drop hierarchical list made as a vue component.
vue-draggable-nested-tree - A powerful customizable draggable tree view component for Vuejs2 @phphe

Autocomplete
Autosuggest / autocomplete / typeahead

vue-instant - Vue instant allows you to easily create custom search controls with auto suggestions for your vue 2 applications.
v-autocomplete - Autocomplete component for Vue.js
vue-awesomplete - Vue wrapper for Awesomplete
vue-auto-complete - Autocomplete for Vue2. Works with objects or api calls.
vue-autosuggest - WAI-ARIA complete Autosuggest component with full customization over rendering and styling.
v-autosuggest - A simple modular Vuejs component that autosuggest input from a dynamic or static data querying.
autocomplete - Simple Autocomplete component for Vue.js 2.*
vue-infinite-autocomplete - Vue infinite-autocomplete wrapper for Vue.js 2.*
vue-simple-suggest - Simple yet feature-rich autocomplete component for Vue.js
v-suggest - A Vue2 plugin for input content suggestions, support keyboard to quick pick.
vue-bootstrap-typeahead - An typeahead/autocomplete component for Vue2 using Bootstrap 4 CSS.

Type Select
Let the user select a tag / something while typing

vue-input-tag - Vue.js 2.0 Input Tag Component.
v-distpicker A flexible, highly available district picker for picking provinces, cities and districts of China for Vue.js 2.x.
vue-img-inputer A graceful, highly customizable img type input for Vue 2
vue-img-preview An image input preview component in vue 2
v-image 📷 Tiny little component for input type=file (< 1kb, gzipped)
@voerro/vue-tagsinput A simple tags input Vue.js 2 component with typeahead/autocomplete
vue-tag-selector - Tag-like input. Light, customizable and handles REGEX validation!

Color Picker

vue-color - Vue Color Pickers for Sketch, Photoshop, Chrome & more.
vue-swatches - Help the user picking beautiful colors!
radial-color-picker - Minimalistic color picker with a focus on size, accessibility and performance.
vue-color-picker-board - Vue Color Picker component designed for humans!
verte - A Complete Vue.js Color Picker Component.

Switch
Switch / on/off toggle / checkbox

vue-switches - An on/off switch component for Vue.js with theme support.
vue-js-toggle-button - Vue.js 2.0+ toggle / switch button - simple, pretty, customizable.
vue-checkbox-radio - A Vue component to easily styling checkbox and radio inputs.
vue-enhanced-check - Vue component to redesign/labelize checkbox/radio, including toggle/switch button.
pretty-checkbox-vue - Implementation of pretty checkbox 3(A pure CSS library to beautify checkbox and radio buttons) components for Vue.js 2.2+.
vue2-collapse - Vue Collapse is a flexible content toggling plugin for the accordion lists or any other conditional content rendering.
vue-badger-accordion - A wrapping Component for Badger Accordion for Vue.js 2.0+
vue-loading-checkbox - A highly customizable Vue.js checkbox UI component with loading state
vue-rocker-switch - A customizable rocker switch component for Vue.js.
vue-toggle-btn - A Highly Customizable, easy-to-use elegant toggle/switch button component

Masked Input

vue-masked-input - Masked input component for Vue.js.
vue-text-mask - Input mask for React, Angular, Ember, Vue, & plain JavaScript.
vue-ip-input - An ip input implemented by vuejs.
vue-numeric - Input field component to display currency value based on Vue.
awesome-mask - Mask directive based on a pure and simply VanillaJS implementation
v-money - Tiny (<2k gzipped) input/directive mask for currency
vue-autonumeric - A Vue.js component that wraps the awesome AutoNumeric input formatter library
vue-inputmask - Vue.js directive to add Robin Herbots' inputmask library to your inputs (vanilla javascript).
vue-input-number - A custom input number component for Vue.js 2.
v-unicode - Vue directive to restrict an input by unicode values.
vue-cleave-component - Vue.js component for cleave.js
vue-ip - An ip address input with port and material design support
vue-r-mask - Directive with template similar to javascript regular expression.
vue-input-code - Base on Vue.js 2.0+ verification code input component.
label-edit - Inspired by Trello. Click to show editable input and return the value changes. This is a Vue Component.
vue-jquery-mask - Vue.js v2.x component for jQuery Mask Plugin
vue-the-mask - Tiny (<2k gzipped) and dependency free mask input for Vue.js
vue-canvas-input - Vue canvas component for vuc-input
vue-currency-input - Easy input of currency formatted numbers for Vue.js.
vue-restricted-input - Input mask library for vue.js based on restricted-input

Rich Text Editing

vue-quill-editor - Quill editor component for Vue2.
vue-mobiledoc-editor - A mobiledoc editor component toolkit for Vuejs.
vue2-medium-editor - A MediumEditor component for Vue 2.
vue-froala - VueJS wrapper for Froala Editor.
vue-froala-wysiwyg - Official VueJS plugin for Froala WYSIWIG HTML Editor.
vue-at - At.js for Vue.
vue-wysiwyg Lightweight, fast & extensible WYSIWYG editor
vue-trumbowyg Vue.js component for Trumbowyg WYSIWYG editor
vue-pell-editor Vue.js component for Pell WYSIWYG editor
vue-tinymce-editor Tinymce editor component for Vue2.
vue-mce - tinymce editor component for VueJS.
Vue2-Editor - HTML Editor using Vue.js and Quilljs
vue-codemirror - A Codemirror component for Vue2.
vue-easy-tinymce - A simple and powerful package for easy usage of tinymce in Vue.js project.
vue-highlightable-input - Highlight and style text as you're typing
vue-trix - Simple and lightweight Trix rich-text editor for Vue.js
tiptap - A renderless and extendable rich-text editor for Vue.js
toast-ui.vue-editor - Vue Wrapper for TOAST UI Editor.
ckeditor5-vue - An official CKEditor 5 rich text editor component for Vue.js.
yimo-vue-editor - A wangEditor2 component for Vue2.
vue-mathlive A MathLive math editor (mathfield) for Vue.hjs

Image Manipulation
Edit images

vue-core-image-upload - A vue plugin for image to crop and upload.
vue-croppa - A simple straightforward customizable lightweight mobile-friendly image cropper for Vue 2.0.
vue-cropper - A picture clipping plugin for vue2.0
toast-ui.vue-image-editor - Vue Wrapper for TOAST UI Image Editor.
vue-quick-cropper - Vue mobile avatar upload cropping plugin can choose cropping area and zoom.
vue-canvas-image - Vue canvas component for vuc-image
vue-croppie - Yet another image cropper
vue-slim-cropper - 💇 A simple and elegant mobile image crop upload component for Vue 2.x.
vue-advanced-cropper - An advanced cropper that gives you opportunity to create almost any cropper that you desire

Display images

vue-cloudinary - A vue (2.0) plugin that offers a reusable directive to get images from Cloudinary (https://cloudinary.com) with dynamic manipulation (resizing/cropping/effects/watermarking/scaling/formatting) and optimization (webp/png/auto quality/auto retina).
img-Vuer - An Mobile-First image viewer/gallery for Vue2
vue-image-loader - A vue loader/progressive image plugin like Medium.
vue-load-image - display loader during image loading, as well as by display alternate content when the image fails to load.
vue-image-painter - 🙋 Image magic animation drawing effect component for Vue 2.x.

Video Manipulation

vue-playlist - A lightweight vue (2.0) component with no dependancies that offers truly seamless html5 video playback. The one and only working solution for seamless video play done with vanilla JS. It takes an array of videos and stitches them together into a single video.

File Upload

vue-clip - Simple and hackable file uploader for VueJs. Supports Vue >= 2.1.
vue-simple-upload - Simple File upload component for Vue.js.
vue2-multi-uploader - A drag and drop multiple file uploader component that uses Vue.js v2 and Axios. Uploader shows file names, sizes and total size of files added. It also allows setting a minimum required number of files to upload.
vue-dropzone - A Vue.js (vue2) component for Dropzone.js - a drag’n’drop file uploads utility with image previews.
vue-transmit - A purely Vue.js drag & drop uploader component based on Dropzone.js for Vue 2.0
vue-upload-component - Vue upload component, Multi-file upload, Upload directory, Drag upload, Drag the directory. Supports  Vue >= 2.0
vue-uploader - A Vue.js upload component powered by simple-uploader.js
ic-firebase-uploader - A clean multi-file upload component for Firebase storage.
vuejs-uploader - A resumable multipart file uploader for HUGE file uploads.
vue-filepond - A Vue.js component for FilePond - a file upload library that can upload anything you throw at it.
v-uploader - A Vue2 plugin to make files upload simple and easier, you can drag files or select file in dialog to upload

Context Menu

vue-context-menu - A context menu component for vue js.
vue-lil-context-menu - A flexible lil context menu component for Vue.
vue-mouse-menu - A mouse-menu component for vue 2+.
@hscmap/vue-menu - Menu / Context Menu component for vue2.
vue-context - A simple but flexible context menu for vue js.
vue-simple-context-menu - Simple context-menu component built for Vue. Works well with both left and right clicks.
vue-context-menu-popup - Context Menu popup for Vue 2. Works on right click or can be triggered programatically.
@kiyoaki_w/vue-context - A customizable context menu component built for Vue2, supporting fontawesome icons.

Miscellaneous

vue-gmaps - Search places and address using Google Maps API.
vuep - A component for rendering Vue components with live editor and preview.
vue-places - Places component is based on places.js for Vue 2.x. Turn any input into an address autocomplete.
vue-password-strength-meter - Password strength meter based on zxcvbn in vue.js.
vue-float-label - Float label pattern for Vue.js.
vue-longpress - A VueJS (2.x) button component that requires you to keep pressing to confirm a given action.
vue-google-autocomplete - A Vue.js (2.x) autosuggest component for the Google Maps Places API.
vue-ip-input - An ip input component for Vue.js 2.x
vue-default-value - Vue.js 2.x directive to set a default value for editable elements with no affect to the model state
vue-model-autoset - A Vue.js plugin to workaround Vue limitation in observing dynamically added properties with v-model directive
vue-submit - Simple implementation of Ladda (1, 2) in less than 90 lines of code with no dependencies.
vue-rate - Rate component for Vue
vuetify-google-autocomplete - A Vuetify ready Vue.js (2.x) autosuggest component for the Google Maps Places API.
vue-ripple-directive - Material Ripple Effect as Vue Directive.
vue-fab - Vue Floating Action Button.
vue-complexify - Vuejs porting library from jquery.complexify.js.
vue-mc - Models and Collections for Vue.js
vue-stars - Highly customizable rating control (using stars or other characters)
vue-confirmation-button - Customizable confirmation button that requires users to read messages before performing an action
vue-poll - A Vue.js component for voting
vue-diagrams - Diagram component for vue.js, inspired by react-diagrams
vue-easy-polls - A Vue.js component for creating polls, voting and showing results. It’s easy to implement and easy to customize.
vue-m-button - A beautiful button component for vue.
vue-long-click - Long click (long press) directive library for vue, support mobile and desktop.
vue-ui-predicate - A rules editor, generic filtering UI, predicates component for Vue JS.
vue-mobile-detection - Vue.js prototype function this.$isMobile() that returns a Boolean value depending on whether or not the user is browsing with a mobile.
vue-input-contenteditable - A Vue component wrapper for contenteditable with all the features you normally expect. Make beautiful inputs without the restrictions of input[type='text'].

Wizard

vue-form-wizard - Tab based component which can replace classic bootstrap & jQuery form wizards
vue-stepper - A simple stepper with simple actions such as next, back and end to perform simple forms.
vue-stepper-component - A fully customizable Stepper component with Vuex support and Zero dependencies.

CSV

vuecsv - A Simple CSV Downloader from json with option modal panel component.

Comment System

vue-comment-grid - 💬 Responsive Vue.js comment system plugin that built with CSS Grid and Firebase REST API + Authentication.

Canvas

vue-easeljs - Data-driven control over an HTML5 canvas element.
vue-canvas-effect - A simple, canvas effect collection for Vue.js.
vue-konva - Vue & Canvas - JavaScript library for drawing complex canvas graphics using Vue.
vue-html2canvas - Vue mixin to capture html and convert it to an image using Html2Canvas.
vue-canvas-nest - A Vue.js component for canvas-nest.
vue-signature-pad - 🖋 A Vue Signature Pad Component

Link Preview

link-prevue - Flexible component for generate a link preview.

Tour

vue-tour - Lightweight and customizable tour plugin
vue-page-guide - Page tour / guide plugin with directive

UI Layout
Layout for the overall / main view

vue-waterfall - A waterfall layout component for Vue.js.
vueisotope - Vue component for isotope filter & sort magical layouts.
vue-grid-layout - A draggable and resizable grid layout, for Vue.js.
vue-drag-zone - Drag Zone component for Vue.js(2.x).
vue-masonry - Vue.js directive for masonry blocks layouting.
vue-fraction-grid - Flexbox based responsive fraction grid system for Vue.js.
vue-virtual-scroll-list - A vue (2.x) component support big data by using virtual scroll list.
vue-virtual-scroller - Component to scroll a large amount of elements efficiently (Vue 2.x).
vue-virtualscroll - [Vue 2.x] component to virtual scroll things.
vue-inview - [Vue 2.x] Viewport, get notification when DOM element is entered or leave.
dnd-grid - A vuejs grid with draggable and resizable boxes
vue-extend-layout - Extend the default layout or create custom layouts for the pages of your Vue.js SPA
vue-masonry-css - Vue.js Masonry layout component powered by CSS, dependency free
vue-fullpage.js - Official fullPage.js component for Vue.js.
vue-virtual-collection - Vue component for efficiently rendering large collection data.
autoresponsive-vue - Auto responsive grid layout library for Vue.
VueFlex - A flexbox grid system.
v-chacheli - A Vue.js component to create and display custom dashboard-like grid layouts.
vue-grid-styled - A lightweight set of functional grid components, ported from React's grid-styled
simple-grid - Vue component for grid layout,support flex.
vue-container-component - Simple container component inspired on Bootstrap Container
vue-colcade - A small wrapper for integrating Colcade grid layout to Vuejs.
vue-ads-layout - A small library of Vue components to quickly generate a responsive web application layout with toolbar, left/right drawers and a footer. All components can be positioned fixed or relative.
vue-magic-grid - A tiny port of Magic Grid for Vue.js 2.
vue-splitter-pane - A Vuejs component which renders two slots in a adjustable split arrangement (vetical or horizontal).
splitpanes - A Vue JS reliable, simple and touch-ready panes splitter / resizer.
vue-mock-layout - Easily mock the layout of your Vue apps.
vue-simple-drawer - A tiny drawer panel with bounced animation, nest supported and theme customized. directions: left/right/up/down
vue-grd - Simple, Light-weight and Flexible Vue.js component for grid layout.

Frameworks
Responsive
Set of components + responsive layout system

quasar-framework - Quasar Framework. Build responsive websites, hybrid mobile Apps (that look native on Android and iOS) and Electron apps using same code, with VueJs 2.
vue-material - Material design for Vue.js.
vuetify - Material Component Framework for Vue.js 2.
muse-ui - Material Component library for Vue.js 2.
buefy - Components based on Bulma framework.
element-ui - A Vue.js 2.0 UI Toolkit for Web.
vue-bulma-components - Easily use bulma class syntax with vue components.
iview-ui - A Vue.js 2.0 UI Framework for web.
AT-UI - A fresh and flat UI-Kit specially for desktop application, made with ♥ by Vue.js 2.0
v-semantic - Implementation of semantic-ui for Vue
bootstrap-vue - Implementation of bootstrap-4 grid and components for Vue.js 2.
fish-ui - A Vue.js 2.0 UI Toolkit for Web
zircle-ui - A frontend library to develop zoomable user interfaces.
vue-mdc-adapter - Material Components integration for Vue.js as per MDC Team's guidelines.
Material Components Vue - wrapper around material-components-web for Vue.js
VueFace - A Vue.js 2.0 UI Component library for Web
vuesax - Frontend vue Components for Vue.js.
vuecidity - UI component framework for Vue.js 2.0
ant-design-vue - An enterprise-class UI components based on Ant Design and Vue 2.5.0
heyui - (https://www.heyui.top/en) - A Vue.js 2.0 UI Toolkit for Web.
Carvue.js - IBM's Carbon Design System for Vue.js
BalmUI - Next Generation Material UI for Vue.js
Osiris UI - 🎨 A Vue.js 2.0 universal responsive UI component library
N3-components - Beautiful Web Components built with Vue 2
Shards Vue - ✨ Sleek & UI Components Library based on the Bootstrap 4 Framework.
Fundamental Vue - Components based on SAP Fiori Fundamentals.
Framevuerk - 🚀 Fast, Responsive, Without Dependencies, Both Direction Support and Configurable UI Framework based on Vue.js.
@Carbon/vue - Carbon Design System components from the @carbon team.
NutUI - A Vue.js 2.0 UI Toolkit for Mobile Web
Inkline - Inkline is a modern UI/UX Framework for Vue.js designed for creating flawless responsive web applications.
vue-awesome-mui - A Vue.js 2.0 MUI Component for Web
MDBootstrap - Powerful UI toolkit based on the latest Bootstrap 4 and Vue 2.6.10, providing a set of slick, responsive page templates, layouts, components and widgets to rapidly build responsive, mobile-first websites and apps.

Mobile
UI frameworks for mobile

Framework7-Vue - Build full featured iOS & Android apps using Framework7 & Vue.
vux - [Chinese] Vue UI Components based on WeUI.
vue-onsenui - Mobile app development framework and SDK using HTML5 and JavaScript. Create beautiful and performant cross-platform mobile apps. Based on Web Components, and provides bindings for Angular 1, 2, React and Vue.js.
Weex - Weex provides the ability to publish cross platform, so web, Android, and IOS apps can use the same API development functions.
weex-eros - [Chinese] Eros is a app solution based on Weex and Vue, which enables you to use API of Vue, simple and quick development of small and medium app.

Set of components for mobile

mint-ui - Mobile UI elements for Vue.js.
vant - A Vue.js 2.0 Mobile UI From YouZan.
cube-ui - A fantastic mobile ui lib implement by Vue.js 2.
mand-mobile - A mobile UI toolkit, based on Vue.js 2, designed for financial scenes.

Component Collections
Set of components without layout system

vue-mdc - Material Components Web for Vue.js.
keen-ui - A lightweight collection of essential UI components written with Vue and inspired by Material Design.
vue-admin - Vue Admin Panel Framework, Powered by Vue 2.0 and Bulma 0.3.
vuikit - UIkit with all the power of Vue.
uiv Bootstrap3 components implemented by Vue2.
wffranco/vue-strap - Bootstrap 3 components built with Vue.js 2
jsmod-vue-pc - Highly scalable web components for vue 2.0
guilhermewaess/SemVue - Semantic-ui Modules implemented with Vue 2
office-ui-fabric-vue - Office UI Fabric implementation for Vue.js
vuestic-admin - Vue Admin Dashboard with collection of custom components. Built with Vue 2 and Bootstrap 4
Semantic UI Vue - Semantic UI integration for Vue
vuesax - Frontend vue Components for Vue.js.
Essential JS 2 for Vue - Full featured 45+ Vue.js components which includes Data Grid, Chart, Scheduler and Diagram components etc.
Banshee - A mostly renderless Vue UI component and utility framework that ships with no CSS.
vue-atlas - A library of beautiful Vue components.
DevExtreme Vue Components - 65+ responsive and feature-complete Vue UI components with customizable Material Design and Bootstrap compliant themes.
jqwidgets - 70+ Vue.js 2.0 UI Components with Material Design themes.
vue-uix - UI collection for web page implementation in Vue.js
vuedarkmode - A Minimalist Dark Design System for Vue.js 🎨
Kendo UI for Vue – Over 70 UI components, including a Grid, built for business applications. Fully responsive with support for several Design Languages including Material Design and Bootstrap.
Vuent - Vue.js components implementing Microsoft Fluent Design
bpit/vue - Vue components lib which is focused on effects
vue-tailwind - Vue components with customizable classes ready for TailwindCSS, but compatible with any framework.

Admin Template
Set of admin template

iView Vue Admin - iView Vue Admin / An admin portal template based on iView 2.x
element Vue Admin - element Vue Admin / An admin portal template based on Element UI 2.x
vue-element-admin - A magical vue admin based on Element UI 2.x
D2 Admin - An elegant backstage template build by vue Online Demo
rest-admin - Restful Admin Panel Based on Vue and Bootstrap 4 Online Demo
Shards Dashboard Lite Vue - ✨ Modern admin template featuring dozens of custom components and templates.
Vue Material Admin - A vue material design admin template
element-admin - A dead simple but powerful vue admin with Vue CLI 3 and element-ui.

Server-side rendering

Nuxt.js - Versatile Vue.js Framework.
Ream - A minimalistic framework for building server-rendered and static websites.
Universal vue - Vue CLI plugin to create universal Vue applications with ease

Static website generator

VuePress - Minimalistic Vue-powered static site generator.
Peco - A static website generator for humans. UNMAINTAINED
Saber - A static website generator for building blazing fast websites with Vue.js.
Gridsome - Build super fast, modern websites with Vue.js

Other

app-framework - IOS and Android Apps with HTML & JavaScript - develop, build and deploy - free and open source.
Myfirebase - A decoupled Single page application Framework which is highly compatible with google firebase.
Vue-Access-Control Frontend access control framework based Vue.js 2.
Basys Toolbox for building full-stack Vue.js apps
CabloyJS The Ultimate NodeJS Full Stack Business Development Platform, based on KoaJS & EggJS & VueJS & Framework7

UI Utilities
Event Handling
Handling of user events (scroll, click, key strike, ...)

vue-shortkey - Vue-ShortKey - plugin for Vue.js.
vue-throttle-event - Throttle events based on requestAnimationFrame.
vue-waypoint - Waypoint component for Vue, this is the easiest way to trigger a function when you scroll.
vue-clickaway - Reusable clickaway directive for reusable Vue.js components.
vue-scrollfire - Fires an event on a specific scroll position.
vue-resize-directive - Vue directive to detect resize events with deboucing and throttling capacity.
v-click-outside - Vue directive to react on clicks outside of an element without stopping the event propagation.
vue-outside-events - Vue 2.x directive to help a specified element listen for specific events occurring outside of itself.
vue-selectable - Vue 1.x/2.x directive to make items selectable by mouse.
vue-click-helper - Vue2.x directive to handle click event and dblclick event on same element.
v-hotkey - Vue 2.x directive for binding hotkeys to components.
vue-resize - Vue 2.x component to detect DOM elements resizing (event based/no window.onresize)
vue-observe-visibility - Vue 2.x directive using Intersection Observer API that detects if the element is visible (in the viewport and not hidden by CSS).
v-dragged - Vue 2.x directive plugin for drag event detection.
vue-esc - Vue.js directive to add a document event listener on escape keyup.
vue-global-events – A component to handle global events (like shortcuts) using Vue’s event modifiers
vue-edge-check – Check browser edge to prevent transition effect triggered oddly when swipe edge with vue-router
vue-mutation-observer – A simple and tiny directive to observe changes in DOM use MutationObserver API
vue-scroll-show – Showing the element if the user reached it after scroll
vue-tabevents – Easy communication between other opened tabs
vue-visibility-trigger - 👀 Declaratively trigger methods when scrolled into view

Responsive Design

vue-viewports - Define your custom viewports and use them in your components.
vue-responsive: Vue.js(2.x) directive to hide/show HTML-elements with the Bootstrap 4, 3 or self defined breakpoints.
vue-match-media - Vue 2.x-compatible plugin that offers a consistent, semantic approach to making components media query-aware.
vue-media-query-mixin - Vue 2 media query mixin that can be used in both component js and component template. Compatible with bootstrap and vuetify viewports. wXS returns if screen width is xs, wSM returns true if screen width is sm, etc...
vue-breakpoints - Vue 2 minimal components to show and hide elements based on breakpoints. Inspired by Airbnb.
vue-mq - Offer some useful tools to quickly setup responsive design with a semantic and mobile-first API (Vue 2.x)
VueResizeSensor - A container that supports resize event.
vue-breakpoint-component - A render-less component for
composing CSS breakpoint state.
fine-mq - A fine API to manage media queries in JS with ease and first-class integration with VueJS as a plugin.
vue-responsive-components - Create responsive components with ResizeObserver.
vue-screen-size - Get easy and reactive access to the width and height of your screen.

Form

vue-formly - JavaScript powered forms for Vue.js.
vue-focus - A reusable focus directive for reusable Vue.js components.
vue-form-generator - A schema-based form generator component for Vue.js.
FormSchema Native - Generate a form using JSON Schema and Vue.js
ic-formly - Simple form component powered by vue-formly.
Form Builder - Json template based form builder, based on Vue and Laravel.
vue-autofocus-directive - Vue autofocus directive.
vue-awesome-form - A vue.js component just like json-editor
vue-form-components - Clean & minimal vue form elements with validation
ncform - a very nice configuration generation way to develop form

Validation

vee-validate - Simple Vue.js input validation plugin.
vue-rawmodel - RawModel.js plugin for Vue.js v2. Form validation has never been easier.
vuelidate - Simple, lightweight model-based validation for Vue.js.
simple-vue-validator - A simple yet flexible validator library for vue.js.
vue-vform - Vue.js 2 form component that integrates jQuery Validation and Axios.
vue-form - Comprehensive form validation for Vue.js.
vuelidation - simple, powerful, vuejs validation.
laravel-vue-validator - Display errors from laravel validation rules
vue-daval - Super vue data validator. Easiness, simplicity, accurate.
willvalidate - Validation Forms for Vue.js.
vue-m-validator - Model data validation library, for VueJs.
vue-isyourpasswordsafe - A small utility written in Vue that checks if the given password has been leaked against the Have I Been Pwned API.
vue-form-send - A Vue.js directive for sending data from form and primitive validation
FormVuelar - Vue form components with server side validation in mind
vue-final-validate - Vue validation solution from my development experience, support nested, async.
vform - A simple way to handle Laravel back-end validation in Vue.

Resize

vue-not-visible - Vue directive for removing from dom (like v-if) element on screen smaller than breakpoints.
vue-window-size - Provides reactivity window size properties.
vue-responsive-text - ↔ Component that scales its child node in relation to its parent node's width

Scroll
Set window scroll position

vue-chat-scroll - Automatic scroll-to-bottom directive for Vue.js 2.0.
vue-scrollto - Adds a directive that listens for click events and scrolls to elements.
vue-next-level-scroll - A component based and SSR ready approach to smooth scrolling using the modern Scroll behavior API
vue-scroll-sync - A component that synchronizes containers’ scroll positions
v-scroll-lock - A Vue.js directive for body scroll locking without breaking scrolling of a target element
vue2-perfect-scrollbar - PerfectScrollbar minimalistic wrapper
vue-scroll-to - Adds a directive that listens for click events and scrolls to elements.
vue-scroll-progressbar - A customizable component that indicates the scroll relative position in a progressbar.
vue-backtotop - A Back-to-top component for Vue.js, which scroll page to the top when clicked.

Virtual scrollbar

VBar - The virtual responsive cross-browser scrollbar component for Vue.js 2x.
Vuebar - Vue 2 directive for custom scrollbar that uses native scroll behavior. Lightweight, performant, customizable and without dependencies.
vue-detached-scrollbar - A simple scrollbar that can be detached from the container it is scrolling.
vuescroll - A scrolling plugin based on Vue.js for uniforming the scrolling in PC and mobile.
vue-simplebar - Vue.js wrapper for simplebar plugin.
smooth-vuebar - Vue directive wrapper for smooth-scrollbar

Detect when components enter viewport

vue-scrollview - A component utilizing scoped slots to detect when a vue component enters and leaves the viewport.
vue-scrollactive - Adds an active class in a menu item based on the current section in viewport, also scrolling to the section when clicking the menu item.
vue-intersect - A Vue component to add intersection-observer to a Vue component or HTML element.
vue-scrollmonitor - A Vue plugin to watch visibility state of elements inside viewport with a wide range of browsers supported (use provide/inject so compat vue@2.2.x)
vue-stroll - An Awesome CSS3 list scroll effects component for Vue.js 2.x.
navscroll-js - Highlights menu items as you scroll, and also scrolls to a section when a menu item clicked. Use as a vue component, a vue directive or with vanilla js.
vue-scrollwatch - A light plugin detecting scroll event,customize callback when element enter viewport,expose 'scrollTo' api to scroll to specific  element .Using vue directive.
vue-check-view - A plugin that checks if element is in viewport. Fast, small, has no dependencies, live demo.
vue-stickto - A vue directive that support multiple DOM nodes stick to top automatically
vue2-scrollspy - A scrollspy plugin and animated scroll-to.

Customize the scroll behavior

vue-scroll-behavior - Customize the scroll behavior on route navigation. Especially hash mode.
vue-scroll-stop - Stops propagation scroll when edge reached.

Seamless scrolling

vue-seamless-scroll - A simple, Seamless scrolling for Vue.js.

Routing

vue-router - The official router for Vue.js.
vue-router-storage - Router storage & resolve solution for Vue.js 2 & vue-router 2
vue-tidyroutes - Decentralized vue-router routes definitions
vue-routisan - Elegant route definitions for Vue Router based on Laravel routing system
vue-error-page - Provides a wrapper for router-view that allows you to show error pages without changing the URL
vue-router-sitemap - Generate sitemap.xml by vue-router configuration
vue-smart-route - Smart route directive to make intelligent looking apps with Vue.js.
vue-router-lite - A component-based, declarative router for Vue.js 2.

Lazy Load

vue-lazyload - A Vue.js plugin for lazyload your Image or Component in your application.
vue-lazy-background-images - Lazy load background images for Vue 2.
vue-progressive-image - Vue progressive image loading plugin.
vue-l-lazyload - A lazyload plugin for Vue.js v2.x+.
vue-lazyload-img - Especially optimized for mobile browser. support V2 & v1.
vue-lazy-images - A plugin of lazyload images for Vue 2.x.
v-lazy-img - Tiny (<0.6kb) directive for progressive image loading for Vue 2.
vue-clazy-load - Lightweight transitionable image lazy loading component using IntersecionObserver for Vue 2.
vue-lazy-this - Lazyloading component using Intersection Observer API.
v2-lazy-list - A simple lazy-load list component based Vue 2.x
pimg - A Simple Progressive Image Component used for lazy loading images.
vue-tiny-lazyload-img - A small size Vue.js v.2+ directive for lazy loading images
vue-lazy-youtube-video - A simple Vue.js component for lazy loading YouTube videos.
lazyload-vue- Vue Plugin for vanilla-lazyload.

Pagination

vue-paginate - A simple vue.js plugin to paginate data.
vue-pagination-2 - Vue.js 2 pagination component.
vuejs-uib-pagination - Best and complete pagination plugin for Vue.js. Inspired in Angular Bootstrap Pagination.
vuejs-paginate - A Vue.js(v2.x+) component for creating pagination.
vue-pagination-bootstrap - A Vue.js (1.x & 2.x) server-side paging component with a template based on Bootstrap
laravel-vue-semantic-ui-pagination - A Vue.js 2.x pagination used with Laravel & Semantic-UI.
vue-paginate-al - Vue paginate with return your data.
vue-tiny-pagination - A Vue component for create a tiny pagination.
laravel-vue-pagination - A Vue.js pagination component for Laravel paginators that works with Bootstrap.
vue-lpage - Low-level Vue pagination component.
v-page - A simple pagination bar, including length Menu, i18n support, based on Vue2.x.
vue-smart-pagination - Smart pagination of any data with a lot of nice settings.
vue-paginatron - Pagination component built with scoped-slot props for maximum flexibility.
vue-ads-pagination - A vue pagination component build with the css framework tailwindcss

Animation

vue2-animate - A Vue.js 2.0 port of Animate.css. For use with Vue's built-in transitions.
animated-vue - A Vue.js 2.x plugin to easily use Animate.css animations as transitions. As easy as <animated-tada>!
vue-lottie - A Vue.js 2.x plugin to render after effects animations based on bodymovin
Vueg - Make vue-router have a transition effect / 为 webApp 提供转场特效的开源 Vue 插件
v-animate-css - The easiest to implement Vue 2 directive for Animate.css
vue-mixin-tween - Mixin factory that adds tweened values to component context for animations
v-odometer - Smoothly transitions numbers with ease. Use this library to give your application a smooth animation, only applicable on numbers.
vue2-transitions ✨ Reusable Vue 2 transition components
vue-overdrive Super easy magic-move transitions for Vue apps 🎩
animated-number-vue Super easy way to animate numbers.
vue-typed-js Typed.js integration to easily create typying animations.
vue-parent-change-transition Enable a child components to animate when it changes the parent.
vue-smooth-reflow Transition an elements reflow in response to data changes.
VueTween Allows components to tween their properties.
vue-slide-up-down Like jQuery's slideUp / slideDown, but for Vue!
vue-animejs Simple anime.js directives for Vue.
Eagle.js Eagle.js is a web-based slideshow framework for Vue.js.
vue-pose Pose for Vue is a declarative motion system that combines the simplicity of CSS transitions with the power and flexibility of JavaScript.
vue-slide-up-down-component It is a simple interface but realizes very flexible and powerful slide animation, for Vue!
femtoTween A minimalistic (zero-dep, less than 1k) tweening library with first-class Vue support
vue-sequential-entrance Plugin for creating elegant sequential animation entrances with a list of elements of your page. Zero effort. Simple and lightweight
vue-animate-scroll Super lightweight way to add CSS animations to elements as they scroll into view.
vue-svg-transition Create 2-state, SVG-powered transitions
vue-page-transition Easy route / page transitions for Vue.js

Meta Tags
Manage meta information in the document head

vue-head - Manage the meta information of the head tag, a simple and easy way.
vue-meta - Manage page meta info in Vue 2.0 components. SSR + Streaming supported.
vue-headful - Set document <title> and meta tags from within your views.
vue-simple-headful - Easily set meta-tags with vue.js - a simpler vue-headful alternative with TypeScript support.

Portal
Move a DOM node to a target DOM node

vue-dom-portal - An escape hatch for DOM Elements in Vue.js components.
portal-vue - A Vue Plugin to render your component's template anywhere in the DOM (Works on the virtualDOM level, doesn't move nodes within the DOM)

Filters

vue2-filters - A collection of standard filters Vue 1.* adapted for use in Vue 2.*.
vue-morphling - A collection of standard and custom filters for Vue 2.
vue-currency-filter - Lightweight and Customizeable Vue 2 Currency Filter.
vue-trans - A simple filter to provide a similar way of translating to the Symfony trans.
vue-string-filter - Lightweight Vue 2 String Manipulation Filter.
vue-units - A collection of handy unit conversion filters for use in Vue 2.
vue-numeral-filter - A collection of filters that allows Numeral.js to be used inline in the template section of a component.
vue-filter-date-format - Simple datetime filter for Vue 2.
vue-filter-pluralize - Simple pluralize filter for Vue 2.
vue-filter-date-parse - Simple parsing datetime filter for Vue 2.

SVG

vue-svgicon - A tool to create svg icon components. (vue 2.x).
vue-content-loading - Vue component to easily build (or use presets) SVG loading cards Facebook like.
vue-annotator - Annotate page using any SVG Element (rect, polygon, and many more, even HTML Element like canvas if wrapped in foreignObject)
vue-svg-sprite - A directive to simply use SVG sprite (vue 2.x).
vue-svg-filler - Vue component for custom your svg file 🖍 🎨 (vue 2.x).

Miscellaneous

vue-resource-progressbar-interceptor - Interceptor that ties a progressbar to all requests, that it is clear that something is loading.
vue-images-loaded - Vue.js 2.0 directive to detect images loading.
vue-visible - A v-visible directive for VueJS (2.x), like v-show but for visibility.
vue-resize-sensor - Component to detect container resizing (event-based)
v-blur - Vue directive to blur an element dynamically
vue-async-methods - Helper utilities for promise based methods
vue-openseadragon - OpenSeaDragon component for Vue.js (zoom and pan)
vue-match-heights - Directive to set heights of elements to be the same.
vue-conditional-attrs - A Vue.js component for conditional rendering attributes and directives
vue-cbsc - A Vue.js 2.x component for programmatically blender, shader and convert colors.
vue-spatialnavigation - Vue directive (Vue.js 2.x) for spatial navigation (keyboard navigation)
vue-lifecycle - A Vue.js lifecycle directives.
vue-aspect-ratio - Aspect ratio directive for vue.
@kooljay82/vue-m-camera - To avoid changing orientation of photo automatically which taken via camera of user's device.

WebGL

vue-3d-model - A 3D model viewer in Vue component.
vue-pano - A panorama viewer in Vue component.
vue-threejs - Vue bindings for Three.js.
VueGL - Vue.js components rendering 3D graphics reactively via three.js
vue-vr - A framework for building VR applications with Vue
based on threejs and Panolens, inspired by react-vr
vue-displacement-slideshow - A Vue.js component that makes Webgl image displacement transitions easier.

Fullscreen

vue-fullscreen - A simple Vue component for fullscreen.

Page visibility

vue-page-visibility-awesome - A Vue 2.x component of easy-to-config page visibility api.
vue-authplugin - an elegant view auth control plugin, support directive and prototype methods.

Printing

vue-html-to-paper - Vue mixin for paper printing html elements to paper.

Utilities
Utilities not directly related to the UI

vue-underscore - simple vue plugin to implement underscore
vue-lazy-calc - A simple calculation plugin in lazy && chaining way with strong typed.

Typescript

vue-typed - Sets of ECMAScript / Typescript decorators that helps you write Vue component easily.
vue-typescript - Typescript decorators to make vue feel more typescripty.
vue-property-decorator - Vue.js and Property Decorator.
vue-typescript-component - Decorators to use TypeScript classes as Vue.js 2.0 components.
vue-typescript-import-dts - TypeScript declaration file that allows using 'import' with .vue files.
vue-ts-loader - Type-check your script in your vue-loader.
vue-mixin-decorator - Typescript decorator for strongly typed Mixins.
vue-ts-component-generator - A simple cli tool for generating vue typescript components.
vue-local-storage-decorator - Persist data by using local stoarge in decorator format
vuex-module-decorators - Typescript/ES7 Decorators to make Vuex modules a breeze
vuex-class-modules - Introduce a simple type-safe class style syntax for your vuex modules, inspired by vue-class-component.

HTTP Requests
Retrieve data over HTTP

vue-resource - The HTTP client for Vue.js.
vue-async-computed - Async computed properties for Vue.js.
vue-jsonp - A tiny library for handling JSONP request.
v-model - V-Model is a model plugin for Vue.js, like ng-resource.
vue-resource-mock - A helper to mock your http response, based on vue-resource's interceptor.
vue-async-data-2 - Async data loading plugin for Vue.js.
vue-api-request - A plugin that provides full control on your APIs, making your request simple, fast and easy to implement.
vue-fast-axios - Make requests with validations in a simple and beautiful way.
vue-async-properties - An asyncData and asyncComputed plugin with support for debouncing, transforming results, error handlers, loading/pending flags, lazy/eager requests.
vue-axios-plugin - A plugin that combines axios with Vuejs, making http request more easier.
vuex-api - A vuex plugin for effortlessly handle api calls.
zipkin-instrumentation-vue-resource - An interceptor for vue-resource that instruments outgoing HTTP requests with Zipkin
vue-api-query - Elegant and simple way to build requests for REST API.
vue-chimera - A full-featured RESTful resource based client, compatible with Nuxt.js and allows server side fetch.
vue-google-api - A wrapper for easy integration of the Google's APIs client in any vue.js 2 project, based on promises, with built-in Oauth2 ""Sign In with Google"" facilities.
vue-apis - A vue plug-in integrated with axios that chain-builds API instances. Available from the context of a vue instance (eg: this.$apis.apiName()).

i18n
Internationalization / L10n / localization / translation

vue-i18n - Internationalization plugin for Vue.js.
vue-translate-plugin - VueJS plugin for translations.
vuex-i18n - Localization plugin for vue.js 2.0 using vuex as store.
vue-gettext - Translate your Vue.js applications with gettext.
vue-i18n - A small plugin for implementing translations in Vue.js.
vue-multilanguage - Support many languages in Vue.js 2.
vue-ts-locale - A plugin for implementing translations using Intl in Vue.js 2 with typescript support.
vue-i18next - A i18next wrapper to support translations in Vue.js 2.
vue-polyglot - Basic translation plugin for Vue.js 2 with async loading.
v-localize - Simple localization plugin for
the amazing Vue.js.
vue-simple-i18n - Probably the thinnest library to end all Vue i18n solutions within 1kb
template-string-i18n - I18n using template strings with auto save/load translate documents.
vue-translations - Translate your vuejs application easy with it.
vue-i18n-service -  Export and import @kazupon/vue-i18n's SFC translations simply using npx vue-i18n-service export|import.
vue-i18n-filter -  Vue filter extend for Vue-i18n, simply using {{ hello world | t }}.
vue-translation-manager - Interactively find and translate strings in your Vue.js application. Works well with vue-18n and vuex-i18n.
vue-t9n - Simplest way to translate your applications
vue-simple-inline-translation - A Vue component that simplifies the way text is translated: by translating it inline.
vue-i18n-extract - Manage vue-i18n localization with static analysis. Make reports about missing and unused i18n entries.
vscode-vue-i18n-ally - VSCode extension for better Vue-i18n experiences.

Custom Events

vue-events - Simple event handling for Vue.js.
vue-event-handler - Event handling plugin for VueJS.
vue-event-manager - The global event manager for Vue.js.
vue-geb - A global event bus using Observables.
vue-bus - Tiny simple central event bus plugin for Vue.js 2.
vue-simple-events - Yet another event management plugin, but WITHOUT Vue instance
vue-option-events - Bring Vue.js 1 events option and $emit to Vue.js 2.

Persistence
LocalStorage etc.

vue-localstorage - Vue.js localStorage plugin with types support.
vue-ls - Vue plugin for work with LocalStorage from Vue context.
vue-pouch - Live and reactive bindings for PouchDB. Persist data in IndexedDB and sync with CouchDB.
vue-idb - Lists and huge lists management with IndexedDB (Dexie.js) only or automatically created and extendible vuex modules
vuejs-storage - Vue.js and vuex plugin to persistence data with localStorage/sessionStorage.
vue-browserstore - Browser storage wrapper.
VueStorage - Allows components to save and load their data across browser sessions.
vue-web-storage Another Vue.js plugin for localStorage and sessionStorage
vue-universal-cookies Isomorphic cookies plugin for Vue.js / Nuxt.js supports Browser, Express, http (node).
vue2-storage Browser storage for Vue.js app
vue-warehouse A Cross-browser storage for Vue.js and Nuxt.js, with plugins support and easy extensibility based on Store.js.
vue-storage-watcher - A reactive localStorage/sessionStorage plugin for Vue.js with strong typed.

State Management

vuex - Centralized State Management for Vue.js.
vue-sync - Synchronize Vue State with the Browser URL, Server Backend, and other endpoints.
vuelm - Lightweight state management inspired by Elm architecture.
vuez - A simple but powerful State Management for Vue.js, with only 2 APIs.
vuet - Vue.js state management model for Agile Development
vue-ya-stash - Yet Another stash storage with update/patch event emitters simillar with v-bind.sync
vue-assign-model - Automatically assign elements value to model for Vue.js.
vue-stash - Easily share reactive data between your Vue components.
vue-mc - Models and Collections for Vue.js
vue-model - Model component for Vue.js
tuex - A mostly reasonable alternative to Vuex.
revuejs - A tiny, light and handy state management for vuejs 2, writing less verbose code.
lue - Vue and vuex based library, writing less verbose code.
vuex-lite - A 1KB Vuex with just state and mutations.
Vuenut - is a component to develop faster and more fluently.
vue-shared - A light and simple alternative to vuex
vuex-module-generator - It allows you to create a vuex module easily.
vuex-declaration - Declare state like props, make state inject to vuex dynamically when component created.
vuex-up - Brings mixing and services injector features to module vuex.
effector — Fast and powerful reactive state manager. Effector lets you write simple, fast and type safe code and manage reactive state with ease.
nano-state-vue - Efficient, effective, and extensible state management: less is more

Redux

vuedeux - Binding Solutions for Vue & Redux.

redux-store-mixin - Mixin for integrate action creators in methods of vue-component
vue-redux-prepare-props - Helper for use props of Redux with Vue.js using Vuex and Vuedeux


vuejs-redux - High order component facilities for Vue and Redux.
vuex-coolstory - Plugin for vuex to run redux-saga.

Mobx

movue - Mobx integration for Vue.js.
vue-mobx - Mobx binding for Vuejs 2.x.

Authentication/Authorization

vue-kindergarten
vue-authenticate - Simple Vue.js authentication library for login/register and OAuth (1.0/2.0) authentication
vue-facebook-account-kit - Simple vue wrapper to the fb account kit library.
casl-vue - Restricts what resources a given user is allowed to access
vue-google-api - A wrapper for easy integration of the Google's APIs client in any vue.js 2 project, based on promises, with built-in Oauth2 ""Sign In with Google"" facilities.
vue-auth - A simple light-weight authentication library for Vue.js
vue-auth-plugin - A simple authentication and authorization library for Vue.js using typescript
vue-google-signin-button - A simple Vue plugin to include a Google sign-in button into your web app
vue-facebook-signin-button - A simple plugin to include a custom Facebook sign-in button into your web app
vue-auth-href - A VueJS directive for downloading files that are under a protected route schema

Vuex Utilities

vuex-persistedstate - Persist Vuex state with localStorage.
vuex-plugin-jsdata - A plugin for syncing Vuex store with js-data.
vuex-local - Local state management within Vuex.
vuex-action - Utilities for vuex to easily create and manage actions.
vuex-rest-api - A Helper utility to simplify the usage of REST APIs with Vuex. Based on axios.
vuex-cache - A Vuex plugin utility to cache action those will make remote request.
vuex-persist - A Typescript-ready Vuex plugin to help save the store to localStorage or any custom Storage (that you can configure).
vuex-local-state - Add 'localState/sessionState' options to vuex. Keep the Vuex state with localStorage.
vuex-cli-scaffold - Scaffold vuex actions, mutations, getters and the state.
vuex-action-reload - A vuex plugin that reloads actions when a condition is met.
vuejs-storage - Vue.js and vuex plugin to persistence data with localStorage/sessionStorage.
vuex-orm - The Vuex plugin to enable Object-Relational Mapping access to the Vuex Store.
vuex-async-module - Reduce async boilerplate code generating Vuex modules. Compatible with Vue 2.x.
vuex-api - A vuex plugin for effortlessly handle api calls.
vuex-queries - Vuex-Queries helps you write query functions in Vuex
vuex-microservice - Define microservice URLs at a dedicated place and use them inside your Vuex actions.
vuex-iframe-sync - Vuex state synchronization between iframe/window.
vuex-aspect - Bind remote data of any kind to the vuex store.
Vuenut - is a component to develop faster and more fluently.
vuex-map-fields - Enable two-way data binding for form fields.
vuex-search - Vuex binding for client-side search with indexers and Web Workers.
vuex-dry - helps keep your vuex codes DRY.
vuex-pathify - provides a unified path syntax to Vuex stores (such as foo/bar@a.b.c)
vuex-loading - Simplify vuex loading state management
vuex-module-builder - Vuex module builder is a wrapper for writing vuex stores efficiently with some common methods built-in.
vuex-pagination - Easily work with paginated resources in your Vue/Vuex application. Works well with most of the Vue pagination components.
vuex-easy-firestore - Easy coupling of Firebase Cloud Firestore and Vuex. 2-way sync with 0 boilerplate!
vuex-listener - A global Vuex action and mutation listener plugin
jsonapi-vuex - Use a JSONAPI api with a Vuex store, with client-side restructuring/normalization of records.

Sync Between Tabs

vuex-basement - Vuex state persistence and synchronization between tabs/windows.
vuex-shared-mutations - Share vuex mutations between tabs/windows.

GraphQL

vue-apollo - Apollo/GraphQL integration for VueJS.
vue-relay - A framework for building GraphQL-driven Vue.js applications.
vuex-orm-apollo - Apollo/GraphQL integration for Vuex-ORM.

Concurrency Management

vuency - Concurrency management for Vue.js.

Code Style
Improve readability of code

vue-types - Vue Prop Types definitions.
vue-factory - A simple factory/provider extension for Vue.js, like services in Angular.
eslint-plugin-vue - Eslint plugin for Vue.js projects.
vue-decorators - Decorators for Vue.js (beta).
vue-computed-helpers - Computed helpers for Vue.js apps
vert - Library to build Vue applications in OOP.
vue-slot-checker - Provide the function to check slot like checking props.

CSS

vue-bem-cn - Simple BEM class name generator for Vue.JS.
vue-css - Vue.js plugin that allows you to bundle CSS with your components.
vue-mods-names - Adding modificators to class names for all components in app.
vue-styler - Simple, performant styler for vue.
vue-css-modules - Seamless mapping of class names to CSS Modules inside of Vue components.
vue-simple-bem - Directive with succint syntax for adding BEM class names to elements.
fela-vue - CSS-IN-JS mixin for Vue designed for flexibility yet team-oriented.
j-vue

Asset Management
Utilities for building / compiling / bundling / loading assets

vue-script2 - Standardized, designer-friendly script tag behavior for your Single Page App.
vue-loader - Webpack loader for Vue.js components.
vueify - Browserify transform for single-file Vue components.
vue-compiler - A simple cli wrapper around the vue-component-compiler.
vue-brunch - Adds support to Brunch for pre-compiling single file Vue components.
poi - Start writing an app with a single .js file, Poi could handle all the development setups for you, no more configuration hell.
http-vue-loader - Load .vue files directly from your html/js without node.js environment nor build step.
vue-jsx-hot-loader - Enable HMR for Vue.js components with JSX render functions.
VueInBrowserLoader - Loads a .vue file from the given URL and compiles it to a component directly in the browser.
vue-separate-files-webpack-loader - Webpack loader for separated Vue components parts
vue-svg-loader - webpack loader that lets you use SVG files as Vue components
vue-registrar - ☘️ A package that dynamically registers your components and vuex modules - Makes your code a lot readable!

Page Navigation

vue-navigation - A page navigation library, record routes and cache pages, like native app navigation. 一个页面导航库，记录路由并缓存页面，像原生APP导航一样。
vue-acl - Access Control List for VueJS 2.
vue-breadcrumbs - Implements simple breadcrumb functionality with vue-router for both Vue 1.x and Vue 2.x.
vue-2-breadcrumbs - breadcrumb together with vue-router for Vue 2.x. and Bootstrap 4
vs-crumbs - Vue breadcrumbs in 40 lines of code that allows nested paths without child views.
vue-nav - Page navigation manager, support all navigation function of native mobile app. 页面导航管理器，支持手机原生应用的所有导航功能。
vue-2-crumbs - Breadcrumbs plugin for Vue.js 2 framework that allows to select parent route in route meta object with no need of sub-routing. Also allows using dynamic data.
vue-pesdk Vue.js wrapper for the PhotoEditorSDK
vue-resolve
Resolve routes data before entering / rendering the component for that route.
vue-page-stack - Routing and navigation for your Vue SPA. Vue 单页应用导航管理器

Miscellaneous

vue-container - A simple dependency injection library for Vue 2.
vue-super - A simple plugin to call methods on parent components.
@skyrpex/props-to-local - Vue mixin that maps props to local data.
vue-inject - Dependency injection for Vue 2.x Components
vue-deepset - Interact with deeply nested fields in Vue/Vuex objects/state with v-model in Vue 1.x and 2.x
vue-gaspard - DOM helpers plugin for Vue.js
vue-configuration - A static configuration object for Vue.js
vue-lodash - A simple wrapper for integrating lodash to Vue 2.
vue-ramda - Vue Wrapper for ramda
vue-router-user-roles - Protects routes based on user roles. Add your own authentication.
vue-messenger - A series of useful enhancements to Vue component props: Transform, Enum-type, Numeric-type, Two-way data bindings.
vue-uuid-v4 - Plugin Vue2 to easy get UUIDv4
vue-async-operations - Managing async operations statuses in your Vue components
vue-direction - 👋 Direction aware hover in Vuejs
vue-unique-id - Generates unique component ids and component-scoped HTML ids.
stfalcon-vue-di - ⭐️  Lightweight DI for vue components️ ❤️

Web Workers

vue-worker - A Vue.js plugin to use webworkers in a simply way.
vue-log-worker - A Vue.js plugin to log error and vuex mutations to your backend through a web worker

JSX

jsx-vue-functional - A Babel plugin that brings syntactic sugar for Vue functional components.
jsx-event-modifiers - A Babel plugin that adds event modifiers similar to Vue templates to JSX.
jsx-v-model - A Babel plugin that brings v-model to JSX.
vue-jsx-sync - A Babel plugin that brings vue sync modifier to JSX.

Migration

vue-backbone - Vue.js Plugin to facilitate Backbone integration.

Web Sockets

vue-socket.io - Socket.io implementation for vuejs.
vue-websocket - Simple websocket (socket.io) plugin for Vue.js.
vue-echo - Integrates Laravel Echo into Vue, allows for easy registration of socket events.
vue-socket-cluster - Web Sockets for vue with uws(Micro web sockets) through socket cluster
vue-native-websocket - Native websocket implementation for Vuejs 2 and Vuex
vue-socket.io-extended - Socket.io bindings for Vue.js and Vuex
vue-phoenix - Elixir Phoenix Web Socket implmentation for vuejs. Also provides typescript decorator for better use.

Payment
Payment utilities.
Stripe

vue-stripe-checkout A simple vue plugin for Stripe checkout.
vue-stripe-payment Vue wrapper for jquery.payment by Stripe.

Paypal

vue-paypal-checkout A simple Vue.js wrapper component for paypal-checkout.

Plaid

vue-plaid-link Easy to use Vue component for Plaid Link.

Integrations
Integrate with services or other frameworks

vue-disqus - Vue component to integrate Disqus comments in your application, with support for SPA.
vue-youtube-embed - Vue.js and YouTube.
vue-add-to-calendar - A Vue.js component that provides ""Add to Calendar"" functionality, works with Vue 2.X.
Vue + Meteor - Vue first-class integration in Meteor.
av-ts - A modern, type-safe, idiomatic Vue binding library.
Neutronium - Build .NET desktop applications using HTML, CSS and javascript.
vue-typescript-jest - Jest preprocessor.js for Vue.js components (supporting html, pug, and babel) and TypeScript.
vue-jest-utils - Utilities for testing Vue.js components using Jest.
vue-custom-element - Vue Custom Element - Custom Elements for Vue.js.
vue-cordova - Vue.js plugin for Cordova.
vue-wamp - AutobahnJS wrapper library fo Vue.js.
express-vue - Vue rendering engine for Express.js. Use .Vue files as templates using res.render().
vue-grecaptcha - Google reCAPTCHA for VueJS 2
vue-recaptcha - Google reCAPTCHA component for Vue.js
require-vuejs - RequireJS plugin to async and dynamic load and parse .vue components.
facebook-login-vuejs - Vue Component for Authenticating your Facebook App and get the benefits of Facebook Login.
vuejs/vuefire - Official Firebase Integration for VueJS
vuefire - Firebase for VueJS and Vuex
vue-runkit - RunKit Embed for Vue.js
vue-youtube - Provides a simple layer for you to use your imagination while over the YouTube IFrame Player API. (Compatible with SSR)
vue-introjs - Integrates intro.js step-by-step guide and feature introduction with Vue.js http://introjs.com/.
vue-loopback - Loopback and Vue application template
vue-laroute - Integrate Laravel routes into your VueJS application using laroute.
vue-raven - Automatically reports uncaught JavaScript exceptions triggered from vue component.
vue-telegram-login - Vue Component for Telegram Login by @vchaptsev
vuexpress - Vue + Express.js = VueXpress / A server side rendering engine for Express.js. Use .vue files as your express.js templates.
vue-fixer - A simple vue component for the fixer API.
amazon-cognito-vuex-module - Vuex module for Amazon Cognito.
vue-web3 - Web3 blockchain bindings for Vue.js (inspired by Vuefire and Drizzle)
sbt-vuefy - Vue.js integration for Playframework
loopback-vue-starter - LoopBack and Vue starter template with easy plugin management through vue-cli and vue ui.
vue.py - Write Vue.js Components in Python
vue-telegram-passport - Vue Component for Telegram Passport by @vchaptsev
vue-facebook-login-component - A fully customizable component for integrating Facebook login.
vue-programmatic-invisible-google-recaptcha - A simple invisible Google reCAPTCHA component focused solely on programmatic invocation.
vbuild - Its main purpose is to let you use components (.vue files) in your vuejs app, without a full nodejs stack. Since 0.6 versions : you can create your component in pure python !
feathers-vuex - is a first class integration of the Feathers Client and Vuex. It implements many Redux best practices under the hood, eliminates a lot of boilerplate code, and still allows you to easily customize the Vuex store.
vue-nocaptcha - Aliyun noCAPTCHA component for Vue.js
ionic-vue - Vue.js integration for Ionic v4
vue-0xcert - Vue.js integration for 0xcert Framework - an open-source library that provides tools for building powerful decentralized applications
vue-zdog Vue wrapper for zDog - a minimalist 3D engine for the browser

Vue CLI 3 Plugins

vue-cli-plugin-cordova - Vue CLI 3 Plugin to add Cordova easily to your project
vue-cli-plugin-component - Vue CLI 3 Plugin to create component
vue-cli-plugin-modular-vuex - Vue CLI 3 Plugin to create modular Vuex store files
vue-cli-plugin-modular-router - Vue CLI Plugin to create modular route files
vue-cli-plugin-docker-nginx - Vue CLI Plugin to add a docker deployment using a minimal nginx server
vue-cli-plugin-element - Vue CLI 3 Plugin to build an enterprise application with element-ui in seconds
vue-cli-plugin-electron-builder - Vue CLI 3 Plugin for Electron with no required configuration that uses Electron Builder.

Google Analytics

vue-ua - Google Universal Analytics support in Vue.js.
vue-analytics - Vue plugin for Google Analytics.
vue-gtm - Vue plugin for Google Tag Manager

Yandex Metrika

vue-ya-metrica - Vue plugin for Yandex.Metrica
vue-yandex-metrika - Vue plugin for Yandex Metrika with router integration, plugin options by @vchaptsev

Dev Tools

vue-dev-server - A small development server for building vue components.
vuepack.org - A simple page that allows you to select Vue components and download them as a single minified JS file.
Storybook - The UI Development Environment. works with v3.2+ later.
Font Awesome Finder - Chrome extension to search, preview and choose Font Awesome icons and copy the selected icon HTML code & Unicode to clipboard.
vue-dummy - Placeholder Text and Dummy Images as a simple v-dummy directive.
Bit - Manage and reuse vue components between projects. Easily isolate and share components from any project without changing its source code, organize curated collections and install in different projects.
Vuenut - is a component to develop faster and more fluently.
ComponentFixture - is a component design to develop and test other components, automatically binding their props.
vue-cli-template-dev-server - A development server for building vue-cli custom templates.

Inspect
Inspecting & debugging

Vue.js devtools - Chrome devtools extension for debugging Vue.js applications.
DejaVue - Visualization and debugging tool built for Vue.js.
vue-clicky - Right click any component to show info about it in the console.
vuejs-logger - Provides customizable logging functionality for Vue.js.
bugsnag-vue - Official Vue.js plugin for bugsnag error reporting
vue-inspector - Vue.js Inspector for Mobile Devices
Vue Performance Devtool - Vue Performance Devtool is a browser extension for inspecting the performance of Vue Components
VueSource - Global Vue mixin which identifies components in source code by adding HTML comments
NW-Vue-DevTools - DevDependency for adding Vue DevTools into NW.js
bruit-io - Collect feedbacks with screenshot and technical data and post them to an API like bruit.io.

Docs
Create documentation

vue-markdown-loader - Convert Markdown file to Vue Component.
vue-play - A minimalistic framework for demonstrating your Vue components.
vue-styleguide-generator - React inspired style guide generator for Vue.js.
CheatSheet - Complete Interactive API.
Vuex CheatSheet - Complete Interactive Vuex API.
vue-styleguidist - A style guide generator for Vue components with a living style guide.
vue-elucidate - A component that generates beautiful documentation for your living styleguide / design system.
vue-md-loader - Markdown files to ALIVE Vue components.
@vuedoc/parser - Generate a JSON documentation for a Vue file component.
@vuedoc/md - Generate a Markdown Documentation for a Vue file.
jsdoc-vue-component - A jsodc3 plugin that extract vue SFC info(name, props, events...) to document.
jsdoc-vuedoc - A jsdoc3 plugin use @vuedoc/md.
vue-storybook –  Add <story> blocks to your Vue single file components for tighter integration of Vue + Storybook
vue-patterns - Useful Vue patterns, techniques, tips and tricks and helpful curated links.
vuese - One-stop solution for vue component documentation.

Test

vue-container - A simple dependency injection library for Vue 2.
vuenit - Utilities for testing Vue components and directives.
vue-unit - A library for Vue.js that makes it easier to create and unit test components.
vue-a2b - A library for Split Testing with Vue.js. Highly configurable and tiny (1.2k gzipped).
vue-test-utils - Official utilities for testing Vue components.
vue-test-actions - Unit testing Vuex actions with Jest mocks.
jest-vue-matcher - Additional jest matchers for vue
vue-hubble - A better way to select elements for UI testing in Vue.
Vue Testing Library - Simple and complete testing utilities that encourage good testing practices. Based on DOM Testing Library and built upon the official Vue Test Utils.

Browser-less require
Load Vue components without browser

vuegister - Vuegister (a portmanteau of vue & register) is a require hook for loading of the Vue.js single-file components (or .vue files).
vue-node - Load vue components in node.

Source Code Editing
Text editor plugins
Atom

language-vue@atom.io - Vue component file syntax for Atom.
language-vue-component@atom.io - Adds syntax highlighting to Vue Component files in Atom.
vue-snippets@atom.io - Atom snippets for Vue component files.
vue-autocompile@atom.io - Auto compile vue file on save.
lint-sass-vue@atom.io - Atom.io package to lint Sass/SCSS in .vue files.
vuejs2-snippets@atom.io - Atom snippets for javascript and components, including lifecycle hooks, directives, properties, vuex, vue-router, vue-i18n support.
vue2-autocomplete@atom.io - Vue.js 2.0+ autocomplete for Atom.

Sublime Text

Vue Syntax Highlight - Sublime Text syntax highlighting for single-file Vue components.
VUEFormatter - Sublime Text code format
vuejs-sublime-complete - Sublime Text code complete
Vue Next Formatter - Sublime Text Vue formatter, Supported ES5/6/7, Less/Sass and Pug/Html template.

Vim

Vim Vue - Syntax Highlight for Vue.js components.
vim-vue-plugin - Vim syntax and indent plugin for .vue files.

Visual Studio Code

Vetur - Vue tooling for VSCode.

Visual Studio

VuePack - Contains HTML Intellisense and code snippets for the Vue.js JavaScript library.

Brackets

Brackets Vue - Brackets extension for Vue.js.

Intellij

Vue.js support for WebStorm, IntelliJ IDEA, PhpStorm, PyCharm & RubyMine – official Vue.js support by JetBrains

Emacs

Vue Mode - Emacs major mode for vue.js.

Kate

Kate Syntax Files - Syntax files (modified or original) for katepart (kate, kwrite, kdevelop).

Scaffold
Scaffold / boilerplate / seed / starter kits / stack ensemble / Yeoman generator

vue-cli - Simple CLI for scaffolding Vue.js projects.
Vue-Django - A boilerplate to set you up in bringing the awesomeness of VueJS into a Django (Python) app.
python-vuejs - Gluing Python web frameworks and Vue.js with a set of scripts. Basically a vue-cli wrapper.
generator-vue-plugin - Yeoman generator generating vue plugin.
vue-seed - vue-seed is minimal seed for those looking to get up-and-running with Vue
nuxt-seed - nuxt-seed is minimal seed for those looking to get up-and-running with Vue and Nuxt
rails_vue_melt - Rails view with webpack=vue optimizer.
vue-starter - A Vue.js starter kit that lets you focus on more programming and less configuration.
vue-standalone-component - A standalone component generator with documentation support using jsdoc and vue-styleguidist
vuejs-wordpress-theme-starter - A WordPress theme with the guts ripped out and replaced with Vue
Cordovue - A sample Apache Cordova application using Vue.
Cookiecutter-Django-Vue - Django+VueJS+Docker customizable project generator with a large number of settings/integrations by @vchaptsev
iBiu   A visual CLI for scaffolding large Vue projects in 2 seconds.
wp-vue - A simple Vue blog template that displays posts from a WordPress REST API endpoint.
vue-cli-template-nativescript - Template for starting new nativescript+vue projects with rollup+babel+eslint
vue-element-ui-scaffold - Online and visual Vue 2 with Element-UI CRUD scaffold/generator.
vue-firebase-element-ui-scaffold - Online and visual Vue 2, Element-UI and Firebase scaffold/generator with CRUDs, authentication, file/image upload, activity log and more.
vuesion - The most complete boilerplate for production-ready PWAs. With focus on performance, development speed, and best practices
vue-vuex-typescript-webpack-seed - A seed project with Vue, Vuex, Typescript, Scss & Webpack with hot reloading
VueCharged Template - A highly opinionated, feature-first Vue 2 template with CLI scaffolding. Uses Vue 2, Vuex, Vue Router and Vue I18n.
Huncwot - Vue.js boilerplate with Node.js for building modern JavaScript applications with « batteries included » approach.
wemake-vue-template - Bleeding edge vue template focused on code quality and developer happiness. Featuring: nuxt, flow, and jest.
vue-lib-template - 🛠 A simple template for building and publishing Vue component/library as a opensource.
Awesome Vue Boilerplate - 😍 Awesome Vue, 🥰 Vuex, Vuex-pathify, element-ui, tailwindcss
ScaffoldHub.io - Generate full Vue applications with SQL, MongoDB or Firebase Firestore databases.
VuePlay - Generate disposable Vue playgrounds in seconds. Allows you to test things quickly.
Mevn-CLI - Light speed setup for MEVN stack based apps.
vue-cli-template-registry - A solution for installing vue-cli custom templates hosted on private/enterprise repositories.
vue-enterprise-boilerplate -  An ever-evolving, very opinionated architecture and dev environment for new Vue SPA projects using Vue CLI 3.

Client
Render Vue application in the browser only

Vue Plugin Boilerplate - Boilerplate for Vue.js plugin.
Bourgeon - Bourgeon is an opinionated-featured VueJS 2.0 setup for Webpack.
VuePack - A modern starter which uses Vue 2, Vuex, Vue-router and Webpack 2 (and even Electron).
Vue Settler - An opinionated Vue 2.0 SPA Starter.
vue-build - Ultra Simple, Development, Testing and Production Build Cli.
Vue Element Starter - Robust Vue 2 starter with Element-UI.
vue-multiple-pages - A modern Vue.js multiple pages starter which uses Vue 2, Webpack2, and Element-UI
vue-typescript-boilerplate - A Vue.js typescript SPA starter with Vue 2, Vue Typed, Vuex, Vue Router and localization
vue-tachyons-template - A Vue 2 project starter template w/ Tachyons, Webpack, and ESLint
Vuets - A Vue, TypeScript ready boilerplate using class-style components, vue plugin options, webpack & vue-cli.
MMF-FE/vue-typescript - A vue2.x typescript template.
Friendly Vue Starter - A full featured Vue.js starter project with GraphQL support via Apollo-client (Vuex, Vue-router, Vue-i18n, Webpack 3, Eslint, Prettier, ...)
vue-webpack-typescript - A Vue 2.2 Webpack 2 and Typescript 2 setup with hot reload, unit testing, code coverage, sass and bundling/minification.
vue-ts-amd - A full-featured Vue.js 2 boilerplate using AMD pattern (RequireJS) and Typescript.
vue-2-boilerplate - Vue 2 boilerplate for developing medium to large single page applications by petervmeijgaard
layout - A full-featured Webpack + Vue Extend layout
layout-simple - A simple Webpack + Vue Extend layout
vue-cli-template-library - Template for developing open-source vue.js libraries with Rollup + Jest + Babel + Storybook + TravisCI + SemanticRelease.
vue-cli-template-github-pages - A full-featured Webpack + vue-loader setup for Github Pages Deployment with travisCI.
vue-webpack-chrome-extension-template - Template for quick creation of Chrome extension on Vuejs hot reloading when developing.
buildless-vue - Quickly use Vue without a build step.
vue-component-template - Webpack setup for building & publishing a Vue component/library (with docs/demo site).
vue-auth-boilerplate - Vue SPA boilerplate with Router/Vuex/CLI3 and auth functions (cool looking register and login). Works with minimal setup out of the box with laravel-api-boilerplate-jwt.
vue-atomic-design - Vue front-end boilerplate based on atomic design methodology.

Universal
Render Vue application to HTML on the server and to the DOM in the browser

SPA Starter Kit - A highly opinionated starter kit for building Single Page Applications with Laravel and Vue.js.
SSR Boilerplate - Vue.js Server Side Rendering Boilerplate without Polluting Vuex.
neutrino-preset-vue-static - A minimalistic starter kit for building static sites using Vue.js.
Vueniverse - A fully featured, universal Vue template for user-based applications, powered by Nuxt.js and Express.
vue-preload - A plugin Vue for adding <link rel=""preload"" capabilities
Vue.js/Nuxt.js full featured boilerplate professional agency frontend template for building fast, robust, and adaptable web apps or sites by vuejs/nuxtjs.

Server
Includes a backend boilerplate

Vuetober - Single page apps with Laravel, Vue.js, and October CMS.
Toucan - Boilerplate for building single page apps. Server is multi-project .Net Core solution designed around SOLID principles. Client is TypeScript 2, Vuejs 2, Vuex 2.
vue-server-demo - Writing koa server in Vue.
vue-apollo-connector-kit - JWT authentication with 2 different strategies (localStorage and httpOnly cookies). Authorization using custom directives (apollo).
DotVue - Implement .vue file handler in .NET with server ViewModel postback. Single-file components with server-side ViewModel. Use all power of VueJS with simple C# server side data access.
isomor-vue-app - Setup a working environment with Vue and isomor, to unify the frontend and the backend by generating automatically the API.

Electron

Electron Vue - An Electron & Vue.js quick start boilerplate with vue-cli scaffolding, common Vue plugins, electron-packager/electron-builder, unit/e2e testing, vue-devtools, and webpack.
VuePack - A modern starter which uses Vue 2, Vuex, Vue-router and Webpack 2 (and even Electron).
vue-flexible-link - Tiny Vue component for Electron to open links in a browser. Ideal for cross environment apps (Web & Native)
vuelectron - electronjs starter kits for vue.
vue-design - the best website visualization builder with Vue and Electron.
vue-cli-plugin-electron-builder - A Vue Cli 3 plugin for Electron with no required configuration that uses Electron Builder and Electron Webpack.
dapp - Boilerplate for stack of Vue/Parcel/Electron.
vue-electron-template - An Electron & Vue.js boilerplate with Hot-reloading enabled and common Vue plugins, dev and build scripts configured using webpack-4

Parts
Scaffold parts of the app

vue-generator - A CLI generator for Vue components, views and store modules.
vue-component-generator - A generator for vue component, supports Vue1.X and Vue2.X.
rapydml_cmp - Vue-component pythonic generator, built on top of RapydML & RapydScript.
vue-authoring-template - Template for authoring also publishing Vue component and their use case in story-scenario (storybook) format in easy way.
vue-component-boilerplate - Template for generating the boilerplate code for a VueJS components, with build scripts and testing pre-installed.
vue-generate-component-typescript - A typescript code generator for vue, it can generate components, directives, filters.

Runtime
Command Line / Terminal

blessed-vue - A VueJS runtime to let you write command line UI in Vue Edit

Prerendering

react-snap - A zero-configuration static pre-renderer for SPA
prerender-plugin - A Node.js/ webpack plugin to prerender static HTML in a single-page application (SPA).
vue-prerender - A Vue.js tailored plugin which implements three strategies for prerendering Vue.js pages using headless chrome.
Rendora - dynamic SSR (server-side rendering) using headless Chrome to effortlessly solve the SEO problem for modern javascript websites






"
58,"
Atom



Atom is a hackable text editor for the 21st century, built on Electron, and based on everything we love about our favorite editors. We designed it to be deeply customizable, but still approachable using the default configuration.


Visit atom.io to learn more or visit the Atom forum.
Follow @AtomEditor on Twitter for important
announcements.
This project adheres to the Contributor Covenant code of conduct.
By participating, you are expected to uphold this code. Please report unacceptable behavior to atom@github.com.
Documentation
If you want to read about using Atom or developing packages in Atom, the Atom Flight Manual is free and available online. You can find the source to the manual in atom/flight-manual.atom.io.
The API reference for developing packages is also documented on Atom.io.
Installing
Prerequisites

Git

macOS
Download the latest Atom release.
Atom will automatically update when a new release is available.
Windows
Download the latest Atom installer. AtomSetup.exe is 32-bit. For 64-bit systems, download AtomSetup-x64.exe.
Atom will automatically update when a new release is available.
You can also download atom-windows.zip (32-bit) or atom-x64-windows.zip (64-bit) from the releases page.
The .zip version will not automatically update.
Using Chocolatey? Run cinst Atom to install the latest version of Atom.
Linux
Atom is only available for 64-bit Linux systems.
Configure your distribution's package manager to install and update Atom by following the Linux installation instructions in the Flight Manual.  You will also find instructions on how to install Atom's official Linux packages without using a package repository, though you will not get automatic updates after installing Atom this way.
Archive extraction
An archive is available for people who don't want to install atom as root.
This version enables you to install multiple Atom versions in parallel. It has been built on Ubuntu 64-bit,
but should be compatible with other Linux distributions.

Install dependencies (on Ubuntu): sudo apt install git gconf2 gconf-service libgtk2.0-0 libudev1 libgcrypt20 libnotify4 libxtst6 libnss3 python gvfs-bin xdg-utils libcap2
Download atom-amd64.tar.gz from the Atom releases page.
Run tar xf atom-amd64.tar.gz in the directory where you want to extract the Atom folder.
Launch Atom using the installed atom command from the newly extracted directory.

The Linux version does not currently automatically update so you will need to
repeat these steps to upgrade to future releases.
Building

Linux
macOS
Windows

Discussion

Discuss Atom on our forums
Chat about Atom on our Slack team -- instructions for joining

License
MIT
When using the Atom or other GitHub logos, be sure to follow the GitHub logo guidelines.

"
59,"
Awesome Go
   
 financial support to Awesome Go
A curated list of awesome Go frameworks, libraries and software. Inspired by awesome-python.
Contributing
Please take a quick gander at the contribution guidelines first. Thanks to all contributors; you rock!
If you see a package or project here that is no longer maintained or is not a good fit, please submit a pull request to improve this file. Thank you!
Contents


Awesome Go

Audio and Music
Authentication and OAuth
Bot Building
Command Line
Configuration
Continuous Integration
CSS Preprocessors
Data Structures
Database
Database Drivers
Date and Time
Distributed Systems
Email
Embeddable Scripting Languages
Error Handling
Files
Financial
Forms
Functional
Game Development
Generation and Generics
Geographic
Go Compilers
Goroutines
GUI
Hardware
Images
IoT
Job Scheduler
JSON
Logging
Machine Learning
Messaging
Microsoft Office

Microsoft Excel


Miscellaneous

Dependency Injection
Project Layout
Strings


Natural Language Processing
Networking

HTTP Clients


OpenGL
ORM
Package Management
Performance
Query Language
Resource Embedding
Science and Data Analysis
Security
Serialization
Server Applications
Stream Processing
Template Engines
Testing
Text Processing
Third-party APIs
Utilities
UUID
Validation
Version Control
Video
Web Frameworks

Middlewares

Actual middlewares
Libraries for creating HTTP middlewares


Routers


Windows
XML



Tools

Code Analysis
Editor Plugins
Go Generate Tools
Go Tools
Software Packages

DevOps Tools
Other Software





Resources

Benchmarks
Conferences
E-Books
Gophers
Meetups
Twitter
Websites

Tutorials





Audio and Music
Libraries for manipulating audio.

EasyMIDI - EasyMidi is a simple and reliable library for working with standard midi file (SMF).
flac - Native Go FLAC encoder/decoder with support for FLAC streams.
gaad - Native Go AAC bitstream parser.
go-sox - libsox bindings for go.
go_mediainfo - libmediainfo bindings for go.
gosamplerate - libsamplerate bindings for go.
id3v2 - Fast and stable ID3 parsing and writing library for Go.
malgo - Mini audio library.
minimp3 - Lightweight MP3 decoder library.
mix - Sequence-based Go-native audio mixer for music apps.
mp3 - Native Go MP3 decoder.
music-theory - Music theory models in Go.
Oto - A low-level library to play sound on multiple platforms.
PortAudio - Go bindings for the PortAudio audio I/O library.
portmidi - Go bindings for PortMidi.
taglib - Go bindings for taglib.
vorbis - ""Native"" Go Vorbis decoder (uses CGO, but has no dependencies).
waveform - Go package capable of generating waveform images from audio streams.

Authentication and OAuth
Libraries for implementing authentications schemes.

authboss - Modular authentication system for the web. It tries to remove as much boilerplate and ""hard things"" as possible so that each time you start a new web project in Go, you can plug it in, configure, and start building your app without having to build an authentication system each time.
branca - Golang implementation of Branca Tokens.
casbin - Authorization library that supports access control models like ACL, RBAC, ABAC.
cookiestxt - provides parser of cookies.txt file format.
go-jose - Fairly complete implementation of the JOSE working group's JSON Web Token, JSON Web Signatures, and JSON Web Encryption specs.
go-oauth2-server - Standalone, specification-compliant,  OAuth2 server written in Golang.
gologin - chainable handlers for login with OAuth1 and OAuth2 authentication providers.
gorbac - provides a lightweight role-based access control (RBAC) implementation in Golang.
goth - provides a simple, clean, and idiomatic way to use OAuth and OAuth2. Handles multiple providers out of the box.
httpauth - HTTP Authentication middleware.
jeff - Simple, flexible, secure and idiomatic web session management with pluggable backends.
jwt - Clean and easy to use implementation of JSON Web Tokens (JWT).
jwt - Lightweight JSON Web Token (JWT) library.
jwt-auth - JWT middleware for Golang http servers with many configuration options.
jwt-go - Golang implementation of JSON Web Tokens (JWT).
loginsrv - JWT login microservice with plugable backends such as OAuth2 (Github), htpasswd, osiam.
oauth2 - Successor of goauth2. Generic OAuth 2.0 package that comes with JWT, Google APIs, Compute Engine and App Engine support.
osin - Golang OAuth2 server library.
paseto - Golang implementation of Platform-Agnostic Security Tokens (PASETO).
permissions2 - Library for keeping track of users, login states and permissions. Uses secure cookies and bcrypt.
rbac - Minimalistic RBAC package for Go applications.
scope - Easily Manage OAuth2 Scopes In Go.
scs - Session Manager for HTTP servers.
securecookie - Efficient secure cookie encoding/decoding.
session - Go session management for web servers (including support for Google App Engine - GAE).
sessiongate-go - Go session management using the SessionGate Redis module.
sessions - Dead simple, highly performant, highly customizable sessions service for go http servers.
sessionup - Simple, yet effective HTTP session management and identification package.
signedvalue - Signed and timestamped strings compatible with Tornado's create_signed_value, decode_signed_value, and therefore set_secure_cookie and get_secure_cookie.
sjwt - Simple jwt generator and parser.

Bot Building
Libraries for building and working with bots.

go-chat-bot - IRC, Slack & Telegram bot written in Go.
go-sarah - Framework to build bot for desired chat services including LINE, Slack, Gitter and more.
go-tgbot - Pure Golang Telegram Bot API wrapper, generated from swagger file, session-based router and middleware.
Golang CryptoTrading Bot - A golang implementation of a console-based trading bot for cryptocurrency exchanges.
govkbot - Simple Go VK bot library.
hanu - Framework for writing Slack bots.
Kelp - official trading and market-making bot for the Stellar DEX. Works out-of-the-box, written in Golang, compatible with centralized exchanges and custom trading strategies.
margelet - Framework for building Telegram bots.
micha - Go Library for Telegram bot api.
slacker - Easy to use framework to create Slack bots.
slackscot - Another framework for building Slack bots.
tbot - Telegram bot server with API similar to net/http.
telebot - Telegram bot framework written in Go.
telegram-bot-api - Simple and clean Telegram bot client.
Tenyks - Service oriented IRC bot using Redis and JSON for messaging.

Command Line
Standard CLI
Libraries for building standard or basic Command Line applications.

1build - Command line tool to frictionlessly manage project-specific commands.
argparse - Command line argument parser inspired by Python's argparse module.
argv - Go library to split command line string as arguments array using the bash syntax.
cli - Feature-rich and easy to use command-line package based on golang struct tags.
cli - Simple and complete API for building command line interfaces in Go.
cli-init - The easy way to start building Golang command line applications.
climax - Alternative CLI with ""human face"", in spirit of Go command.
clîr - A Simple and Clear CLI library. Dependency free.
cmd - Extends the standard flag package to support sub commands and more in idomatic way.
cmdr - A POSIX/GNU style, getopt-like command-line UI Go library.
cobra - Commander for modern Go CLI interactions.
commandeer - Dev-friendly CLI apps: sets up flags, defaults, and usage based on struct fields and tags.
complete - Write bash completions in Go + Go command bash completion.
Dnote - A simple and end-to-end encrypted notebook for developers.
docopt.go - Command-line arguments parser that will make you smile.
env - Tag-based environment configuration for structs.
flag - Simple but powerful command line option parsing library for Go supporting subcommand.
flaggy - A robust and idiomatic flags package with excellent subcommand support.
flagvar - A collection of flag argument types for Go's standard flag package.
go-arg - Struct-based argument parsing in Go.
go-commander - Go library to simplify CLI workflow.
go-flags - go command line option parser.
go-getoptions - Go option parser inspired on the flexibility of Perl’s GetOpt::Long.
gocmd - Go library for building command line applications.
hiboot cli - cli application framework with auto configuration and dependency injection.
job - JOB, make your short-term command as a long-term job.
kingpin - Command line and flag parser supporting sub commands.
liner - Go readline-like library for command-line interfaces.
mitchellh/cli - Go library for implementing command-line interfaces.
mow.cli - Go library for building CLI applications with sophisticated flag and argument parsing and validation.
ops - Unikernel Builder/Orchestrator.
pflag - Drop-in replacement for Go's flag package, implementing POSIX/GNU-style --flags.
readline - Pure golang implementation that provides most features in GNU-Readline under MIT license.
sand - Simple API for creating interpreters and so much more.
sflags - Struct based flags generator for flag, urfave/cli, pflag, cobra, kingpin and other libraries.
strumt - Library to create prompt chain.
ts - Timestamp convert & compare tool.
ukautz/clif - Small command line interface framework.
urfave/cli - Simple, fast, and fun package for building command line apps in Go (formerly codegangsta/cli).
wlog - Simple logging interface that supports cross-platform color and concurrency.
wmenu - Easy to use menu structure for cli applications that prompts users to make choices.

Advanced Console UIs
Libraries for building Console Applications and Console User Interfaces.

asciigraph - Go package to make lightweight ASCII line graph ╭┈╯ in command line apps with no other dependencies.
aurora - ANSI terminal colors that supports fmt.Printf/Sprintf.
cfmt - Contextual fmt inspired by bootstrap color classes.
chalk - Intuitive package for prettifying terminal/console output.
colourize - Go library for ANSI colour text in terminals.
ctc - The non-invasive cross-platform terminal color library does not need to modify the Print method.
go-ataman - Go library for rendering ANSI colored text templates in terminals.
go-colorable - Colorable writer for windows.
go-colortext - Go library for color output in terminals.
go-isatty - isatty for golang.
go-prompt - Library for building a powerful interactive prompt, inspired by python-prompt-toolkit.
gocui - Minimalist Go library aimed at creating Console User Interfaces.
gommon/color - Style terminal text.
gookit/color - Terminal color rendering tool library, support 16 colors, 256 colors, RGB color rendering output, compatible with Windows.
mpb - Multi progress bar for terminal applications.
progressbar - Basic thread-safe progress bar that works in every OS.
simpletable - Simple tables in terminal with Go.
tabby - A tiny library for super simple Golang tables.
tabular - Print ASCII tables from command line utilities without the need to pass large sets of data to the API.
termbox-go - Termbox is a library for creating cross-platform text-based interfaces.
termdash - Go terminal dashboard based on termbox-go and inspired by termui.
termui - Go terminal dashboard based on termbox-go and inspired by blessed-contrib.
uilive - Library for updating terminal output in realtime.
uiprogress - Flexible library to render progress bars in terminal applications.
uitable - Library to improve readability in terminal apps using tabular data.

Configuration
Libraries for configuration parsing.

config - A lightweight yet powerful config package for Go projects.
config - Cloud native application configuration. Bind ENV to structs in only two lines.
config - JSON or YAML configuration wrapper with environment variables and flags parsing.
configure - Provides configuration through multiple sources, including JSON, flags and environment variables.
confita - Load configuration in cascade from multiple backends into a struct.
conflate - Library/tool to merge multiple JSON/YAML/TOML files from arbitrary URLs, validation against a JSON schema, and application of default values defined in the schema.
env - Parse environment variables to Go structs (with defaults).
envcfg - Un-marshaling environment variables to Go structs.
envconf - Configuration from environment.
envconfig - Read your configuration from environment variables.
envh - Helpers to manage environment variables.
gcfg - read INI-style configuration files into Go structs; supports user-defined types and subsections.
genv - Read environment variables easily with dotenv support.
go-up - A simple configuration library with recursive placeholders resolution and no magic.
goConfig - Parses a struct as input and populates the fields of this struct with parameters from command line, environment variables and configuration file.
godotenv - Go port of Ruby's dotenv library (Loads environment variables from .env).
gofigure - Go application configuration made easy.
gone/jconf - Modular JSON configuration. Keep you config structs along with the code they configure and delegate parsing to submodules without sacrificing full config serialization.
gookit/config - application config manage(load,get,set). support JSON, YAML, TOML, INI, HCL. multi file load, data override merge.
harvester - Harvester, a easy to use static and dynamic configuration package supportig seeding, env vars and Consul integration.
hjson - Human JSON, a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments.
ingo - Flags persisted in an ini-like config file.
ini - Go package to read and write INI files.
joshbetz/config - Small configuration library for Go that parses environment variables, JSON files, and reloads automatically on SIGHUP.
kelseyhightower/envconfig - Go library for managing configuration data from environment variables.
koanf - Light weight, extensible library for reading config in Go applications. Built in support for JSON, TOML, YAML, env, command line.
konfig - Composable, observable and performant config handling for Go for the distributed processing era.
mini - Golang package for parsing ini-style configuration files.
nasermirzaei89/env - Simple useful package for read environment variables.
onion - Layer based configuration for Go, Supports JSON, TOML, YAML, properties, etcd, env, and encryption using PGP.
sprbox - Build-environment aware toolbox factory and agnostic config parser (YAML, TOML, JSON and Environment vars).
store - Lightweight configuration manager for Go.
viper - Go configuration with fangs.
xdg - Cross platform package that follows the XDG Standard.

Continuous Integration
Tools for help with continuous integration.

CDS - Enterprise-Grade CI/CD and DevOps Automation Open Source Platform.
drone - Drone is a Continuous Integration platform built on Docker, written in Go.
duci - A simple ci server no needs domain specific languages.
gomason - Test, Build, Sign, and Publish your go binaries from a clean workspace.
goveralls - Go integration for Coveralls.io continuous code coverage tracking system.
overalls - Multi-Package go project coverprofile for tools like goveralls.
roveralls - Recursive coverage testing tool.

CSS Preprocessors
Libraries for preprocessing CSS files.

gcss - Pure Go CSS Preprocessor.
go-libsass - Go wrapper to the 100% Sass compatible libsass project.

Data Structures
Generic datastructures and algorithms in Go.

algorithms - Algorithms and data structures.CLRS study.
binpacker - Binary packer and unpacker helps user build custom binary stream.
bit - Golang set data structure with bonus bit-twiddling functions.
bitset - Go package implementing bitsets.
bloom - Bloom filters implemented in Go.
bloom - Golang Bloom filter implementation.
boomfilters - Probabilistic data structures for processing continuous, unbounded streams.
concurrent-writer - Highly concurrent drop-in replacement for bufio.Writer.
conjungo - A small, powerful and flexible merge library.
count-min-log - Go implementation Count-Min-Log sketch: Approximately counting with approximate counters (Like Count-Min sketch but using less memory).
crunch - Go package implementing buffers for handling various datatypes easily.
cuckoofilter - Cuckoo filter: a good alternative to a counting bloom filter implemented in Go.
deque - A highly optimized double-ended queue.
deque - Fast ring-buffer deque (double-ended queue).
dict - Python-like dictionaries (dict) for Go.
encoding - Integer Compression Libraries for Go.
go-adaptive-radix-tree - Go implementation of Adaptive Radix Tree.
go-datastructures - Collection of useful, performant, and thread-safe data structures.
go-ef - A Go implementation of the Elias-Fano encoding.
go-geoindex - In-memory geo index.
go-mcache - Fast in-memory key:value store/cache library. Pointer caches.
go-rquad - Region quadtrees with efficient point location and neighbour finding.
gocache - A complete Go cache library with mutiple stores (memory, memcache, redis, ...), chainable, loadable, metrics cache and more.
goconcurrentqueue - Concurrent FIFO queue.
gods - Go Data Structures. Containers, Sets, Lists, Stacks, Maps, BidiMaps, Trees, HashSet etc.
gofal - fractional api for Go.
golang-set - Thread-Safe and Non-Thread-Safe high-performance sets for Go.
goset - A useful Set collection implementation for Go.
goskiplist - Skip list implementation in Go.
gota - Implementation of dataframes, series, and data wrangling methods for Go.
hide - ID type with marshalling to/from hash to prevent sending IDs to clients.
hilbert - Go package for mapping values to and from space-filling curves, such as Hilbert and Peano curves.
hyperloglog - HyperLogLog implementation with Sparse, LogLog-Beta bias correction and TailCut space reduction.
levenshtein - Levenshtein distance and similarity metrics with customizable edit costs and Winkler-like bonus for common prefix.
levenshtein - Implementation to calculate levenshtein distance in Go.
mafsa - MA-FSA implementation with Minimal Perfect Hashing.
merkletree - Implementation of a merkle tree providing an efficient and secure verification of the contents of data structures.
mspm - Multi-String Pattern Matching Algorithm for information retrieval.
null - Nullable Go types that can be marshalled/unmarshalled to/from JSON.
parsefields - Tools for parse JSON-like logs for collecting unique fields and events.
pipeline - An implementation of pipelines with fan-in and fan-out.
ptrie - An implementation of prefix tree.
remember-go - A universal interface for caching slow database queries (backed by redis, memcached, ristretto, or in-memory).
ring - Go implementation of a high performance, thread safe bloom filter.
roaring - Go package implementing compressed bitsets.
set - Simple set data structure implementation in Go using LinkedHashMap.
skiplist - Very fast Go Skiplist implementation.
skiplist - Skiplist implementation in Go.
timedmap - Map with expiring key-value pairs.
treap - Persistent, fast ordered map using tree heaps.
trie - Trie implementation in Go.
ttlcache - In-memory LRU string-interface{} map with expiration for golang.
typ - Null Types, Safe primitive type conversion and fetching value from complex structures.
willf/bloom - Go package implementing Bloom filters.

Database
Databases implemented in Go.

badger - Fast key-value store in Go.
bcache - Eventually consistent distributed in-memory  cache Go library.
BigCache - Efficient key/value cache for gigabytes of data.
Bitcask - Bitcask is an embeddable, persistent and fast key-value (KV) database written in pure Go with predictable read/write performance, low latency and high throughput thanks to the bitcask on-disk layout (LSM+WAL).
bolt - Low-level key/value database for Go.
buntdb - Fast, embeddable, in-memory key/value database for Go with custom indexing and spatial support.
cache - In-memory key:value store with expiration time, 0 dependencies, <100 LoC, 100% coverage.
cache2go - In-memory key:value cache which supports automatic invalidation based on timeouts.
clusteredBigCache - BigCache with clustering support and individual item expiration.
cockroach - Scalable, Geo-Replicated, Transactional Datastore.
Coffer - Simple ACID key-value database that supports transactions.
couchcache - RESTful caching micro-service backed by Couchbase server.
CovenantSQL - CovenantSQL is a SQL database on blockchain.
dgraph - Scalable, Distributed, Low Latency, High Throughput Graph Database.
diskv - Home-grown disk-backed key-value store.
eliasdb - Dependency-free, transactional graph database with REST API, phrase search and SQL-like query language.
fastcache - fast thread-safe inmemory cache for big number of entries. Minimizes GC overhead.
GCache - Cache library with support for expirable Cache, LFU, LRU and ARC.
go-cache - In-memory key:value store/cache (similar to Memcached) library for Go, suitable for single-machine applications.
goleveldb - Implementation of the LevelDB key/value database in Go.
gorocksdb - Gorocksdb is a wrapper for RocksDB written in Go.
groupcache - Groupcache is a caching and cache-filling library, intended as a replacement for memcached in many cases.
influxdb - Scalable datastore for metrics, events, and real-time analytics.
Kivik - Kivik provides a common Go and GopherJS client library for CouchDB, PouchDB, and similar databases.
ledisdb - Ledisdb is a high performance NoSQL like Redis based on LevelDB.
levigo - Levigo is a Go wrapper for LevelDB.
moss - Moss is a simple LSM key-value storage engine written in 100% Go.
nutsdb - Nutsdb is a simple, fast, embeddable, persistent key/value store written in pure Go. It supports fully serializable transactions and many data structures such as  list, set, sorted set.
piladb - Lightweight RESTful database engine based on stack data structures.
prometheus - Monitoring system and time series database.
pudge - Fast and simple  key/value store written using Go's standard library.
rqlite - The lightweight, distributed, relational database built on SQLite.
Scribble - Tiny flat file JSON store.
slowpoke - Key-value store with persistence.
tempdb - Key-value store for temporary items.
tidb - TiDB is a distributed SQL database. Inspired by the design of Google F1.
tiedot - Your NoSQL database powered by Golang.
Vasto - A distributed high-performance key-value store. On Disk. Eventual consistent. HA. Able to grow or shrink without service interruption.
VictoriaMetrics - fast, resource-effective and scalable open source time series database. May be used as long-term remote storage for Prometheus. Supports PromQL.

Database schema migration.

avro - Discover SQL schemas and convert them to AVRO schemas. Query SQL records into AVRO bytes.
darwin - Database schema evolution library for Go.
go-fixtures - Django style fixtures for Golang's excellent built-in database/sql library.
go-pg-migrations - A Go package to help write migrations with go-pg/pg.
gondolier - Database migration library using struct decorators.
goose - Database migration tool. You can manage your database's evolution by creating incremental SQL or Go scripts.
gormigrate - Database schema migration helper for Gorm ORM.
migrate - Database migrations. CLI and Golang library.
migrator - Dead simple Go database migration library.
pravasan - Simple Migration tool - currently for MySQL but planning to soon support Postgres, SQLite, MongoDB, etc.
schema - Library to embed schema migrations for database/sql-compatible databases inside your Go binaries.
skeema - Pure-SQL schema management system for MySQL, with support for sharding and external online schema change tools.
soda - Database migration, creation, ORM, etc... for MySQL, PostgreSQL, and SQLite.
sql-migrate - Database migration tool. Allows embedding migrations into the application using go-bindata.

Database tools.

bucket - Optimized data structure framework for Couchbase specialized on one bucket usage.
chproxy - HTTP proxy for ClickHouse database.
clickhouse-bulk - Collects small insterts and sends big requests to ClickHouse servers.
datagen - A fast data generator that's multi-table aware and supports multi-row DML.
dbbench - Database benchmarking tool with support for several databases and scripts.
go-mysql - Go toolset to handle MySQL protocol and replication.
go-mysql-elasticsearch - Sync your MySQL data into Elasticsearch automatically.
kingshard - kingshard is a high performance proxy for MySQL powered by Golang.
myreplication - MySql binary log replication listener. Supports statement and row based replication.
octillery - Go package for sharding databases ( Supports every ORM or raw SQL ).
orchestrator - MySQL replication topology manager & visualizer.
pgweb - Web-based PostgreSQL database browser.
prep - Use prepared SQL statements without changing your code.
pREST - Serve a RESTful API from any PostgreSQL database.
rwdb - rwdb provides read replica capability for multiple database servers setup.
vitess - vitess provides servers and tools which facilitate scaling of MySQL databases for large scale web services.

SQL query builder, libraries for building and using SQL.

dbq - Zero boilerplate database operations for Go.
Dotsql - Go library that helps you keep sql files in one place and use them with ease.
gendry - Non-invasive SQL builder and powerful data binder.
godbal - Database Abstraction Layer (dbal) for go. Support SQL builder and get result easily.
goqu - Idiomatic SQL builder and query library.
igor - Abstraction layer for PostgreSQL that supports advanced functionality and uses gorm-like syntax.
jet - Framework for writing type-safe SQL queries in Go, with ability to easily convert database query result into desired arbitrary object structure.
ormlite - Lightweight package containing some ORM-like features and helpers for sqlite databases.
ozzo-dbx - Powerful data retrieval methods as well as DB-agnostic query building capabilities.
qry - Tool that generates constants from files with raw SQL queries.
scaneo - Generate Go code to convert database rows into arbitrary structs.
sqlf - Fast SQL query builder.
sqrl - SQL query builder, fork of Squirrel with improved performance.
Squalus - Thin layer over the Go SQL package that makes it easier to perform queries.
Squirrel - Go library that helps you build SQL queries.
xo - Generate idiomatic Go code for databases based on existing schema definitions or custom queries supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server.

Database Drivers
Libraries for connecting and operating databases.


Relational Databases

avatica - Apache Avatica/Phoenix SQL driver for database/sql.
bgc - Datastore Connectivity for BigQuery for go.
firebirdsql - Firebird RDBMS SQL driver for Go.
go-adodb - Microsoft ActiveX Object DataBase driver for go that uses database/sql.
go-mssqldb - Microsoft MSSQL driver for Go.
go-oci8 - Oracle driver for go that uses database/sql.
go-sql-driver/mysql - MySQL driver for Go.
go-sqlite3 - SQLite3 driver for go that uses database/sql.
gofreetds - Microsoft MSSQL driver. Go wrapper over FreeTDS.
goracle - Oracle driver for Go, using the ODPI-C driver.
pgx - PostgreSQL driver supporting features beyond those exposed by database/sql.
pq - Pure Go Postgres driver for database/sql.



NoSQL Databases

aerospike-client-go - Aerospike client in Go language.
arangolite - Lightweight golang driver for ArangoDB.
asc - Datastore Connectivity for Aerospike for go.
dynago - Dynago is a principle of least surprise client for DynamoDB.
forestdb - Go bindings for ForestDB.
go-couchbase - Couchbase client in Go.
go-pilosa - Go client library for Pilosa.
go-rejson - Golang client for redislabs' ReJSON module using Redigo golang client. Store and manipulate structs as JSON objects in redis with ease.
gocb - Official Couchbase Go SDK.
gocql - Go language driver for Apache Cassandra.
godis - redis client implement by golang, inspired by jedis.
godscache - A wrapper for the Google Cloud Platform Go Datastore package that adds caching using memcached.
gomemcache - memcache client library for the Go programming language.
gorethink - Go language driver for RethinkDB.
goriak - Go language driver for Riak KV.
mgo - (unmaintained) MongoDB driver for the Go language that implements a rich and well tested selection of features under a very simple API following standard Go idioms.
mongo-go-driver - Official MongoDB driver for the Go language.
neo4j - Neo4j Rest API Bindings for Golang.
Neo4j-GO - Neo4j REST Client in golang.
neoism - Neo4j client for Golang.
redeo - Redis-protocol compatible TCP servers/services.
redigo - Redigo is a Go client for the Redis database.
redis - Redis client for Golang.
xredis - Typesafe, customizable, clean & easy to use Redis client.



Search and Analytic Databases.

bleve - Modern text indexing library for go.
elastic - Elasticsearch client for Go.
elasticsql - Convert sql to elasticsearch dsl in Go.
elastigo - Elasticsearch client library.
go-elasticsearch - Official Elasticsearch client for Go.
goes - Library to interact with Elasticsearch.
riot - Go Open Source, Distributed, Simple and efficient Search Engine.
skizze - probabilistic data-structures service and storage.



Multiple Backends.

cachego - Golang Cache component for multiple drivers.
cayley - Graph database with support for multiple backends.
dsc - Datastore connectivity for SQL, NoSQL, structured files.
gokv - Simple key-value store abstraction and implementations for Go (Redis, Consul, etcd, bbolt, BadgerDB, LevelDB, Memcached, DynamoDB, S3, PostgreSQL, MongoDB, CockroachDB and many more).



Date and Time
Libraries for working with dates and times.

carbon - Simple Time extension with a lot of util methods, ported from PHP Carbon library.
cronrange - Parses Cron-style time range expressions, checks if the given time is within any ranges.
date - Augments Time for working with dates, date ranges, time spans, periods, and time-of-day.
dateparse - Parse date's without knowing format in advance.
durafmt - Time duration formatting library for Go.
feiertage - Set of functions to calculate public holidays in Germany, incl. specialization on the states of Germany (Bundesländer). Things like Easter, Pentecost, Thanksgiving...
go-persian-calendar - The implementation of the Persian (Solar Hijri) Calendar in Go (golang).
go-sunrise - Calculate the sunrise and sunset times for a given location.
go-week - An efficient package to work with ISO8601 week dates.
iso8601 - Efficiently parse ISO8601 date-times without regex.
kair - Date and Time - Golang Formatting Library.
now - Now is a time toolkit for golang.
NullTime - Nullable time.Time.
strftime - C99-compatible strftime formatter.
timespan - For interacting with intervals of time, defined as a start time and a duration.
timeutil - Useful extensions (Timedelta, Strftime, ...) to the golang's time package.
tuesday - Ruby-compatible Strftime function.

Distributed Systems
Packages that help with building Distributed Systems.

celeriac - Library for adding support for interacting and monitoring Celery workers, tasks and events in Go.
consistent - Consistent hashing with bounded loads.
dht - BitTorrent Kademlia DHT implementation.
digota - grpc ecommerce microservice.
dot - distributed sync using operational transformation/OT.
doublejump - A revamped Google's jump consistent hash.
dragonboat - A feature complete and high performance multi-group Raft library in Go.
drmaa - Job submission library for cluster schedulers based on the DRMAA standard.
dynamolock - DynamoDB-backed distributed locking implementation.
dynatomic - A library for using DynamoDB as an atomic counter.
emitter-io - High performance, distributed, secure and low latency publish-subscribe platform built with MQTT, Websockets and love.
flowgraph - flow-based programming package.
gleam - Fast and scalable distributed map/reduce system written in pure Go and Luajit, combining Go's high concurrency with Luajit's high performance, runs standalone or distributed.
glow - Easy-to-Use scalable distributed big data processing, Map-Reduce, DAG execution, all in pure Go.
go-health - Library for enabling asynchronous dependency health checks in your service.
go-jump - Port of Google's ""Jump"" Consistent Hash function.
go-kit - Microservice toolkit with support for service discovery, load balancing, pluggable transports, request tracking, etc.
go-sundheit - A library built to provide support for defining async service health checks for golang services.
gorpc - Simple, fast and scalable RPC library for high load.
grpc-go - The Go language implementation of gRPC. HTTP/2 based RPC.
hprose - Very newbility RPC Library, support 25+ languages now.
jsonrpc - The jsonrpc package helps implement of JSON-RPC 2.0.
jsonrpc - JSON-RPC 2.0 HTTP client implementation.
KrakenD - Ultra performant API Gateway framework with middlewares.
liftbridge - Lightweight, fault-tolerant message streams for NATS.
micro - Pluggable microservice toolkit and distributed systems platform.
NATS - Lightweight, high performance messaging system for microservices, IoT, and cloud native systems.
outboxer - Outboxer is a go library that implements the outbox pattern.
pglock - PostgreSQL-backed distributed locking implementation.
raft - Golang implementation of the Raft consensus protocol, by HashiCorp.
raft - Go implementation of the Raft consensus protocol, by CoreOS.
rain - BitTorrent client and library.
redis-lock - Simplified distributed locking implementation using Redis.
resgate - Realtime API Gateway for building REST, real time, and RPC APIs, where all clients are synchronized seamlessly.
ringpop-go - Scalable, fault-tolerant application-layer sharding for Go applications.
rpcx - Distributed pluggable RPC service framework like alibaba Dubbo.
sleuth - Library for master-less p2p auto-discovery and RPC between HTTP services (using ZeroMQ).
tendermint - High-performance middleware for transforming a state machine written in any programming language into a Byzantine Fault Tolerant replicated state machine using the Tendermint consensus and blockchain protocols.
torrent - BitTorrent client package.

Email
Libraries and tools that implement email creation and sending.

chasquid - SMTP server written in Go.
douceur - CSS inliner for your HTML emails.
email - A robust and flexible email library for Go.
go-dkim - DKIM library, to sign & verify email.
go-imap - IMAP library for clients and servers.
go-message - Streaming library for the Internet Message Format and mail messages.
go-premailer - Inline styling for HTML mail in Go.
go-simple-mail - Very simple package to send emails with SMTP Keep Alive and two timeouts: Connect and Send.
Hectane - Lightweight SMTP client providing an HTTP API.
hermes - Golang package that generates clean, responsive HTML e-mails.
mailchain - Send encrypted emails to blockchain addresses written in Go.
mailgun-go - Go library for sending mail with the Mailgun API.
MailHog - Email and SMTP testing with web and API interface.
SendGrid - SendGrid's Go library for sending email.
smtp - SMTP server protocol state machine.

Embeddable Scripting Languages
Embedding other languages inside your go code.

anko - Scriptable interpreter written in Go.
binder - Go to Lua binding library, based on gopher-lua.
cel-go - Fast, portable, non-Turing complete expression evaluation with gradual typing.
expr - an engine that can evaluate expressions.
gentee - Embeddable scripting programming language.
gisp - Simple LISP in Go.
go-duktape - Duktape JavaScript engine bindings for Go.
go-lua - Port of the Lua 5.2 VM to pure Go.
go-php - PHP bindings for Go.
go-python - naive go bindings to the CPython C-API.
golua - Go bindings for Lua C API.
gopher-lua - Lua 5.1 VM and compiler written in Go.
gval - A highly customizable expression language written in Go.
ngaro - Embeddable Ngaro VM implementation enabling scripting in Retro.
otto - JavaScript interpreter written in Go.
purl - Perl 5.18.2 embedded in Go.
tengo - Bytecode compiled script language for Go.

Error Handling
Libraries for handling errors.

emperror - Error handling tools and best practices for Go libraries and applications.
errlog - Hackable package that determines responsible source code for an error (and some other fast-debugging features). Pluggable to any logger in-place.
errors - Drop-in replacement for the standard library errors package and github.com/pkg/errors. Provides various error handling primitives.
errors - Package that provides simple error handling primitives.
errors - Simple golang error handling with classification primitives.
errorx - A feature rich error package with stack traces, composition of errors and more.
Falcon - A Simple Yet Highly Powerful Package For Error Handling.
go-multierror - Go (golang) package for representing a list of errors as a single error.
tracerr - Golang errors with stack trace and source fragments.
werr - Error Wrapper creates an wrapper for the error type in Go which captures the File, Line and Stack of where it was called.

Files
Libraries for handling files and file systems.

afero - FileSystem Abstraction System for Go.
afs - Abstract File Storage (mem, scp, zip, tar, cloud: s3, gs) for Go.
bigfile - A file transfer system, support to manage files with http api, rpc call and ftp client.
checksum - Compute message digest, like MD5 and SHA256, for large files.
flop - File operations library which aims to mirror feature parity with GNU cp.
go-csv-tag - Load csv file using tag.
go-decent-copy - Copy files for humans.
go-exiftool - Go bindings for ExifTool, the well-known library used to extract as much metadata as possible (EXIF, IPTC, ...) from files (pictures, PDF, office, ...).
go-gtfs - Load gtfs files in go.
notify - File system event notification library with simple API, similar to os/signal.
opc - Load Open Packaging Conventions (OPC) files for Go.
parquet - Read and write parquet files.
pdfcpu - PDF processor.
skywalker - Package to allow one to concurrently go through a filesystem with ease.
stl - Modules to read and write STL (stereolithography) files.  Concurrent algorithm for reading.
tarfs - Implementation of the FileSystem interface for tar files.
vfs - A pluggable, extensible, and opinionated set of filesystem functionality for Go across a number of filesystem types such as os, S3, and GCS.

Financial
Packages for accounting and finance.

accounting - money and currency formatting for golang.
currency - High performant & accurate currency computation package.
decimal - Arbitrary-precision fixed-point decimal numbers.
go-finance - Comprehensive financial markets data in Go.
go-finance - Library of financial functions for time value of money (annuities), cash flow, interest rate conversions, bonds and depreciation calculations.
go-finance - Module to fetch exchange rates, check VAT numbers via VIES and check IBAN bank account numbers.
go-money - Implementation of Fowler's Money pattern.
ofxgo - Query OFX servers and/or parse the responses (with example command-line client).
orderbook - Matching Engine for Limit Order Book in Golang.
techan - Technical analysis library with advanced market analysis and trading strategies.
transaction - Embedded transactional database of accounts, running in multithreaded mode.
vat - VAT number validation & EU VAT rates.

Forms
Libraries for working with forms.

bind - Bind form data to any Go values.
binding - Binds form and JSON data from net/http Request to struct.
conform - Keeps user input in check. Trims, sanitizes & scrubs data based on struct tags.
form - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.
formam - decode form's values into a struct.
forms - Framework-agnostic library for parsing and validating form/JSON data which supports multipart forms and files.
gorilla/csrf - CSRF protection for Go web applications & services.
nosurf - CSRF protection middleware for Go.

Functional
Packages to support functional programming in Go.

fpGo - Monad, Functional Programming features for Golang.
fuego - Functional Experiment in Go.
go-underscore - Useful collection of helpfully functional Go collection utilities.

Game Development
Awesome game development libraries.

Azul3D - 3D game engine written in Go.
Ebiten - dead simple 2D game library in Go.
engo - Engo is an open-source 2D game engine written in Go. It follows the Entity-Component-System paradigm.
g3n - Go 3D Game Engine.
GarageEngine - 2d game engine written in Go working on OpenGL.
glop - Glop (Game Library Of Power) is a fairly simple cross-platform game library.
go-astar - Go implementation of the A* path finding algorithm.
go-collada - Go package for working with the Collada file format.
go-sdl2 - Go bindings for the Simple DirectMedia Layer.
go3d - Performance oriented 2D/3D math package for Go.
gonet - Game server skeleton implemented with golang.
goworld - Scalable game server engine, featuring space-entity framework and hot-swapping.
Leaf - Lightweight game server framework.
nano - Lightweight, facility, high performance golang based game server framework.
Oak - Pure Go game engine.
Pitaya - Scalable game server framework with clustering support and client libraries for iOS, Android, Unity and others through the C SDK.
Pixel - Hand-crafted 2D game library in Go.
raylib-go - Go bindings for raylib, a simple and easy-to-use library to learn videogames programming.
termloop - Terminal-based game engine for Go, built on top of Termbox.

Generation and Generics
Tools to enhance the language with features like generics via code generation.

efaceconv - Code generation tool for high performance conversion from interface{} to immutable type without allocations.
gen - Code generation tool for ‘generics’-like functionality.
generis - Code generation tool providing generics, free-form macros, conditional compilation and HTML templating.
go-enum - Code generation for enums from code comments.
go-linq - .NET LINQ-like query methods for Go.
go-xray - Helpers for making the use of reflection easier.
goderive - Derives functions from input types.
gotype - Golang source code parsing, usage like reflect package.
GoWrap - Generate decorators for Go interfaces using simple templates.
interfaces - Command line tool for generating interface definitions.
jennifer - Generate arbitrary Go code without templates.
pkgreflect - Go preprocessor for package scoped reflection.

Geographic
Geographic tools and servers

geocache - In-memory cache that is suitable for geolocation based applications.
geoserver - geoserver Is a Go Package For Manipulating a GeoServer Instance via the GeoServer REST API.
gismanager - Publish Your GIS Data(Vector Data) to PostGIS and Geoserver.
osm - Library for reading, writing and working with OpenStreetMap data and APIs.
pbf - OpenStreetMap PBF golang encoder/decoder.
S2 geometry - S2 geometry library in Go.
Tile38 - Geolocation DB with spatial index and realtime geofencing.
WGS84 - Library for Coordinate Conversion and Transformation (ETRS89, OSGB36, NAD83, RGF93, Web Mercator, UTM).

Go Compilers
Tools for compiling Go to other languages.

c4go - Transpile C code to Go code.
f4go - Transpile FORTRAN 77 code to Go code.
gopherjs - Compiler from Go to JavaScript.
llgo - LLVM-based compiler for Go.
tardisgo - Golang to Haxe to CPP/CSharp/Java/JavaScript transpiler.

Goroutines
Tools for managing and working with Goroutines.

ants - A high-performance goroutine pool for golang.
artifex - Simple in-memory job queue for Golang using worker-based dispatching.
async - A safe way to execute functions asynchronously, recovering them in case of panic.
breaker - Flexible mechanism to make execution flow interruptible.
cyclicbarrier - CyclicBarrier for golang.
go-floc - Orchestrate goroutines with ease.
go-flow - Control goroutines execution order.
go-tools/multithreading - Manage a pool of goroutines using this lightweight library with a simple API.
go-trylock - TryLock support on read-write lock for Golang.
go-waitgroup - Like sync.WaitGroup with error handling and concurrency control.
gohive - A highly performant and easy to use Goroutine pool for Go.
gollback - asynchronous simple function utilities, for managing execution of closures and callbacks.
GoSlaves - Simple and Asynchronous Goroutine pool library.
goworker - goworker is a Go-based background worker.
gowp - gowp is concurrency limiting goroutine pool.
gpool - manages a resizeable pool of context-aware goroutines to bound concurrency.
grpool - Lightweight Goroutine pool.
Hunch - Hunch provides functions like: All, First, Retry, Waterfall etc., that makes asynchronous flow control more intuitive.
oversight - Oversight is a complete implementation of the Erlang supervision trees.
parallel-fn - Run functions in parallel.
pool - Limited consumer goroutine or unlimited goroutine pool for easier goroutine handling and cancellation.
queue - Gives you a sync.WaitGroup like queue group accessibility. Helps you to throttle and limit goroutines, wait for the end of the all goroutines and much more.
routine - go routine control with context, support: Main, Go, Pool and some useful Executors.
semaphore - Semaphore pattern implementation with timeout of lock/unlock operations based on channel and context.
semaphore - Fast resizable semaphore implementation based on CAS (faster than channel-based semaphore implementations).
stl - Software transactional locks based on Software Transactional Memory (STM) concurrency control mechanism.
threadpool - Golang threadpool implementation.
tunny - Goroutine pool for golang.
worker-pool - goworker is a Go simple async worker pool.
workerpool - Goroutine pool that limits the concurrency of task execution, not the number of tasks queued.

GUI
Libraries for building GUI Applications.
Toolkits

app - Package to create apps with GO, HTML and CSS. Supports: MacOS, Windows in progress.
fyne - Cross platform native GUIs designed for Go, rendered using EFL. Supports: Linux, macOS, Windows.
go-astilectron - Build cross platform GUI apps with GO and HTML/JS/CSS (powered by Electron).
go-gtk - Go bindings for GTK.
go-sciter - Go bindings for Sciter: the Embeddable HTML/CSS/script engine for modern desktop UI development. Cross platform.
gotk3 - Go bindings for GTK3.
gowd - Rapid and simple desktop UI development with GO, HTML, CSS and NW.js. Cross platform.
qt - Qt binding for Go (support for Windows / macOS / Linux / Android / iOS / Sailfish OS / Raspberry Pi).
ui - Platform-native GUI library for Go. Cross platform.
Wails - Mac, Windows, Linux desktop apps with HTML UI using built-in OS HTML renderer.
walk - Windows application library kit for Go.
webview - Cross-platform webview window with simple two-way JavaScript bindings (Windows / macOS / Linux).

Interaction

go-appindicator - Go bindings for libappindicator3 C library.
gosx-notifier - OSX Desktop Notifications library for Go.
mac-activity-tracker - OSX library to notify about any (pluggable) activity on your machine.
mac-sleep-notifier - OSX Sleep/Wake notifications in golang.
robotgo - Go Native cross-platform GUI system automation. Control the mouse, keyboard and other.
systray - Cross platform Go library to place an icon and menu in the notification area.
trayhost - Cross-platform Go library to place an icon in the host operating system's taskbar.

Hardware
Libraries, tools, and tutorials for interacting with hardware.
See go-hardware for a comprehensive list.
Images
Libraries for manipulating images.

bild - Collection of image processing algorithms in pure Go.
bimg - Small package for fast and efficient image processing using libvips.
cameron - An avatar generator for Go.
canvas - Vector graphics to PDF, SVG or rasterized image.
darkroom - An image proxy with changeable storage backends and image processing engines with focus on speed and resiliency.
geopattern - Create beautiful generative image patterns from a string.
gg - 2D rendering in pure Go.
gift - Package of image processing filters.
gltf - Efficient and robust glTF 2.0 reader, writer and validator.
go-cairo - Go binding for the cairo graphics library.
go-gd - Go binding for GD library.
go-nude - Nudity detection with Go.
go-opencv - Go bindings for OpenCV.
go-webcolors - Port of webcolors library from Python to Go.
gocv - Go package for computer vision using OpenCV 3.3+.
goimagehash - Go Perceptual image hashing package.
goimghdr - The imghdr module determines the type of image contained in a file for Go.
govatar - Library and CMD tool for generating funny avatars.
image2ascii - Convert image to ASCII.
imagick - Go binding to ImageMagick's MagickWand C API.
imaginary - Fast and simple HTTP microservice for image resizing.
imaging - Simple Go image processing package.
img - Selection of image manipulation tools.
ln - 3D line art rendering in Go.
mergi - Tool & Go library for image manipulation (Merge, Crop, Resize, Watermark, Animate).
mort - Storage and image processing server written in Go.
mpo - Decoder and conversion tool for MPO 3D Photos.
picfit - An image resizing server written in Go.
pt - Path tracing engine written in Go.
resize - Image resizing for Go with common interpolation methods.
rez - Image resizing in pure Go and SIMD.
smartcrop - Finds good crops for arbitrary images and crop sizes.
steganography - Pure Go Library for LSB steganography.
stegify - Go tool for LSB steganography, capable of hiding any file within an image.
svgo - Go Language Library for SVG generation.
tga - Package tga is a TARGA image format decoder/encoder.

IoT (Internet of Things)
Libraries for programming devices of the IoT.

connectordb - Open-Source Platform for Quantified Self & IoT.
devices - Suite of libraries for IoT devices, experimental for x/exp/io.
eywa - Project Eywa is essentially a connection manager that keeps track of connected devices.
flogo - Project Flogo is an Open Source Framework for IoT Edge Apps & Integration.
gatt - Gatt is a Go package for building Bluetooth Low Energy peripherals.
gobot - Gobot is a framework for robotics, physical computing, and the Internet of Things.
huego - An extensive Philips Hue client library for Go.
iot - IoT is a simple framework for implementing a Google IoT Core device.
mainflux - Industrial IoT Messaging and Device Management Server.
periph - Peripherals I/O to interface with low-level board facilities.
sensorbee - Lightweight stream processing engine for IoT.

Job Scheduler
Libraries for scheduling jobs.

clockwerk - Go package to schedule periodic jobs using a simple, fluent syntax.
clockwork - Simple and intuitive job scheduling library in Go.
go-cron - Simple Cron library for go that can execute closures or functions at varying intervals, from once a second to once a year on a specific date and time. Primarily for web applications and long running daemons.
gron - Define time-based tasks using a simple Go API and Gron’s scheduler will run them accordingly.
JobRunner - Smart and featureful cron job scheduler with job queuing and live monitoring built in.
jobs - Persistent and flexible background jobs library.
leprechaun - Job scheduler that supports webhooks, crons and classic scheduling.
scheduler - Cronjobs scheduling made easy.

JSON
Libraries for working with JSON.

ajson - Abstract JSON for golang with JSONPath support.
gjo - Small utility to create JSON objects.
GJSON - Get a JSON value with one line of code.
go-jsonerror - Go-JsonError is ment to allow us to easily create json response errors that follow the JsonApi spec.
go-respond - Go package for handling common HTTP JSON responses.
gojq - JSON query in Golang.
gojson - Automatically generate Go (golang) struct definitions from example JSON.
JayDiff - JSON diff utility written in Go.
jettison - High performance, reflection-less JSON encoder for Go.
JSON-to-Go - Convert JSON to Go struct.
json2go - Advanced JSON to Go struct conversion. Provides package that can parse multiple JSON documents and create struct to fit them all.
jsonapi-errors - Go bindings based on the JSON API errors reference.
jsonf - Console tool for highlighted formatting and struct query fetching JSON.
jsongo - Fluent API to make it easier to create Json objects.
jsonhal - Simple Go package to make custom structs marshal into HAL compatible JSON responses.
kazaam - API for arbitrary transformation of JSON documents.
mp - Simple cli email parser. It currently takes stdin and outputs JSON.

Logging
Libraries for generating and working with log files.

distillog - distilled levelled logging (think of it as stdlib + log levels).
glg - glg is simple and fast leveled logging library for Go.
glo - PHP Monolog inspired logging facility with identical severity levels.
glog - Leveled execution logs for Go.
go-cronowriter - Simple writer that rotate log files automatically based on current date and time, like cronolog.
go-log - A logging library with strack traces, object dumping and optional timestamps.
go-log - Simple and configurable Logging in Go, with level, formatters and writers.
go-log - Log lib supports level and multi handlers.
go-log - Log4j implementation in Go.
go-logger - Simple logger of Go Programs, with level handlers.
gologger - Simple easy to use log lib for go, logs in Colored Console, Simple Console, File or Elasticsearch.
gomol - Multiple-output, structured logging for Go with extensible logging outputs.
gone/log - Fast, extendable, full-featured, std-lib source compatible log library.
journald - Go implementation of systemd Journal's native API for logging.
log - An O(1) logging system that allows you to connect one log to multiple writers (e.g. stdout, a file and a TCP connection).
log - Structured logging package for Go.
log - Simple, configurable and scalable Structured Logging for Go.
log - Structured log interface for Go cleanly separates logging facade from its implementation.
log-voyage - Full-featured logging saas written in golang.
log15 - Simple, powerful logging for Go.
logdump - Package for multi-level logging.
logex - Golang log lib, supports tracking and level, wrap by standard log lib.
logger - Minimalistic logging library for Go.
logmatic - Colorized logger for Golang with dynamic log level configuration.
logo - Golang logger to different configurable writers.
logrus - Structured logger for Go.
logrusiowriter - io.Writer implementation using logrus logger.
logrusly - logrus plug-in to send errors to a Loggly.
logutils - Utilities for slightly better logging in Go (Golang) extending the standard logger.
logxi - 12-factor app logger that is fast and makes you happy.
lumberjack - Simple rolling logger, implements io.WriteCloser.
mlog - Simple logging module for go, with 5 levels, an optional rotating logfile feature and stdout/stderr output.
onelog - Onelog is a dead simple but very efficient JSON logger. It is the fastest JSON logger out there in all scenario. Also, it is one of the logger with the lowest allocation.
ozzo-log - High performance logging supporting log severity, categorization, and filtering. Can send filtered log messages to various targets (e.g. console, network, mail).
rollingwriter - RollingWriter is an auto-rotate io.Writer implementation with multi policies to provide log file rotation.
seelog - Logging functionality with flexible dispatching, filtering, and formatting.
spew - Implements a deep pretty printer for Go data structures to aid in debugging.
stdlog - Stdlog is an object-oriented library providing leveled logging. It is very useful for cron jobs.
tail - Go package striving to emulate the features of the BSD tail program.
xlog - Plugin architecture and flexible log system for Go, with level ctrl, multiple log target and custom log format.
xlog - Structured logger for net/context aware HTTP handlers with flexible dispatching.
zap - Fast, structured, leveled logging in Go.
zerolog - Zero-allocation JSON logger.

Machine Learning
Libraries for Machine Learning.

bayesian - Naive Bayesian Classification for Golang.
CloudForest - Fast, flexible, multi-threaded ensembles of decision trees for machine learning in pure Go.
eaopt - An evolutionary optimization library.
evoli - Genetic Algorithm and Particle Swarm Optimization library.
fonet - A Deep Neural Network library written in Go.
go-cluster - Go implementation of the k-modes and k-prototypes clustering algorithms.
go-deep - A feature-rich neural network library in Go.
go-fann - Go bindings for Fast Artificial Neural Networks(FANN) library.
go-galib - Genetic Algorithms library written in Go / golang.
go-pr - Pattern recognition package in Go lang.
gobrain - Neural Networks written in go.
godist - Various probability distributions, and associated methods.
goga - Genetic algorithm library for Go.
GoLearn - General Machine Learning library for Go.
golinear - liblinear bindings for Go.
GoMind - A simplistic Neural Network Library in Go.
goml - On-line Machine Learning in Go.
Goptuna - Bayesian optimization framework for black-box functions written in Go. Everything will be optimized.
goRecommend - Recommendation Algorithms library written in Go.
gorgonia - graph-based computational library like Theano for Go that provides primitives for building various machine learning and neural network algorithms.
gorse - An offline recommender system backend based on collaborative filtering written in Go.
goscore - Go Scoring API for PMML.
gosseract - Go package for OCR (Optical Character Recognition), by using Tesseract C++ library.
libsvm - libsvm golang version derived work based on LIBSVM 3.14.
neat - Plug-and-play, parallel Go framework for NeuroEvolution of Augmenting Topologies (NEAT).
neural-go - Multilayer perceptron network implemented in Go, with training via backpropagation.
ocrserver - A simple OCR API server, seriously easy to be deployed by Docker and Heroku.
onnx-go - Go Interface to Open Neural Network Exchange (ONNX).
probab - Probability distribution functions. Bayesian inference. Written in pure Go.
regommend - Recommendation & collaborative filtering engine.
shield - Bayesian text classifier with flexible tokenizers and storage backends for Go.
tfgo - Easy to use Tensorflow bindings: simplifies the usage of the official Tensorflow Go bindings. Define computational graphs in Go, load and execute models trained in Python.
Varis - Golang Neural Network.

Messaging
Libraries that implement messaging systems.

APNs2 - HTTP/2 Apple Push Notification provider for Go — Send push notifications to iOS, tvOS, Safari and OSX apps.
Beaver - A real time messaging server to build a scalable in-app notifications, multiplayer games, chat apps in web and mobile apps.
Benthos - A message streaming bridge between a range of protocols.
Bus - Minimalist message bus implementation for internal communication.
Centrifugo - Real-time messaging (Websockets or SockJS) server in Go.
Commander - A high-level event driven consumer/producer supporting various ""dialects"" such as Apache Kafka.
dbus - Native Go bindings for D-Bus.
drone-line - Sending Line notifications using a binary, docker or Drone CI.
emitter - Emits events using Go way, with wildcard, predicates, cancellation possibilities and many other good wins.
event - Implementation of the pattern observer.
EventBus - The lightweight event bus with async compatibility.
gaurun-client - Gaurun Client written in Go.
Glue - Robust Go and Javascript Socket Library (Alternative to Socket.io).
go-notify - Native implementation of the freedesktop notification spec.
go-nsq - the official Go package for NSQ.
go-socket.io - socket.io library for golang, a realtime application framework.
go-vitotrol - Client library to Viessmann Vitotrol web service.
Gollum - A n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations.
golongpoll - HTTP longpoll server library that makes web pub-sub simple.
gopush-cluster - gopush-cluster is a go push server cluster.
gorush - Push notification server using APNs2 and google GCM.
guble - Messaging server using push notifications (Google Firebase Cloud Messaging, Apple Push Notification services, SMS) as well as websockets, a REST API, featuring distributed operation and message-persistence.
hub - A Message/Event Hub for Go applications, using publish/subscribe pattern with support for alias like rabbitMQ exchanges.
jazz - A simple RabbitMQ abstraction layer for queue administration and publishing and consuming of messages.
machinery - Asynchronous task queue/job queue based on distributed message passing.
mangos - Pure go implementation of the Nanomsg (""Scalable Protocols"") with transport interoperability.
melody - Minimalist framework for dealing with websocket sessions, includes broadcasting and automatic ping/pong handling.
Mercure - Server and library to dispatch server-sent updates using the Mercure protocol (built on top of Server-Sent Events).
messagebus - messagebus is a Go simple async message bus, perfect for using as event bus when doing event sourcing, CQRS, DDD.
NATS Go Client - Lightweight and high performance publish-subscribe and distributed queueing messaging system - this is the Go library.
nsq-event-bus - A tiny wrapper around NSQ topic and channel.
oplog - Generic oplog/replication system for REST APIs.
pubsub - Simple pubsub package for go.
rabbus - A tiny wrapper over amqp exchanges and queues.
rabtap - RabbitMQ swiss army knife cli app.
RapidMQ - RapidMQ is a lightweight and reliable library for managing of the local messages queue.
redisqueue - redisqueue provides a producer and consumer of a queue that uses Redis streams.
rmqconn - RabbitMQ Reconnection. Wrapper over amqp.Connection and amqp.Dial. Allowing to do a reconnection when the connection is broken before forcing the call to the Close () method to be closed.
sarama - Go library for Apache Kafka.
Uniqush-Push - Redis backed unified push service for server-side notifications to mobile devices.
zmq4 - Go interface to ZeroMQ version 4. Also available for version 3 and version 2.

Microsoft Office

unioffice - Pure go library for creating and processing Office Word (.docx), Excel (.xlsx) and Powerpoint (.pptx) documents.

Microsoft Excel
Libraries for working with Microsoft Excel.

excelize - Golang library for reading and writing Microsoft Excel™ (XLSX) files.
go-excel - A simple and light reader to read a relate-db-like excel as a table.
goxlsxwriter - Golang bindings for libxlsxwriter for writing XLSX (Microsoft Excel) files.
xlsx - Library to simplify reading the XML format used by recent version of Microsoft Excel in Go programs.
xlsx - Fast and safe way to read/update your existing Microsoft Excel files in Go programs.

Miscellaneous
Dependency Injection
Libraries for working with dependency injection.

alice - Additive dependency injection container for Golang.
container - A powerful IoC Container with fluent and easy-to-use interface.
dig - A reflection based dependency injection toolkit for Go.
fx - A dependency injection based application framework for Go (built on top of dig).
gocontainer - Simple Dependency Injection Container.
inject - A reflection based dependency injection container with simple interface.
linker - A reflection based dependency injection and inversion of control library with components lifecycle support.
wire - Strict Runtime Dependency Injection for Golang.

Project Layout
Unofficial set of patterns for structuring projects.

go-sample - A sample layout for Go application projects with the real code.
golang-standards/project-layout - Set of common historical and emerging project layout patterns in the Go ecosystem.
modern-go-application - Go application boilerplate and example applying modern practices.
scaffold - Scaffold generates starter Go project layout. Lets you focus on business logic implemeted.

Strings
Libraries for working with strings.

strutil - String utilities.
xstrings - Collection of useful string functions ported from other languages.

These libraries were placed here because none of the other categories seemed to fit.

anagent - Minimalistic, pluggable Golang evloop/timer handler with dependency-injection.
antch - A fast, powerful and extensible web crawling & scraping framework.
archiver - Library and command for making and extracting .zip and .tar.gz archives.
autoflags - Go package to automatically define command line flags from struct fields.
avgRating - Calculate average score and rating based on Wilson Score Equation.
banner - Add beautiful banners into your Go applications.
base64Captcha - Base64captch supports digit, number, alphabet, arithmetic, audio and digit-alphabet captcha.
battery - Cross-platform, normalized battery information library.
bitio - Highly optimized bit-level Reader and Writer for Go.
browscap_go - GoLang Library for Browser Capabilities Project.
captcha - Package captcha provides an easy to use, unopinionated API for captcha generation.
conv - Package conv provides fast and intuitive conversions across Go types.
datacounter - Go counters for readers/writer/http.ResponseWriter.
ffmt - Beautify data display for Humans.
ghorg - Quickly clone an entire org/users repositories into one directory - Supports GitHub, GitLab, and Bitbucket.
go-commons-pool - Generic object pool for Golang.
go-openapi - Collection of packages to parse and utilize open-api schemas.
go-resiliency - Resiliency patterns for golang.
go-unarr - Decompression library for RAR, TAR, ZIP and 7z archives.
gofakeit - Random data generator written in go.
gommit - Analyze git commit messages to ensure they follow defined patterns.
gopsutil - Cross-platform library for retrieving process and system utilization(CPU, Memory, Disks, etc).
gosh - Provide Go Statistics Handler, Struct, Measure Method.
gosms - Your own local SMS gateway in Go that can be used to send SMS.
gotoprom - Type-safe metrics builder wrapper library for the official Prometheus client.
gountries - Package that exposes country and subdivision data.
health - Easy to use, extensible health check library.
healthcheck - An opinionated and concurrent health-check HTTP handler for RESTful services.
hostutils - A golang library for packing and unpacking FQDNs list.
indigo - Distributed unique ID generator of using Sonyflake and encoded by Base58.
lk - A simple licensing library for golang.
llvm - Library for interacting with LLVM IR in pure Go.
metrics - Library for metrics instrumentation and Prometheus exposition.
morse - Library to convert to and from morse code.
numa - NUMA is a utility library, which is written in go. It help us to write some NUMA-AWARED code.
pdfgen - HTTP service to generate PDF from Json requests.
persian - Some utilities for Persian language in go.
sandid - Every grain of sand on earth has its own ID.
shellwords - A Golang library to manipulate strings according to the word parsing rules of the UNIX Bourne shell.
shortid - Distributed generation of super short, unique, non-sequential, URL friendly IDs.
stateless - A fluent library for creating state machines.
stats - Monitors Go MemStats + System stats such as Memory, Swap and CPU and sends via UDP anywhere you want for logging etc...
turtle - Emojis for Go.
url-shortener - A modern, powerful, and robust URL shortener microservice with mysql support.
VarHandler - Generate boilerplate http input and output handling.
xdg - FreeDesktop.org (xdg) Specs implemented in Go.
xkg - X Keyboard Grabber.

Natural Language Processing
Libraries for working with human languages.

getlang - Fast natural language detection package.
go-i18n - Package and an accompanying tool to work with localized text.
go-mystem - CGo bindings to Yandex.Mystem - russian morphology analyzer.
go-nlp - Utilities for working with discrete probability distributions and other tools useful for doing NLP work.
go-pinyin - CN Hanzi to Hanyu Pinyin converter.
go-stem - Implementation of the porter stemming algorithm.
go-unidecode - ASCII transliterations of Unicode text.
go2vec - Reader and utility functions for word2vec embeddings.
gojieba - This is a Go implementation of jieba which a Chinese word splitting algorithm.
golibstemmer - Go bindings for the snowball libstemmer library including porter 2.
gotokenizer - A tokenizer based on the dictionary and Bigram language models for Golang. (Now only support chinese segmentation)
gounidecode - Unicode transliterator (also known as unidecode) for Go.
gse - Go efficient text segmentation; support english, chinese, japanese and other.
icu - Cgo binding for icu4c C library detection and conversion functions. Guaranteed compatibility with version 50.1.
kagome - JP morphological analyzer written in pure Go.
libtextcat - Cgo binding for libtextcat C library. Guaranteed compatibility with version 2.2.
MMSEGO - This is a GO implementation of MMSEG which a Chinese word splitting algorithm.
nlp - Extract values from strings and fill your structs with nlp.
nlp - Go Natural Language Processing library supporting LSA (Latent Semantic Analysis).
paicehusk - Golang implementation of the Paice/Husk Stemming Algorithm.
petrovich - Petrovich is the library which inflects Russian names to given grammatical case.
porter - This is a fairly straightforward port of Martin Porter's C implementation of the Porter stemming algorithm.
porter2 - Really fast Porter 2 stemmer.
prose - Library for text processing that supports tokenization, part-of-speech tagging, named-entity extraction, and more. English only.
RAKE.go - Go port of the Rapid Automatic Keyword Extraction Algorithm (RAKE).
segment - Go library for performing Unicode Text Segmentation as described in Unicode Standard Annex #29
sentences - Sentence tokenizer:  converts text into a list of sentences.
shamoji - The shamoji is word filtering package written in Go.
snowball - Snowball stemmer port (cgo wrapper) for Go. Provides word stem extraction functionality Snowball native.
stemmer - Stemmer packages for Go programming language. Includes English and German stemmers.
textcat - Go package for n-gram based text categorization, with support for utf-8 and raw text.
whatlanggo - Natural language detection package for Go. Supports 84 languages and 24 scripts (writing systems e.g. Latin, Cyrillic, etc).
when - Natural EN and RU language date/time parser with pluggable rules.

Networking
Libraries for working with various layers of the network.

arp - Package arp implements the ARP protocol, as described in RFC 826.
buffstreams - Streaming protocolbuffer data over TCP made easy.
canopus - CoAP Client/Server implementation (RFC 7252).
cidranger - Fast IP to CIDR lookup for Go.
dhcp6 - Package dhcp6 implements a DHCPv6 server, as described in RFC 3315.
dns - Go library for working with DNS.
ether - Cross-platform Go package for sending and receiving ethernet frames.
ethernet - Package ethernet implements marshaling and unmarshaling of IEEE 802.3 Ethernet II frames and IEEE 802.1Q VLAN tags.
fasthttp - Package fasthttp is a fast HTTP implementation for Go, up to 10 times faster than net/http.
fortio - Load testing library and command line tool, advanced echo server and web UI. Allows to specify a set query-per-second load and record latency histograms and other useful stats and graph them. Tcp, Http, gRPC.
ftp - Package ftp implements a FTP client as described in RFC 959.
gev - gev is a lightweight, fast non-blocking TCP network library based on Reactor mode.
gmqtt - Gmqtt is a flexible, high-performance MQTT broker library that fully implements the MQTT protocol V3.1.1.
gnet - gnet is a high-performance, lightweight, nonblocking, event-loop networking library written in pure Go.
gNxI - A collection of tools for Network Management that use the gNMI and gNOI protocols.
go-getter - Go library for downloading files or directories from various sources using a URL.
go-powerdns - PowerDNS API bindings for Golang.
go-stun - Go implementation of the STUN client (RFC 3489 and RFC 5389).
gobgp - BGP implemented in the Go Programming Language.
golibwireshark - Package golibwireshark use libwireshark library to decode pcap file and analyse dissection data.
gopacket - Go library for packet processing with libpcap bindings.
gopcap - Go wrapper for libpcap.
goshark - Package goshark use tshark to decode IP packet and create data struct to analyse packet.
gosnmp - Native Go library for performing SNMP actions.
gosocsvr - Socket server made simple.
gotcp - Go package for quickly writing tcp applications.
grab - Go package for managing file downloads.
graval - Experimental FTP server framework.
HTTPLab - HTTPLabs let you inspect HTTP requests and forge responses.
iplib - Library for working with IP addresses (net.IP, net.IPNet), inspired by python ipaddress and ruby ipaddr
jazigo - Jazigo is a tool written in Go for retrieving configuration for multiple network devices.
kcp-go - KCP - Fast and Reliable ARQ Protocol.
kcptun - Extremely simple & fast udp tunnel based on KCP protocol.
lhttp - Powerful websocket framework, build your IM server more easily.
linkio - Network link speed simulation for Reader/Writer interfaces.
llb - It's a very simple but quick backend for proxy servers. Can be useful for fast redirection to predefined domain with zero memory allocation and fast response.
mdns - Simple mDNS (Multicast DNS) client/server library in Golang.
mqttPaho - The Paho Go Client provides an MQTT client library for connection to MQTT brokers via TCP, TLS or WebSockets.
NFF-Go - Framework for rapid development of performant network functions for cloud and bare-metal (former YANFF).
packet - Send packets over TCP and UDP. It can buffer messages and hot-swap connections if needed.
peerdiscovery - Pure Go library for cross-platform local peer discovery using UDP multicast.
portproxy - Simple TCP proxy which adds CORS support to API's which don't support it.
publicip - Package publicip returns your public facing IPv4 address (internet egress).
quic-go - An implementation of the QUIC protocol in pure Go.
raw - Package raw enables reading and writing data at the device driver level for a network interface.
sftp - Package sftp implements the SSH File Transfer Protocol as described in https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt.
ssh - Higher-level API for building SSH servers (wraps crypto/ssh).
sslb - It's a Super Simples Load Balancer, just a little project to achieve some kind of performance.
stun - Go implementation of RFC 5389 STUN protocol.
tcp_server - Go library for building tcp servers faster.
tspool - A TCP Library use worker pool to improve performance and protect your server.
utp - Go uTP micro transport protocol implementation.
water - Simple TUN/TAP library.
webrtc - A pure Go implementation of the WebRTC API.
winrm - Go WinRM client to remotely execute commands on Windows machines.
xtcp - TCP Server Framework with simultaneous full duplex communication,graceful shutdown,custom protocol.

HTTP Clients
Libraries for making HTTP requests.

gentleman - Full-featured plugin-driven HTTP client library.
grequests - A Go ""clone"" of the great and famous Requests library.
heimdall - An enchanced http client with retry and hystrix capabilities.
pester - Go HTTP client calls with retries, backoff, and concurrency.
resty - Simple HTTP and REST client for Go inspired by Ruby rest-client.
rq - A nicer interface for golang stdlib HTTP client.
sling - Sling is a Go HTTP client library for creating and sending API requests.
sreq - A simple, user-friendly and concurrent safe HTTP request library for Go.

OpenGL
Libraries for using OpenGL in Go.

gl - Go bindings for OpenGL (generated via glow).
glfw - Go bindings for GLFW 3.
goxjs/gl - Go cross-platform OpenGL bindings (OS X, Linux, Windows, browsers, iOS, Android).
goxjs/glfw - Go cross-platform glfw library for creating an OpenGL context and receiving events.
mathgl - Pure Go math package specialized for 3D math, with inspiration from GLM.

ORM
Libraries that implement Object-Relational Mapping or datamapping techniques.

beego orm - Powerful orm framework for go. Support: pq/mysql/sqlite3.
go-firestorm - A simple ORM for Google/Firebase Cloud Firestore.
go-pg - PostgreSQL ORM with focus on PostgreSQL specific features and performance.
go-queryset - 100% type-safe ORM with code generation and MySQL, PostgreSQL, Sqlite3, SQL Server support based on GORM.
go-sqlbuilder - A flexible and powerful SQL string builder library plus a zero-config ORM.
go-store - Simple and fast Redis backed key-value store library for Go.
GORM - The fantastic ORM library for Golang, aims to be developer friendly.
gorp - Go Relational Persistence, ORM-ish library for Go.
grimoire - Grimoire is a database access layer and validation for golang. (Support: MySQL, PostgreSQL and SQLite3).
lore - Simple and lightweight pseudo-ORM/pseudo-struct-mapping environment for Go.
Marlow - Generated ORM from project structs for compile time safety assurances.
pop/soda - Database migration, creation, ORM, etc... for MySQL, PostgreSQL, and SQLite.
QBS - Stands for Query By Struct. A Go ORM.
reform - Better ORM for Go, based on non-empty interfaces and code generation.
SQLBoiler - ORM generator. Generate a featureful and blazing-fast ORM tailored to your database schema.
upper.io/db - Single interface for interacting with different data sources through the use of adapters that wrap mature database drivers.
Xorm - Simple and powerful ORM for Go.
Zoom - Blazing-fast datastore and querying engine built on Redis.

Package Management
Official tooling for dependency and package management

go modules - Modules are the unit of source code interchange and versioning. The go command has direct support for working with modules, including recording and resolving dependencies on other modules.

Official experimental tooling for package management

dep - Go dependency tool.
vgo - Versioned Go.

Unofficial libraries for package and dependency management.

gigo - PIP-like dependency tool for golang, with support for private repositories and hashes.
glide - Manage your golang vendor and vendored packages with ease. Inspired by tools like Maven, Bundler, and Pip.
godep - dependency tool for go, godep helps build packages reproducibly by fixing their dependencies.
gom - Go Manager - bundle for go.
goop - Simple dependency manager for Go (golang), inspired by Bundler.
gop - Build and manage your Go applications out of GOPATH.
gopm - Go Package Manager.
govendor - Go Package Manager. Go vendor tool that works with the standard vendor file.
gpm - Barebones dependency manager for Go.
johnny-deps - Minimal dependency version using Git.
mvn-golang - plugin that provides way for auto-loading of Golang SDK, dependency management and start build environment in Maven project infrastructure.
nut - Vendor Go dependencies.
VenGO - create and manage exportable isolated go virtual environments.

Performance

jaeger - A distributed tracing system.
profile - Simple profiling support package for Go.
tracer - Simple, lightweight tracing.

Query Language

gojsonq - A simple Go package to Query over JSON Data.
graphql - graphql parser + utilities.
graphql - GraphQL server with a focus on ease of use.
graphql-go - Implementation of GraphQL for Go.
jsonql - JSON query expression library in Golang.
jsonslice - Jsonpath queries with advanced filters.
rql - Resource Query Language for REST API.
straf - Easily Convert Golang structs to GraphQL objects.

Resource Embedding

esc - Embeds files into Go programs and provides http.FileSystem interfaces to them.
fileb0x - Simple tool to embed files in go with focus on ""customization"" and ease to use.
go-embed - Generates go code to embed resource files into your library or executable.
go-resources - Unfancy resources embedding with Go.
go.rice - go.rice is a Go package that makes working with resources such as html,js,css,images and templates very easy.
packr - The simple and easy way to embed static files into Go binaries.
statics - Embeds static resources into go files for single binary compilation + works with http.FileSystem + symlinks.
statik - Embeds static files into a Go executable.
templify - Embed external template files into Go code to create single file binaries.
vfsgen - Generates a vfsdata.go file that statically implements the given virtual filesystem.

Science and Data Analysis
Libraries for scientific computing and data analyzing.

assocentity - Package assocentity returns the average distance from words to a given entity.
bradleyterry - Provides a Bradley-Terry Model for pairwise comparisons.
chart - Simple Chart Plotting library for Go. Supports many graphs types.
dataframe-go - Dataframes for machine-learning and statistics (similar to pandas).
evaler - Simple floating point arithmetic expression evaluator.
ewma - Exponentially-weighted moving averages.
geom - 2D geometry for golang.
go-dsp - Digital Signal Processing for Go.
go-gt - Graph theory algorithms written in ""Go"" language.
goent - GO Implementation of Entropy Measures.
gohistogram - Approximate histograms for data streams.
gonum - Gonum is a set of numeric libraries for the Go programming language. It contains libraries for matrices, statistics, optimization, and more.
gonum/plot - gonum/plot provides an API for building and drawing plots in Go.
goraph - Pure Go graph theory library(data structure, algorith visualization).
gosl - Go scientific library for linear algebra, FFT, geometry, NURBS, numerical methods, probabilities, optimisation, differential equations, and more.
GoStats - GoStats is an Open Source GoLang library for math statistics mostly used in Machine Learning domains, it covers most of the Statistical measures functions.
graph - Library of basic graph algorithms.
ode - Ordinary differential equation (ODE) solver which supports extended states and channel-based iteration stop conditions.
orb - 2D geometry types with clipping, GeoJSON and Mapbox Vector Tile support.
pagerank - Weighted PageRank algorithm implemented in Go.
piecewiselinear - Tiny linear interpolation library.
PiHex - Implementation of the ""Bailey-Borwein-Plouffe"" algorithm for the hexadecimal number Pi.
rootfinding - root-finding algorithms library for finding roots of quadratic functions.
sparse - Go Sparse matrix formats for linear algebra supporting scientific and machine learning applications, compatible with gonum matrix libraries.
stats - Statistics package with common functions missing from the Golang standard library.
streamtools - general purpose, graphical tool for dealing with streams of data.
TextRank - TextRank implementation in Golang with extendable features (summarization, weighting, phrase extraction) and multithreading (goroutine) support.
triangolatte - 2D triangulation library. Allows translating lines and polygons (both based on points) to the language of GPUs.

Security
Libraries that are used to help make your application more secure.

acmetool - ACME (Let's Encrypt) client tool with automatic renewal.
acra - Network encryption proxy to protect database-based applications from data leaks: strong selective encryption, SQL injections prevention, intrusion detection system.
argon2pw - Argon2 password hash generation with constant-time password comparison.
autocert - Auto provision Let's Encrypt certificates and start a TLS server.
BadActor - In-memory, application-driven jailer built in the spirit of fail2ban.
Cameradar - Tool and library to remotely hack RTSP streams from surveillance cameras.
certificates - An opinionated tool for generating tls certificates.
go-yara - Go Bindings for YARA, the ""pattern matching swiss knife for malware researchers (and everyone else)"".
goArgonPass - Argon2 password hash and verification designed to be compatible with existing Python and PHP implementations.
goSecretBoxPassword - A probably paranoid package for securely hashing and encrypting passwords.
Interpol - Rule-based data generator for fuzzing and penetration testing.
lego - Pure Go ACME client library and CLI tool (for use with Let's Encrypt).
memguard - A pure Go library for handling sensitive values in memory.
nacl - Go implementation of the NaCL set of API's.
passlib - Futureproof password hashing library.
secure - HTTP middleware for Go that facilitates some quick security wins.
simple-scrypt - Scrypt package with a simple, obvious API and automatic cost calibration built-in.
ssh-vault - encrypt/decrypt using ssh keys.
sslmgr - SSL certificates made easy with a high level wrapper around acme/autocert.

Serialization
Libraries and tools for binary serialization.

asn1 - Asn.1 BER and DER encoding library for golang.
bambam - generator for Cap'n Proto schemas from go.
bel - Generate TypeScript interfaces from Go structs/interfaces. Useful for JSON RPC.
binstruct - Golang binary decoder for mapping data into the structure.
cbor - Small, safe, and easy CBOR encoding and decoding library.
colfer - Code generation for the Colfer binary format.
csvutil - High Performance, idiomatic CSV record encoding and decoding to native Go structures.
fwencoder - Fixed width file parser (encoding and decoding library) for Go.
go-capnproto - Cap'n Proto library and parser for go.
go-codec - High Performance, feature-Rich, idiomatic encode, decode and rpc library for msgpack, cbor and json, with runtime-based OR code-generation support.
gogoprotobuf - Protocol Buffers for Go with Gadgets.
goprotobuf - Go support, in the form of a library and protocol compiler plugin, for Google's protocol buffers.
jsoniter - High-performance 100% compatible drop-in replacement of ""encoding/json"".
mapstructure - Go library for decoding generic map values into native Go structures.
php_session_decoder - GoLang library for working with PHP session format and PHP Serialize/Unserialize functions.
pletter - A standard way to wrap a proto message for message brokers.
structomap - Library to easily and dynamically generate maps from static structures.

Server Applications

algernon - HTTP/2 web server with built-in support for Lua, Markdown, GCSS and Amber.
Caddy - Caddy is an alternative, HTTP/2 web server that's easy to configure and use.
consul - Consul is a tool for service discovery, monitoring and configuration.
devd - Local webserver for developers.
discovery - A registry for resilient mid-tier load balancing and failover.
dudeldu - A simple SHOUTcast server.
etcd - Highly-available key value store for shared configuration and service discovery.
Fider - Fider is an open platform to collect and organize customer feedback.
Flagr - Flagr is an open-source feature flagging and A/B testing service.
flipt - A self contained feature flag solution written in Go and Vue.js
jackal - An XMPP server written in Go.
minio - Minio is a distributed object storage server.
nginx-prometheus - Nginx log parser and exporter to Prometheus.
nsq - A realtime distributed messaging platform.
psql-streamer - Stream database events from PostgreSQL to Kafka.
riemann-relay - Relay to load-balance Riemann events and/or convert them to Carbon.
RoadRunner - High-performance PHP application server, load-balancer and process manager.
SFTPGo - Full featured and highly configurable SFTP server software.
yakvs - Small, networked, in-memory key-value store.

Stream Processing
Libraries and tools for stream processing and reactive programming.

go-streams - Go stream processing library.

Template Engines
Libraries and tools for templating and lexing.

ace - Ace is an HTML template engine for Go, inspired by Slim and Jade. Ace is a refinement of Gold.
amber - Amber is an elegant templating engine for Go Programming Language It is inspired from HAML and Jade.
damsel - Markup language featuring html outlining via css-selectors, extensible via pkg html/template and others.
ego - Lightweight templating language that lets you write templates in Go. Templates are translated into Go and compiled.
extemplate - Tiny wrapper around html/template to allow for easy file-based template inheritance.
fasttemplate - Simple and fast template engine. Substitutes template placeholders up to 10x faster than text/template.
gofpdf - PDF document generator with high level support for text, drawing and images.
gospin - Article spinning and spintax/spinning syntax engine, useful for A/B, testing pieces of text/articles and creating more natural conversations.
goview - Goview is a lightweight, minimalist and idiomatic template library based on golang html/template for building Go web application.
hero - Hero is a handy, fast and powerful go template engine.
jet - Jet template engine.
kasia.go - Templating system for HTML and other text documents - go implementation.
liquid - Go implementation of Shopify Liquid templates.
maroto - A maroto way to create PDFs. Maroto is inspired in Bootstrap and uses gofpdf. Fast and simple.
mustache - Go implementation of the Mustache template language.
pongo2 - Django-like template-engine for Go.
quicktemplate - Fast, powerful, yet easy to use template engine. Converts templates into Go code and then compiles it.
raymond - Complete handlebars implementation in Go.
Razor - Razor view engine for Golang.
Soy - Closure templates (aka Soy templates) for Go, following the official spec.
velvet - Complete handlebars implementation in Go.

Testing
Libraries for testing codebases and generating test data.


Testing Frameworks

apitest - Simple and extensible behavioural testing library for REST based services or HTTP handlers that supports mocking external http calls and rendering of sequence diagrams.
assert - Basic Assertion Library used along side native go testing, with building blocks for custom assertions.
badio - Extensions to Go's testing/iotest package.
baloo - Expressive and versatile end-to-end HTTP API testing made easy.
biff - Bifurcation testing framework, BDD compatible.
charlatan - Tool to generate fake interface implementations for tests.
commander - Tool for testing cli applications on windows, linux and osx.
cupaloy - Simple snapshot testing addon for your test framework.
dbcleaner - Clean database for testing purpose, inspired by database_cleaner in Ruby.
dsunit - Datastore testing for SQL, NoSQL, structured files.
endly - Declarative end to end functional testing.
flute - HTTP client testing framework.
frisby - REST API testing framework.
ginkgo - BDD Testing Framework for Go.
go-carpet - Tool for viewing test coverage in terminal.
go-cmp - Package for comparing Go values in tests.
go-mutesting - Mutation testing for Go source code.
go-testdeep - Extremely flexible golang deep comparison, extends the go testing package.
go-vcr - Record and replay your HTTP interactions for fast, deterministic and accurate tests.
goblin - Mocha like testing framework fo Go.
gocheck - More advanced testing framework alternative to gotest.
GoConvey - BDD-style framework with web UI and live reload.
gocrest - Composable hamcrest-like matchers for Go assertions.
godog - Cucumber or Behat like BDD framework for Go.
gofight - API Handler Testing for Golang Router framework.
gogiven - YATSPEC-like BDD testing framework for Go.
gomatch - library created for testing JSON against patterns.
gomega - Rspec like matcher/assertion library.
GoSpec - BDD-style testing framework for the Go programming language.
gospecify - This provides a BDD syntax for testing your Go code. It should be familiar to anybody who has used libraries such as rspec.
gosuite - Brings lightweight test suites with setup/teardown facilities to testing by leveraging Go1.7's Subtests.
gotest.tools - A collection of packages to augment the go testing package and support common patterns.
Hamcrest - fluent framework for declarative Matcher objects that, when applied to input values, produce self-describing results.
httpexpect - Concise, declarative, and easy to use end-to-end HTTP and REST API testing.
jsonassert - Package for verifying that your JSON payloads are serialized correctly.
restit - Go micro framework to help writing RESTful API integration test.
schema - Quick and easy expression matching for JSON schemas used in requests and responses.
testcase - Idiomatic testing framework for Behavior Driven Development.
testfixtures - A helper for Rails' like test fixtures to test database applications.
Testify - Sacred extension to the standard go testing package.
testmd - Convert markdown snippets into testable go code.
testsql - Generate test data from SQL files before testing and clear it after finished.
trial - Quick and easy extendable assertions without introducing much boilerplate.
Tt - Simple and colorful test tools.
wstest - Websocket client for unit-testing a websocket http.Handler.



Mock

counterfeiter - Tool for generating self-contained mock objects.
go-sqlmock - Mock SQL driver for testing database interactions.
go-txdb - Single transaction based database driver mainly for testing purposes.
gock - Versatile HTTP mocking made easy.
gomock - Mocking framework for the Go programming language.
govcr - HTTP mock for Golang: record and replay HTTP interactions for offline testing.
hoverfly - HTTP(S) proxy for recording and simulating REST/SOAP APIs with extensible middleware and easy-to-use CLI.
httpmock - Easy mocking of HTTP responses from external resources.
minimock - Mock generator for Go interfaces.
mockhttp - Mock object for Go http.ResponseWriter.



Fuzzing and delta-debugging/reducing/shrinking.

go-fuzz - Randomized testing system.
gofuzz - Library for populating go objects with random values.
Tavor - Generic fuzzing and delta-debugging framework.



Selenium and browser control tools.

cdp - Type-safe bindings for the Chrome Debugging Protocol that can be used with browsers or other debug targets that implement it.
chromedp - a way to drive/test Chrome, Safari, Edge, Android Webviews, and other browsers supporting the Chrome Debugging Protocol.
ggr - a lightweight server that routes and proxies Selenium WebDriver requests to multiple Selenium hubs.
selenoid - alternative Selenium hub server that launches browsers within containers.



Fail injection

failpoint - An implementation of failpoints for Golang.



Text Processing
Libraries for parsing and manipulating texts.

Specific Formats

align - A general purpose application that aligns text.
allot - Placeholder and wildcard text parsing for CLI tools and bots.
bbConvert - Converts bbCode to HTML that allows you to add support for custom bbCode tags.
blackfriday - Markdown processor in Go.
bluemonday - HTML Sanitizer.
codetree - Parses indented code (python, pixy, scarlet, etc.) and returns a tree structure.
colly - Fast and Elegant Scraping Framework for Gophers.
commonregex - A collection of common regular expressions for Go.
dataflowkit - Web scraping Framework to turn websites into structured data.
did - DID (Decentralized Identifiers) Parser and Stringer in Go.
doi - Document object identifier (doi) parser in Go.
editorconfig-core-go - Editorconfig file parser and manipulator for Go.
enca - Minimal cgo bindings for libenca.
encdec - Package provides a generic interface to encoders and decodersa.
genex - Count and expand Regular Expressions into all matching Strings.
github_flavored_markdown - GitHub Flavored Markdown renderer (using blackfriday) with fenced code block highlighting, clickable header anchor links.
go-fixedwidth - Fixed-width text formatting (encoder/decoder with reflection).
go-humanize - Formatters for time, numbers, and memory size to human readable format.
go-nmea - NMEA parser library for the Go language.
go-runewidth - Functions to get fixed width of the character or string.
go-slugify - Make pretty slug with multiple languages support.
go-toml - Go library for the TOML format with query support and handy cli tools.
go-vcard - Parse and format vCard.
go-zero-width - Zero-width character detection and removal for Go.
gofeed - Parse RSS and Atom feeds in Go.
gographviz - Parses the Graphviz DOT language.
gommon/bytes - Format bytes to string.
gonameparts - Parses human names into individual name parts.
goq - Declarative unmarshaling of HTML using struct tags with jQuery syntax (uses GoQuery).
GoQuery - GoQuery brings a syntax and a set of features similar to jQuery to the Go language.
goregen - Library for generating random strings from regular expressions.
goribot - A simple golang spider/scraping framework,build a spider in 3 lines.
gotext - GNU gettext utilities for Go.
guesslanguage - Functions to determine the natural language of a unicode text.
htmlquery - An XPath query package for HTML, lets you extract data or evaluate from HTML documents by an XPath expression.
inject - Package inject provides a reflect based injector.
ltsv - High performance LTSV (Labeled Tab Separeted Value) reader for Go.
mxj - Encode / decode XML as JSON or map[string]interface{}; extract values with dot-notation paths and wildcards. Replaces x2j and j2x packages.
sdp - SDP: Session Description Protocol [RFC 4566].
sh - Shell parser and formatter.
slug - URL-friendly slugify with multiple languages support.
Slugify - Go slugify application that handles string.
syndfeed - A syndication feed for Atom 1.0 and RSS 2.0.
toml - TOML configuration format (encoder/decoder with reflection).


Utility

gofuckyourself - A sanitization-based swear filter for Go.
gotabulate - Easily pretty-print your tabular data with Go.
kace - Common case conversions covering common initialisms.
parseargs-go - string argument parser that understands quotes and backslashes.
parth - URL path segmentation parsing.
radix - fast string sorting algorithm.
Tagify - Produces a set of tags from given source.
textwrap - Implementation of textwrap module from Python.
TySug - Alternative suggestions with respect to keyboard layouts.
xj2go - Convert xml or json to go struct.
xurls - Extract urls from text.



Third-party APIs
Libraries for accessing third party APIs.

amazon-product-advertising-api - Go Client Library for Amazon Product Advertising API.
anaconda - Go client library for the Twitter 1.1 API.
aws-sdk-go - The official AWS SDK for the Go programming language.
brewerydb - Go library for accessing the BreweryDB API.
cachet - Go client library for Cachet (open source status page system).
circleci - Go client library for interacting with CircleCI's API.
clarifai - Go client library for interfacing with the Clarifai API.
codeship-go - Go client library for interacting with Codeship's API v2.
coinpaprika-go - Go client library for interacting with Coinpaprika's API.
discordgo - Go bindings for the Discord Chat API.
ethrpc - Go bindings for Ethereum JSON RPC API.
facebook - Go Library that supports the Facebook Graph API.
fcm - Go library for Firebase Cloud Messaging.
gads - Google Adwords Unofficial API.
gami - Go library for Asterisk Manager Interface.
gcm - Go library for Google Cloud Messaging.
geo-golang - Go Library to access Google Maps, MapQuest, Nominatim, OpenCage, Bing, Mapbox, and OpenStreetMap geocoding / reverse geocoding APIs.
github - Go library for accessing the GitHub REST API v3.
githubql - Go library for accessing the GitHub GraphQL API v4.
go-chronos - Go library for interacting with the Chronos Job Scheduler
go-hacknews - Tiny Go client for HackerNews API.
go-here - Go client library around the HERE location based APIs.
go-imgur - Go client library for imgur
go-jira - Go client library for Atlassian JIRA
go-marathon - Go library for interacting with Mesosphere's Marathon PAAS.
go-myanimelist - Go client library for accessing the MyAnimeList API.
go-sophos - Go client library for the Sophos UTM REST API with zero dependencies.
go-sptrans - Go client library for the SPTrans Olho Vivo API.
go-telegraph - Telegraph publishing platform API client.
go-trending - Go library for accessing trending repositories and developers at Github.
go-twitch - Go client for interacting with the Twitch v3 API.
go-twitter - Go client library for the Twitter v1.1 APIs.
go-unsplash - Go client library for the Unsplash.com API.
go-xkcd - Go client for the xkcd API.
golyrics - Golyrics is a Go library to fetch music lyrics data from the Wikia website.
gomalshare - Go library MalShare API malshare.com
GoMusicBrainz - Go MusicBrainz WS2 client library.
google - Auto-generated Google APIs for Go.
google-analytics - Simple wrapper for easy google analytics reporting.
google-cloud - Google Cloud APIs Go Client Library.
google-email-audit-api - Go client library for Google G Suite Email Audit API.
gostorm - GoStorm is a Go library that implements the communications protocol required to write Storm spouts and Bolts in Go that communicate with the Storm shells.
hipchat - This project implements a golang client library for the Hipchat API.
hipchat (xmpp) - A golang package to communicate with HipChat over XMPP.
igdb - Go client for the Internet Game Database API.
lastpass-go - Go client library for the LastPass API.
libgoffi - Library adapter toolbox for native libffi integration
Medium - Golang SDK for Medium's OAuth2 API.
megos - Client library for accessing an Apache Mesos cluster.
minio-go - Minio Go Library for Amazon S3 compatible cloud storage.
mixpanel - Mixpanel is a library for tracking events and sending Mixpanel profile updates to Mixpanel from your go applications.
patreon-go - Go library for Patreon API.
paypal - Wrapper for PayPal payment API.
playlyfe - The Playlyfe Rest API Go SDK.
pushover - Go wrapper for the Pushover API.
rrdaclient - Go Library to access statdns.com API, which is in turn RRDA API. DNS Queries over HTTP.
shopify - Go Library to make CRUD request to the Shopify API.
simples3 - Simple no frills AWS S3 Library using REST with V4 Signing written in Go.
slack - Slack API in Go.
smite - Go package to wraps access to the Smite game API.
spotify - Go Library to access Spotify WEB API.
steam - Go Library to interact with Steam game servers.
stripe - Go client for the Stripe API.
textbelt - Go client for the textbelt.com txt messaging API.
translate - Go online translation package.
Trello - Go wrapper for the Trello API.
TripAdvisor - Go wrapper for the TripAdvisor API.
tumblr - Go wrapper for the Tumblr v2 API.
uptimerobot - Go wrapper and command-line client for the Uptime Robot v2 API.
vl-go - Go client library around the VerifID identity verification layer API.
webhooks - Webhook receiver for GitHub and Bitbucket.
wit-go - Go client for wit.ai HTTP API.
ynab - Go wrapper for the YNAB API.
zooz - Go client for the Zooz API.

Utilities
General utilities and tools to make your life easier.

apm - Process manager for Golang applications with an HTTP API.
backscanner - A scanner similar to bufio.Scanner, but it reads and returns lines in reverse order, starting at a given position and going backward.
beyond - The Go tool that will drive you to the AOP world!
blank - Verify or remove blanks and whitespace from strings.
boilr - Blazingly fast CLI tool for creating projects from boilerplate templates.
chyle - Changelog generator using a git repository with multiple configuration possibilities.
circuit - An efficient and feature complete Hystrix like Go implementation of the circuit breaker pattern.
circuitbreaker - Circuit Breakers in Go.
clockwork - A simple fake clock for golang.
cmd - Library for executing shell commands on osx, windows and linux.
command - Command pattern for Go with thread safe serial and parallel dispatcher.
copy-pasta - Universal multi-workstation clipboard that uses S3 like backend for the storage.
ctop - Top-like interface (e.g. htop) for container metrics.
ctxutil - A collection of utility functions for contexts.
dbt - A framework for running self-updating signed binaries from a central, trusted repository.
Death - Managing go application shutdown with signals.
Deepcopier - Simple struct copying for Go.
delve - Go debugger.
dlog - Compile-time controlled logger to make your release smaller without removing debug calls.
ergo - The management of multiple local services running over different ports made easy.
evaluator - Evaluate an expression dynamicly based on s-expression. It's simple and easy to extend.
filetype - Small package to infer the file type checking the magic numbers signature.
filler - small utility to fill structs using ""fill"" tag.
filter - provide filtering, sanitizing, and conversion of Go data.
fzf - Command-line fuzzy finder written in Go.
gaper - Builds and restarts a Go project when it crashes or some watched file changes.
generate - runs go generate recursively on a specified path or environment variable and can filter by regex.
ghokin - Parallelized formatter with no external dependencies for gherkin (cucumber, behat...).
git-time-metric - Simple, seamless, lightweight time tracking for Git.
go-astitodo - Parse TODOs in your GO code.
go-bind-plugin - go:generate tool for wrapping symbols exported by golang plugins (1.8 only).
go-bsdiff - Pure Go bsdiff and bspatch libraries and CLI tools.
go-dry - DRY (don't repeat yourself) package for Go.
go-funk - Modern Go utility library which provides helpers (map, find, contains, filter, chunk, reverse, ...).
go-health - Health package simplifies the way you add health check to your services.
go-httpheader - Go library for encoding structs into Header fields.
go-problemdetails - Go package for working with Problem Details.
go-rate - Timed rate limiter for Go.
go-sitemap-generator - XML Sitemap generator written in Go.
go-trigger - Go-lang global event triggerer, Register Events with an id and trigger the event from anywhere from your project.
goback - Go simple exponential backoff package.
godaemon - Utility to write daemons.
godropbox - Common libraries for writing Go services/applications from Dropbox.
gohper - Various tools/modules help for development.
golarm - Fire alarms with system events.
golog - Easy and lightweight CLI tool to time track your tasks.
gopencils - Small and simple package to easily consume REST APIs.
goplaceholder - a small golang lib to generate placeholder images.
goreadability - Webpage summary extractor using Facebook Open Graph and arc90's readability.
goreleaser - Deliver Go binaries as fast and easily as possible.
goreporter - Golang tool that does static analysis, unit testing, code review and generate code quality report.
goseaweedfs - SeaweedFS client library with almost full features.
gostrutils - Collections of string manipulation and conversion functions.
gotenv - Load environment variables from .env or any io.Reader in Go.
gpath - Library to simplify access struct fields with Go's expression in reflection.
gubrak - Golang utility library with syntactic sugar. It's like lodash, but for golang.
handy - Many utilities and helpers like string handlers/formatters and validators.
htcat - Parallel and Pipelined HTTP GET Utility.
hub - wrap git commands with additional functionality to interact with github from the terminal.
hystrix-go - Implements Hystrix patterns of programmer-defined fallbacks aka circuit breaker.
immortal - *nix cross-platform (OS agnostic) supervisor.
intrinsic - Use x86 SIMD without writing any assembly code.
jump - Jump helps you navigate faster by learning your habits.
koazee - Library inspired in Lazy evaluation and functional programming that takes the hassle out of working with arrays.
limiters - Rate limiters for distributed applications in Golang with configurable back-ends and distributed locks.
lrserver - LiveReload server for Go.
mc - Minio Client provides minimal tools to work with Amazon S3 compatible cloud storage and filesystems.
mergo - Helper to merge structs and maps in Golang. Useful for configuration default values, avoiding messy if-statements.
mimemagic - Pure Go ultra performant MIME sniffing library/utility.
mimesniffer - A MIME type sniffer for Go.
mimetype - Package for MIME type detection based on magic numbers.
minify - Fast minifiers for HTML, CSS, JS, XML, JSON and SVG file formats.
minquery - MongoDB / mgo.v2 query that supports efficient pagination (cursors to continue listing documents where we left off).
mmake - Modern Make.
moldova - Utility for generating random data based on an input template.
mole - cli app to easily create ssh tunnels.
mssqlx - Database client library, proxy for any master slave, master master structures. Lightweight and auto balancing in mind.
multitick - Multiplexor for aligned tickers.
myhttp - Simple API to make HTTP GET requests with timeout support.
okrun - go run error steamroller.
olaf - Twitter Snowflake implemented in Go.
onecache - Caching library with support for multiple backend stores (Redis, Memcached, filesystem etc).
panicparse - Groups similar goroutines and colorizes stack dump.
peco - Simplistic interactive filtering tool.
pgo - Convenient functions for PHP community.
pm - Process (i.e. goroutine) manager with an HTTP API.
rclient - Readable, flexible, simple-to-use client for REST APIs.
realize - Go build system with file watchers and live reload. Run, build and watch file changes with custom paths.
repeat - Go implementation of different backoff strategies useful for retrying operations and heartbeating.
request - Go HTTP Requests for Humans™.
rerate - Redis-based rate counter and rate limiter for Go.
rerun - Recompiling and rerunning go apps when source changes.
rest-go - A package that provide many helpful methods for working with rest api.
retry - The most advanced functional mechanism to perform actions repetitively until successful.
retry - A simple but highly configurable retry package for Go.
retry - Simple and easy retry mechanism package for Go.
retry - A pretty simple library to ensure your work to be done.
retry-go - Retrying made simple and easy for golang.
robustly - Runs functions resiliently, catching and restarting panics.
scan - Scan golang sql.Rows directly to structs, slices, or primitive types.
serve - A static http server anywhere you need.
shutdown - App shutdown hooks for os.Signal handling.
silk - Read silk netflow files.
slice - Type-safe functions for common Go slice operations.
sliceconv - Slice conversion between primitive types.
slicer - Makes working with slices easier.
spinner - Go package to easily provide a terminal spinner with options.
sqlx - provides a set of extensions on top of the excellent built-in database/sql package.
sslice - Create a slice which is always sorted.
Storm - Simple and powerful toolkit for BoltDB.
structs - Implement simple functions to manipulate structs.
Task - simple ""Make"" alternative.
toolbox - Slice, map, multimap, struct, function, data conversion utilities. Service router, macro evaluator, tokenizer.
ugo - ugo is slice toolbox with concise syntax for Go.
UNIS - Common Architecture™ for String Utilities in Go.
usql - usql is a universal command-line interface for SQL databases.
util - Collection of useful utility functions. (strings, concurrency, manipulations, ...).
wuzz - Interactive cli tool for HTTP inspection.
xferspdy - Xferspdy provides binary diff and patch library in golang.

UUID
Libraries for working with UUIDs.

goid - Generate and Parse RFC4122 compliant V4 UUIDs.
nanoid - A tiny and efficient Go unique string ID generator.
sno - Compact, sortable and fast unique IDs with embedded metadata.
ulid - Go implementation of ULID (Universally Unique Lexicographically Sortable Identifier).
uniq - No hassle safe, fast unique identifiers with commands.
uuid - Generate, encode, and decode UUIDs v1 with fast or cryptographic-quality random node identifier.
uuid - Implementation of Universally Unique Identifier (UUID). Supports both creation and parsing of UUIDs. Actively maintained fork of satori uuid.
wuid - An extremely fast unique number generator, 10-135 times faster than UUID.

Validation
Libraries for validation.

checkdigit - Provide check digit algorithms (Luhn, Verhoeff, Damm) and calculators (ISBN, EAN, JAN, UPC, etc.).
govalidator - Validators and sanitizers for strings, numerics, slices and structs.
govalidator - Validate Golang request data with simple rules. Highly inspired by Laravel's request validation.
jio - jio is a json schema validator similar to joi.
ozzo-validation - Supports validation of various data types (structs, strings, maps, slices, etc.) with configurable and extensible validation rules specified in usual code constructs instead of struct tags.
terraform-validator - A norms and conventions validator for Terraform.
validate - Go package for data validation and filtering. support validate Map, Struct, Request(Form, JSON, url.Values, Uploaded Files) data and more features.
validate - This package provides a framework for writing validations for Go applications.
validator - Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving.

Version Control
Libraries for version control.

gh - Scriptable server and net/http middleware for GitHub Webhooks.
git2go - Go bindings for libgit2.
go-git - highly extensible Git implementation in pure Go.
go-vcs - manipulate and inspect VCS repositories in Go.
hercules - gaining advanced insights from Git repository history.
hgo - Hgo is a collection of Go packages providing read-access to local Mercurial repositories.

Video
Libraries for manipulating video.

gmf - Go bindings for FFmpeg av* libraries.
go-astisub - Manipulate subtitles in GO (.srt, .stl, .ttml, .webvtt, .ssa/.ass, teletext, .smi, etc.).
go-astits - Parse and demux MPEG Transport Streams (.ts) natively in GO.
go-m3u8 - Parser and generator library for Apple m3u8 playlists.
goav - Comphrensive Go bindings for FFmpeg.
gst - Go bindings for GStreamer.
libgosubs - Subtitle format support for go. Supports .srt, .ttml, and .ass.
libvlc-go - Go bindings for libvlc 2.X/3.X/4.X (used by the VLC media player).
m3u8 - Parser and generator library of M3U8 playlists for Apple HLS.
v4l - Video capture library for Linux, written in Go.

Web Frameworks
Full stack web frameworks.

aah - Scalable, performant, rapid development Web framework for Go.
Aero - High-performance web framework for Go, reaches top scores in Lighthouse.
Air - An ideally refined web framework for Go.
Banjo - Very simple and fast web framework for Go.
Beego - beego is an open-source, high-performance web framework for the Go programming language.
Buffalo - Bringing the productivity of Rails to Go!
Echo - High performance, minimalist Go web framework.
Fireball - More ""natural"" feeling web framework.
Flamingo - Framework for pluggable web projects. Including a concept for modules and offering features for DI, Configareas, i18n, template engines, graphql, observability, security, events, routing & reverse routing etc.
Gin - Gin is a web framework written in Go! It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity.
Ginrpc - Gin parameter automatic binding tool,gin rpc tools.
Gizmo - Microservice toolkit used by the New York Times.
go-json-rest - Quick and easy way to setup a RESTful JSON API.
go-rest - Small and evil REST framework for Go.
Goa - Goa provides a holistic approach for developing remote APIs and microservices in Go.
goa - goa is just like koajs for golang, it is a flexible, light, high-performance and extensible web framework based on middleware.
Golax - A non Sinatra fast HTTP framework with support for Google custom methods, deep interceptors, recursion and more.
Golf - Golf is a fast, simple and lightweight micro-web framework for Go. It comes with powerful features and has no dependencies other than the Go Standard Library.
Gondola - The web framework for writing faster sites, faster.
gongular - Fast Go web framework with input mapping/validation and (DI) Dependency Injection.
hiboot - hiboot is a high performance web application framework with auto configuration and dependency injection support.
Macaron - Macaron is a high productive and modular design web framework in Go.
mango - Mango is a modular web-application framework for Go, inspired by Rack, and PEP333.
Microservice - The framework for the creation of microservices, written in Golang.
neo - Neo is minimal and fast Go Web Framework with extremely simple API.
patron - Patron is a microservice framework following best cloud practices with a focus on productivity.
Resoursea - REST framework for quickly writing resource based services.
REST Layer - Framework to build REST/GraphQL API on top of databases with mostly configuration over code.
Revel - High-productivity web framework for the Go language.
rex - Rex is a library for modular development built upon gorilla/mux, fully compatible with net/http.
rux - Simple and fast web framework for build golang HTTP applications.
tango - Micro & pluggable web framework for Go.
tigertonic - Go framework for building JSON web services inspired by Dropwizard.
uAdmin - Fully featured web framework for Golang, inspired by Django.
utron - Lightweight MVC framework for Go(Golang).
vox - A golang web framework for humans, inspired by Koa heavily.
WebGo - A micro-framework to build web apps; with handler chaining, middleware and context injection. With standard library compliant HTTP handlers(i.e. http.HandlerFunc).
YARF - Fast micro-framework designed to build REST APIs and web services in a fast and simple way.

Middlewares
Actual middlewares

client-timing - An HTTP client for Server-Timing header.
CORS - Easily add CORS capabilities to your API.
formjson - Transparently handle JSON input as a standard form POST.
go-server-timing - Add/parse Server-Timing header.
Limiter - Dead simple rate limit middleware for Go.
ln-paywall - Go middleware for monetizing APIs on a per-request basis with the Lightning Network (Bitcoin).
Tollbooth - Rate limit HTTP request handler.
XFF - Handle X-Forwarded-For header and friends.

Libraries for creating HTTP middlewares

alice - Painless middleware chaining for Go.
catena - http.Handler wrapper catenation (same API as ""chain"").
chain - Handler wrapper chaining with scoped data (net/context-based ""middleware"").
go-wrap - Small middlewares package for net/http.
gores - Go package that handles HTML, JSON, XML and etc. responses. Useful for RESTful APIs.
interpose - Minimalist net/http middleware for golang.
muxchain - Lightweight middleware for net/http.
negroni - Idiomatic HTTP middleware for Golang.
render - Go package for easily rendering JSON, XML, and HTML template responses.
renderer - Simple, lightweight and faster response (JSON, JSONP, XML, YAML, HTML, File) rendering package for Go.
rye - Tiny Go middleware library (with canned Middlewares) that supports JWT, CORS, Statsd, and Go 1.7 context.
stats - Go middleware that stores various information about your web application.

Routers

alien - Lightweight and fast http router from outer space.
bellt - A simple Go HTTP router.
Bone - Lightning Fast HTTP Multiplexer.
Bxog - Simple and fast HTTP router for Go. It works with routes of varying difficulty, length and nesting. And he knows how to create a URL from the received parameters.
chi - Small, fast and expressive HTTP router built on net/context.
fasthttprouter - High performance router forked from httprouter. The first router fit for fasthttp.
FastRouter - a fast, flexible HTTP router written in Go.
gocraft/web - Mux and middleware package in Go.
Goji - Goji is a minimalistic and flexible HTTP request multiplexer with support for net/context.
goroute - Simple yet powerful HTTP request multiplexer.
GoRouter - GoRouter is a Server/API micro framwework, HTTP request router, multiplexer, mux that provides request router with middleware supporting net/context.
gowww/router - Lightning fast HTTP router fully compatible with the net/http.Handler interface.
httprouter - High performance router. Use this and the standard http handlers to form a very high performance web framework.
httptreemux - High-speed, flexible tree-based HTTP router for Go. Inspiration from httprouter.
lars - Is a lightweight, fast and extensible zero allocation HTTP router for Go used to create customizable frameworks.
mux - Powerful URL router and dispatcher for golang.
ozzo-routing - An extremely fast Go (golang) HTTP router that supports regular expression route matching. Comes with full support for building RESTful APIs.
pure - Is a lightweight HTTP router that sticks to the std ""net/http"" implementation.
Siesta - Composable framework to write middleware and handlers.
vestigo - Performant, stand-alone, HTTP compliant URL Router for go web applications.
violetear - Go HTTP router.
xmux - High performance muxer based on httprouter with net/context support.
xujiajun/gorouter - A simple and fast HTTP router for Go.

Windows

d3d9 - Go bindings for Direct3D9.
go-ole - Win32 OLE implementation for golang.
gosddl - Converter from SDDL-string to user-friendly JSON. SDDL consist of four part: Owner, Primary Group, DACL, SACL.

XML
Libraries and tools for manipulating XML.

XML-Comp - Simple command line XML comparer that generates diffs of folders, files and tags.
xml2map - XML to MAP converter written Golang.
xmlwriter - Procedural XML generation API based on libxml2's xmlwriter module.
xpath - XPath package for Go.
xquery - XQuery lets you extract data from HTML/XML documents using XPath expression.
zek - Generate a Go struct from XML.

Tools
Go software and plugins.
Code Analysis

apicompat - Checks recent changes to a Go project for backwards incompatible changes.
dupl - Tool for code clone detection.
errcheck - Errcheck is a program for checking for unchecked errors in Go programs.
gcvis - Visualise Go program GC trace data in real time.
go-checkstyle - checkstyle is a style check tool like java checkstyle. This tool inspired by java checkstyle, golint. The style referred to some points in Go Code Review Comments.
go-cleanarch - go-cleanarch was created to validate Clean Architecture rules, like a The Dependency Rule and interaction between packages in your Go projects.
go-critic - source code linter that brings checks that are currently not implemented in other linters.
go-mod-outdated - An easy way to find outdated dependencies of your Go projects.
go-outdated - Console application that displays outdated packages.
goast-viewer - Web based Golang AST visualizer.
GoCover.io - GoCover.io offers the code coverage of any golang package as a service.
goimports - Tool to fix (add, remove) your Go imports automatically.
GolangCI - GolangCI is an automated Golang code review service for GitHub pull requests. Service is open source and it's free for open source projects.
GoLint - Golint is a linter for Go source code.
Golint online - Lints online Go source files on GitHub, Bitbucket and Google Project Hosting using the golint package.
GoPlantUML - Library and CLI that generates text plantump class diagram containing information about structures and interfaces with the relationship among them.
goreturns - Adds zero-value return statements to match the func return types.
gosimple - gosimple is a linter for Go source code that specialises on simplifying code.
gostatus - Command line tool, shows the status of repositories that contain Go packages.
lint - Run linters as part of go test.
php-parser - A Parser for PHP written in Go.
staticcheck - staticcheck is go vet on steroids, applying a ton of static analysis checks you might be used to from tools like ReSharper for C#.
tarp - tarp finds functions and methods without direct unit tests in Go source code.
unconvert - Remove unnecessary type conversions from Go source.
unused - unused checks Go code for unused constants, variables, functions and types.
validate - Automatically validates struct fields with tags.

Editor Plugins

Go plugin for JetBrains IDEs - Go plugin for JetBrains IDEs.
go-language-server - A wrapper to turn the VSCode go extension into a language server supporting the language-server-protocol.
go-mode - Go mode for GNU/Emacs.
go-plus - Go (Golang) Package For Atom That Adds Autocomplete, Formatting, Syntax Checking, Linting and Vetting.
gocode - Autocompletion daemon for the Go programming language.
goprofiling - This extension adds benchmark profiling support for the Go language to VS Code.
GoSublime - Golang plugin collection for the text editor SublimeText 3 providing code completion and other IDE-like features.
gounit-vim - Vim plugin for generating Go tests based on the function's or method's signature.
theia-go-extension - Go language support for the Theia IDE.
vim-compiler-go - Vim plugin to highlight syntax errors on save.
vim-go - Go development plugin for Vim.
vscode-go - Extension for Visual Studio Code (VS Code) which provides support for the Go language.
Watch - Runs a command in an acme win on file changes.

Go Generate Tools

generic - flexible data type for Go.
genny - Elegant generics for Go.
gocontracts - brings design-by-contract to Go by synchronizing the code with the documentation.
gonerics - Idiomatic Generics in Go.
gotests - Generate Go tests from your source code.
gounit - Generate Go tests using your own templates.
hasgo - Generate Haskell inspired functions for your slices.
re2dfa - Transform regular expressions into finite state machines and output Go source code.
TOML-to-Go - Translates TOML into a Go type in the browser instantly.

Go Tools

colorgo - Wrapper around go command for colorized go build output.
depth - Visualize dependency trees of any package by analyzing imports.
gb - An easy to use project based build tool for the Go programming language.
generator-go-lang - A Yeoman generator to get new Go projects started.
gilbert - Build system and task runner for Go projects.
go-callvis - Visualize call graph of your Go program using dot format.
go-james - Go project skeleton creator, builds and tests your projects without the manual setup.
go-pkg-complete - Bash completion for go and wgo.
go-swagger - Swagger 2.0 implementation for go. Swagger is a simple yet powerful representation of your RESTful API.
godbg - Implementation of Rusts dbg! macro for quick and easy debugging during development.
gothanks - GoThanks automatically stars your go.mod github dependencies, sending this way some love to their maintainers.
OctoLinker - Navigate through go files efficiently with the OctoLinker browser extension for GitHub.
richgo - Enrich go test outputs with text decorations.
rts - RTS: response to struct. Generates Go structs from server responses.

Software Packages
Software written in Go.
DevOps Tools

aptly - aptly is a Debian repository management tool.
aurora - Cross-platform web-based Beanstalkd queue server console.
awsenv - Small binary that loads Amazon (AWS) environment variables for a profile.
Blast - A simple tool for API load testing and batch jobs.
bombardier - Fast cross-platform HTTP benchmarking tool.
bosun - Time Series Alerting Framework.
DepCharge - Helps orchestrating the execution of commands across the many dependencies in larger projects.
Dockerfile-Generator - A go library and an executable that produces valid Dockerfiles using various input channels.
dogo - Monitoring changes in the source file and automatically compile and run (restart).
drone-jenkins - Trigger downstream Jenkins jobs using a binary, docker or Drone CI.
drone-scp - Copy files and artifacts via SSH using a binary, docker or Drone CI.
Dropship - Tool for deploying code via cdn.
easyssh-proxy - Golang package for easy remote execution through SSH and SCP downloading via ProxyCommand.
fac - Command-line user interface to fix git merge conflicts.
gaia - Build powerful pipelines in any programming language.
Gitea - Fork of Gogs, entirely community driven.
gitea-github-migrator - Migrate all your GitHub repositories, issues, milestones and labels to your Gitea instance.
go-furnace - Hosting solution written in Go. Deploy your Application with ease on AWS, GCP or DigitalOcean.
go-selfupdate - Enable your Go applications to self update.
gobrew - gobrew lets you easily switch between multiple versions of go.
godbg - Web-based gdb front-end application.
Gogs - A Self Hosted Git Service in the Go Programming Language.
gonative - Tool which creates a build of Go that can cross compile to all platforms while still using the Cgo-enabled versions of the stdlib packages.
govvv - “go build” wrapper to easily add version information into Go binaries.
gox - Dead simple, no frills Go cross compile tool.
goxc - build tool for Go, with a focus on cross-compiling and packaging.
grapes - Lightweight tool designed to distribute commands over ssh with ease.
GVM - GVM provides an interface to manage Go versions.
Hey - Hey is a tiny program that sends some load to a web application.
jcli - Jenkins CLI allows you manage your Jenkins as an easy way.
kala - Simplistic, modern, and performant job scheduler.
kcli - Command line tool for inspecting kafka topics/partitions/messages.
kubernetes - Container Cluster Manager from Google.
lstags - Tool and API to sync Docker images across different registries.
lwc - A live-updating version of the UNIX wc command.
manssh - manssh is a command line tool for managing your ssh alias config easily.
Moby - Collaborative project for the container ecosystem to assemble container-based systems.
Mora - REST server for accessing MongoDB documents and meta data.
ostent - collects and displays system metrics and optionally relays to Graphite and/or InfluxDB.
Packer - Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.
Pewpew - Flexible HTTP command line stress tester.
Pomerium - Pomerium is an identity-aware access proxy.
Rodent - Rodent helps you manage Go versions, projects and track dependencies.
s3gof3r - Small utility/library optimized for high speed transfer of large objects into and out of Amazon S3.
Scaleway-cli - Manage BareMetal Servers from Command Line (as easily as with Docker).
script - Making it easy to write shell-like scripts in Go for DevOps and system administration tasks.
sg - Benchmarks a set of HTTP endpoints (like ab), with possibility to use the response code and data between each call for specific server stress based on its previous response.
skm - SKM is a simple and powerful SSH Keys Manager, it helps you to manage your multiple SSH keys easily!
StatusOK - Monitor your Website and REST APIs.Get Notified through Slack, E-mail when your server is down or response time is more than expected.
terraform-provider-openapi - Terraform provider plugin that dynamically configures itself at runtime based on an OpenAPI document (formerly known as swagger file) containing the definitions of the APIs exposed.
traefik - Reverse proxy and load balancer with support for multiple backends.
uTask - Automation engine that models and executes business processes declared in yaml.
Vegeta - HTTP load testing tool and library. It's over 9000!
webhook - Tool which allows user to create HTTP endpoints (hooks) that execute commands on the server.
Wide - Web-based IDE for Teams using Golang.
winrm-cli - Cli tool to remotely execute commands on Windows machines.

Other Software

borg - Terminal based search engine for bash snippets.
boxed - Dropbox based blog engine.
Cherry - Tiny webchat server in Go.
Circuit - Circuit is a programmable platform-as-a-service (PaaS) and/or Infrastructure-as-a-Service (IaaS), for management, discovery, synchronization and orchestration of services and hosts comprising cloud applications.
Comcast - Simulate bad network connections.
confd - Manage local application configuration files using templates and data from etcd or consul.
croc - Easily and securely send files or folders from one computer to another.
DDNS - Personal DDNS client with Digital Ocean Networking DNS as backend.
Docker - Open platform for distributed applications for developers and sysadmins.
Documize - Modern wiki software that integrates data from SaaS tools.
drive - Google Drive client for the commandline.
Duplicacy - A cross-platform network and cloud backup tool based on the idea of lock-free deduplication.
gfile - Securely transfer files between two computers, without any third party, over WebRTC.
Go Package Store - App that displays updates for the Go packages in your GOPATH.
go-peerflix - Video streaming torrent client.
GoBoy - Nintendo Game Boy Color emulator written in Go.
gocc - Gocc is a compiler kit for Go written in Go.
GoDNS - A dynamic DNS client tool, supports DNSPod & HE.net, written in Go.
GoDocTooltip - Chrome extension for Go Doc sites, which shows function description as tooltip at function list.
GoLand - Full featured cross-platform Go IDE.
Gor - Http traffic replication tool, for replaying traffic from production to stage/dev environments in real-time.
hugo - Fast and Modern Static Website Engine.
ide - Browser accessible IDE. Designed for Go with Go.
ipe - Open source Pusher server implementation compatible with Pusher client libraries written in GO.
joincap - Command-line utility for merging multiple pcap files together.
Juju - Cloud-agnostic service deployment and orchestration - supports EC2, Azure, Openstack, MAAS and more.
Leaps - Pair programming service using Operational Transforms.
lgo - Interactive Go programming with Jupyter. It supports code completion, code inspection and 100% Go compatibility.
limetext - Lime Text is a powerful and elegant text editor primarily developed in Go that aims to be a Free and open-source software successor to Sublime Text.
LiteIDE - LiteIDE is a simple, open source, cross-platform Go IDE.
mockingjay - Fake HTTP servers and consumer driven contracts from one configuration file. You can also make the server randomly misbehave to help do more realistic performance tests.
myLG - Command Line Network Diagnostic tool written in Go.
naclpipe - Simple NaCL EC25519 based crypto pipe tool written in Go.
nes - Nintendo Entertainment System (NES) emulator written in Go.
orange-cat - Markdown previewer written in Go.
Orbit - A simple tool for running commands and generating files from templates.
peg - Peg, Parsing Expression Grammar, is an implementation of a Packrat parser generator.
Pipe - A small and beautiful blogging platform.
restic - De-duplicating backup program.
scc - Sloc Cloc and Code, a very fast accurate code counter with complexity calculations and COCOMO estimates.
Seaweed File System - Fast, Simple and Scalable Distributed File System with O(1) disk seek.
shell2http - Executing shell commands via http server (for prototyping or remote control).
snap - Powerful telemetry framework.
Snitch - Simple way to notify your team and many tools when someone has deployed any application via Tsuru.
Stack Up - Stack Up, a super simple deployment tool - just Unix - think of it like 'make' for a network of servers.
syncthing - Open, decentralized file synchronization tool and protocol.
term-quiz - Quizzes for your terminal.
toxiproxy - Proxy to simulate network and system conditions for automated tests.
tsuru - Extensible and open source Platform as a Service software.
vFlow - High-performance, scalable and reliable IPFIX, sFlow and Netflow collector.
wellington - Sass project management tool, extends the language with sprite functions (like Compass).

Resources
Where to discover new Go libraries.
Benchmarks

autobench - Framework to compare the performance between different Go versions.
go-benchmark-app - Powerful HTTP-benchmark tool mixed with Аb, Wrk, Siege tools. Gathering statistics and various parameters for benchmarks and comparison results.
go-benchmarks - Few miscellaneous Go microbenchmarks. Compare some language features to alternative approaches.
go-http-routing-benchmark - Go HTTP request router benchmark and comparison.
go-web-framework-benchmark - Go web framework benchmark.
go_serialization_benchmarks - Benchmarks of Go serialization methods.
gocostmodel - Benchmarks of common basic operations for the Go language.
golang-sql-benchmark - Collection of benchmarks for popular Go database/SQL utilities.
gospeed - Go micro-benchmarks for calculating the speed of language constructs.
kvbench - Key/Value database benchmark.
skynet - Skynet 1M threads microbenchmark.
speedtest-resize - Compare various Image resize algorithms for the Go language.

Conferences

Capital Go - Washington, D.C., USA.
dotGo - Paris, France.
GoCon - Tokyo, Japan.
GoDays - Berlin, Germany.
GoLab - Florence, Italy.
GolangUK - London, UK.
GopherChina - Shanghai, China.
GopherCon - Denver, USA.
GopherCon Australia - Sydney, Australia.
GopherCon Brazil - Florianópolis, BR.
GopherCon Europe - Berlin, Germany.
GopherCon India - Pune, India.
GopherCon Israel - Tel Aviv, Israel.
GopherCon Russia - Moscow, Russia.
GopherCon Singapore - Mapletree Business City, Singapore.
GopherCon Vietnam - Ho Chi Minh City, Vietnam.
GothamGo - New York City, USA.
GoWayFest - Minsk, Belarus.

E-Books

A Go Developer's Notebook
An Introduction to Programming in Go
Build Web Application with Golang
Building Web Apps With Go
Go 101 - A book focusing on Go syntax/semantics and all kinds of details.
Go Bootcamp
Go Succinctly - in Persian.
GoBooks - A curated list of Go books.
Learning Go
Network Programming With Go
The Go Programming Language
The Golang Standard Library by Example (Chinese)
Web Application with Go the Anti-Textbook
Writing A Compiler In Go
Writing An Interpreter In Go

Gophers

Free Gophers Pack - Gopher graphics pack by Maria Letta with illustrations and emotional characters in vector and raster.
Go-gopher-Vector - Go gopher Vector Data [.ai, .svg].
gopher-logos - adorable gopher logos.
gopher-stickers
gopher-vector
gophericons
gopherize.me - Gopherize yourself.
gophers - Gopher artworks by Ashley McNamara.
gophers - Free gophers.
gophers - random gopher graphics.
gophers - Gopher amigurumi toy pattern.

Meetups

Basel Go Meetup
Berlin Golang
Brisbane Gophers
Canberra Gophers
Go Language NYC
Go London User Group
Go Toronto
Go User Group Atlanta
GoBridge, San Francisco, CA
GoJakarta
Golang Amsterdam
Golang Argentina
Golang Baltimore, MD
Golang Bangalore
Golang Belo Horizonte - Brazil
Golang Boston
Golang Bulgaria
Golang Cardiff, UK
Golang Copenhagen
Golang DC, Arlington, VA
Golang Dorset, UK
Golang Gurgaon, India
Golang Hamburg - Germany
Golang Israel
Golang Joinville - Brazil
Golang Korea
Golang Lima - Peru
Golang Lyon
Golang Marseille
Golang Melbourne
Golang Mountain View
Golang New York
Golang Paris
Golang Pune
Golang Singapore
Golang Stockholm
Golang Sydney, AU
Golang São Paulo - Brazil
Golang Taipei
Golang Vancouver, BC
Golang Казань
Golang Москва
Golang Питер
GoSF - San Francisco, CA
Istanbul Golang
Seattle Go Programmers
Ukrainian Golang User Groups
Utah Go User Group
Women Who Go - San Francisco, CA

Add the group of your city/country here (send PR)
Twitter

@golang
@golang_news
@golangch
@golangflow
@golangweekly

Websites

Awesome Go @LibHunt - Your go-to Go Toolbox.
Awesome Remote Job - Curated list of awesome remote jobs. A lot of them are looking for Go hackers.
awesome-awesomeness - List of other amazingly awesome lists.
CodinGame - Learn Go by solving interactive tasks using small games as practical examples.
Go Blog - The official Go blog.
Go Challenge - Learn Go by solving problems and getting feedback from Go experts.
Go Community on Hashnode - Community of Gophers on Hashnode.
Go Forum - Forum to discuss Go.
Go In 5 Minutes - 5 minute screencasts focused on getting one thing done.
Go Projects - List of projects on the Go community wiki.
Go Report Card - A report card for your Go package.
go.dev - A hub for Go developers.
gocryforhelp - Collection of Go projects that needs help. Good place to start your open-source way in Go.
godoc.org - Documentation for open source Go packages.
Golang Developer Jobs - Developer Jobs exclusivly for Golang related Roles.
Golang Flow - Post Updates, News, Packages and more.
Golang News - Links and news about Go programming.
golang-graphics - Collection of Go images, graphics, and art.
golang-nuts - Go mailing list.
Google Plus Community - The Google+ community for #golang enthusiasts.
Gopher Community Chat - Join Our New Slack Community For Gophers (Understand how it came).
Gophercises - Free coding exercises for budding gophers.
gowalker.org - Go Project API documentation.
json2go - Advanced JSON to Go struct conversion - online tool.
justforfunc - Youtube channel dedicated to Go programming language tips and tricks, hosted by  Francesc Campoy @francesc.
Made with Golang
r/Golang - News about Go.
studygolang - The community of studygolang in China.
Trending Go repositories on GitHub today - Good place to find new Go libraries.
TutorialEdge - Golang

Tutorials

50 Shades of Go - Traps, Gotchas, and Common Mistakes for New Golang Devs.
A Guide to Golang E-Commerce - Building a Golang site for e-commerce (demo included).
A Tour of Go - Interactive tour of Go.
Build web application with Golang - Golang ebook intro how to build a web app with golang.
Building Go Web Applications and Microservices Using Gin - Get familiar with Gin and find out how it can help you reduce boilerplate code and build a request handling pipeline.
Caching Slow Database Queries - How to cache slow database queries.
Canceling MySQL - How to cancel MySQL queries.
Ethereum Development with Go - A little e-book on Ethereum Development with Go.
Games With Go - A video series teaching programming and game development.
Go By Example - Hands-on introduction to Go using annotated example programs.
Go Cheat Sheet - Go's reference card.
Go database/sql tutorial - Introduction to database/sql.
Go Playground for iOS - Interactively edit & play Go snippets on your mobile device.
Go WebAssembly Tutorial - Building a Simple Calculator
go-patterns - Curated list of Go design patterns, recipes and idioms.
Golang for Node.js Developers - Examples of Golang compared to Node.js for learning.
Golangbot - Tutorials to get started with programming in Go.
GolangCode - Collection of code snippets and tutorials to help tackle every day issues.
Hackr.io - Learn Go from the best online golang tutorials submitted & voted by the golang programming community.
How to Use Godog for Behavior-driven Development in Go - Get started with Godog — a Behavior-driven development framework for building and testing Go applications.
Learn Go with TDD - Learn Go with test-driven development.
Learning Golang - From zero to hero - Getting started with golang for beginner.
package main - YouTube channel about Programming in Go.
Programming with Google Go - Coursera Specialization to learn about Go from scratch.
The world’s easiest introduction to WebAssembly with Golang
Working with Go - Intro to go for experienced programmers.
Your basic Go - Huge collection of tutorials and how to's.


"
60,"

Swift Programming Language




Architecture
Master
Package




macOS
x86_64




Ubuntu 16.04
x86_64




Ubuntu 18.04
x86_64





Swift Community-Hosted CI Platforms



OS
Architecture
Build




Ubuntu 16.04 
PPC64LE



Ubuntu 16.04 
AArch64



Android
ARMv7



Android
AArch64



Windows 2019
x86_64




Swift TensorFlow Community-Hosted CI Platforms



OS
Architecture
Build




Ubuntu 16.04
x86_64



macOS 10.13
x86_64



Ubuntu 16.04 (GPU)
x86_64




Welcome to Swift
Swift is a high-performance system programming language.  It has a clean
and modern syntax, offers seamless access to existing C and Objective-C code
and frameworks, and is memory safe by default.
Although inspired by Objective-C and many other languages, Swift is not itself a
C-derived language. As a complete and independent language, Swift packages core
features like flow control, data structures, and functions, with high-level
constructs like objects, protocols, closures, and generics. Swift embraces
modules, eliminating the need for headers and the code duplication they entail.
To learn more about the programming language, visit swift.org.

Contributing to Swift
Getting Started

System Requirements
Getting Sources for Swift and Related Projects
Building Swift
Swift Toolchains
Build Failures


Testing Swift
Learning More
Build Dependencies

Contributing to Swift
Contributions to Swift are welcomed and encouraged! Please see the
Contributing to Swift guide.
To be a truly great community, Swift.org needs to welcome
developers from all walks of life, with different backgrounds, and with a wide
range of experience. A diverse and friendly community will have more great
ideas, more unique perspectives, and produce more great code. We will work
diligently to make the Swift community welcoming to everyone.
To give clarity of what is expected of our members, Swift has adopted the
code of conduct defined by the Contributor Covenant. This document is used
across many open source communities, and we think it articulates our values
well. For more, see the Code of Conduct.
Getting Started
These instructions give the most direct path to a working Swift development
environment. To build from source you will need about 2 GB of disk space for the
source code and up to 70 GB of disk space for the build artifacts with full
debugging. Depending on your machine, a clean build can take a few minutes to
several hours. Naturally, incremental builds are much faster.
System Requirements
macOS, Ubuntu Linux LTS, and the latest Ubuntu Linux release are currently
supported as host development operating systems.
Please make sure you use Python 2.x. Python 3.x is not supported currently.
macOS
To build for macOS, you need Xcode 11.2.
The required version of Xcode changes frequently, and is often a beta release.
Check this document or the host information on https://ci.swift.org for the
current required version.
You will also need CMake and Ninja,
which can be installed via a package manager:
Homebrew
brew install cmake ninja

MacPorts
sudo port install cmake ninja

Instructions for installing CMake and Ninja directly can be found below.
Linux
For Ubuntu, you'll need the following development dependencies:
sudo apt-get install git cmake ninja-build clang python uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync

Note: LLDB currently requires at least swig-1.3.40 but will successfully build
with version 2 shipped with Ubuntu.
Build instructions for Ubuntu 14.04 LTS can be found here.
Getting Sources for Swift and Related Projects
First create a directory for all of the Swift sources:
mkdir swift-source
cd swift-source

Note: This is important since update-checkout (see below) checks out
repositories next to the Swift source directory. This means that if one clones
Swift and has other unrelated repositories, update-checkout may not clone those
repositories and will update them instead.
Via HTTPS  For those checking out sources as read-only, HTTPS works best:
git clone https://github.com/apple/swift.git
./swift/utils/update-checkout --clone

Via SSH  For those who plan on regularly making direct commits,
cloning over SSH may provide a better experience (which requires
uploading SSH keys to GitHub):
git clone git@github.com:apple/swift.git
./swift/utils/update-checkout --clone-with-ssh

Building Swift
The build-script is a high-level build automation script that supports basic
options such as building a Swift-compatible LLDB, building the Swift Package
Manager, building for various platforms, running tests after builds, and more.
There are two primary build systems to use: Xcode and Ninja. The Xcode build
system allows you to work in Xcode, but Ninja is a bit faster and supports
more environments.
First, make sure that you're in the swift directory:
cd swift

To build using Ninja, run:
utils/build-script --release-debuginfo

When developing Swift, it helps to build what you're working on in a debug
configuration while building the rest of the project with optimizations. Below
are some examples of using debug variants:
utils/build-script --release-debuginfo --debug-swift # Swift frontend built in debug
utils/build-script --release-debuginfo --debug-swift-stdlib # Standard library built in debug
utils/build-script --release-debuginfo --debug-swift --force-optimized-typechecker # Swift frontend sans type checker built in debug

Limiting the amount of debug code in the compiler has a very large impact on
Swift compile times, and in turn the test execution time. If you want to build
the entire project in debug, you can run:
utils/build-script --debug

For documentation of all available arguments, as well as additional usage
information, see the inline help:
utils/build-script -h

Xcode
To build using Xcode, specify the --xcode argument on any of the above commands.
Xcode can be used to edit the Swift source code, but it is not currently
fully supported as a build environment for SDKs other than macOS. The generated
Xcode project does not integrate with the test runner, but the tests can be run
with the 'check-swift' target.
Build Products
All of the build products are placed in swift-source/build/${TOOL}-${MODE}/${PRODUCT}-${PLATFORM}/.
If macOS Swift with Ninja in DebugAssert mode was built, all of the products
would be in swift-source/build/Ninja-DebugAssert/swift-macosx-x86_64/. It
helps to save this directory as an environment variable for future use.
export SWIFT_BUILD_DIR=""~/swift-source/build/Ninja-DebugAssert/swift-macosx-x86_64""

Ninja
Once the first build has completed, Ninja can perform fast incremental builds of
various products. These incremental builds are a big timesaver when developing
and debugging.
cd ${SWIFT_BUILD_DIR}
ninja swift

This will build the Swift compiler, but will not rebuild the standard library or
any other target. Building the swift-stdlib target as an additional layer of
testing from time to time is also a good idea. To build just the standard
library, run:
ninja swift-stdlib

It is always a good idea to do a full build after using update-checkout.
Using Xcode
To open the Swift project in Xcode, open ${SWIFT_BUILD_DIR}/Swift.xcodeproj.
It will auto-create a lot of schemes for all of the available targets. A
common debug flow would involve:

Select the 'swift' scheme.
Pull up the scheme editor (⌘⇧<).
Select the 'Arguments' tab and click the '+'.
Add the command line options.
Close the scheme editor.
Build and run.

Another option is to change the scheme to ""Wait for executable to be launched"",
then run the build product in Terminal.
Swift Toolchains
Building
Swift toolchains are created using the script
build-toolchain. This
script is used by swift.org's CI to produce snapshots and can allow for one to
locally reproduce such builds for development or distribution purposes. A typical
invocation looks like the following:
  $ ./swift/utils/build-toolchain $BUNDLE_PREFIX

where $BUNDLE_PREFIX is a string that will be prepended to the build
date to give the bundle identifier of the toolchain's Info.plist. For
instance, if $BUNDLE_PREFIX was com.example, the toolchain
produced will have the bundle identifier com.example.YYYYMMDD. It
will be created in the directory you run the script with a filename
of the form: swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz.
Beyond building the toolchain, build-toolchain also supports the
following (non-exhaustive) set of useful options::

--dry-run: Perform a dry run build. This is off by default.
--test: Test the toolchain after it has been compiled. This is off by default.
--distcc: Use distcc to speed up the build by distributing the c++ part of
the swift build. This is off by default.

More options may be added over time. Please pass --help to
build-toolchain to see the full set of options.
Installing into Xcode
On macOS if one wants to install such a toolchain into Xcode:

Untar and copy the toolchain to one of /Library/Developer/Toolchains/ or
~/Library/Developer/Toolchains/. E.x.:

  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C /
  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C ~/

The script also generates an archive containing debug symbols which
can be installed over the main archive allowing symbolication of any
compiler crashes.
  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C /
  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C ~/


Specify the local toolchain for Xcode's use via Xcode->Toolchains.

Build Failures
Make sure you are using the correct release of Xcode.
If you have changed Xcode versions but still encounter errors that appear to
be related to the Xcode version, try passing --clean to build-script.
When a new version of Xcode is released, you can update your build without
recompiling the entire project by passing the --reconfigure option.
Make sure all repositories are up to date with the update-checkout command
described above.
Testing Swift
See docs/Testing.md, in particular the section on lit.py.
Learning More
Be sure to look through the docs
directory for more information about the compiler. In particular, the documents
titled Debugging the Swift Compiler and
Continuous Integration for Swift are very
helpful to understand before submitting your first PR.
Building Documentation
To read the compiler documentation, start by installing the
Sphinx documentation generator tool by running the
command:
easy_install -U ""Sphinx < 2.0""

Once complete, you can build the Swift documentation by changing directory into
docs and typing make. This
compiles the .rst files in the docs
directory into HTML in the docs/_build/html directory.
Many of the docs are out of date, but you can see some historical design
documents in the docs directory.
Another source of documentation is the standard library itself, located in
stdlib. Much of the language is actually implemented in the library
(including Int), and the standard library gives some examples of what can be
expressed today.
Build Dependencies
CMake
CMake is the core infrastructure used to configure builds of
Swift and its companion projects; at least version 3.4.3 is required.
On macOS, you can download the CMake Binary Distribution,
bundled as an application, copy it to /Applications, and add the embedded
command line tools to your PATH:
export PATH=/Applications/CMake.app/Contents/bin:$PATH

On Linux, if you have not already installed Swift's development
dependencies, you can download and install the CMake
package separately using the following command:
sudo apt-get install cmake

Ninja
Ninja is the current recommended build system
for building Swift and is the default configuration generated by CMake. Pre-built
packages
are available for macOS and Linux distributions. You can also clone Ninja
next to the other projects and it will be bootstrapped automatically:
Via HTTPS
git clone https://github.com/ninja-build/ninja.git && cd ninja
git checkout release
cat README

Via SSH
git clone git@github.com:ninja-build/ninja.git && cd ninja
git checkout release
cat README


"
61,"
reveal.js  
A framework for easily creating beautiful presentations using HTML. Check out the live demo.
reveal.js comes with a broad range of features including nested slides, Markdown contents, PDF export, speaker notes and a JavaScript API. There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com.
Table of contents

Online Editor
Installation

Basic setup
Full setup
Folder Structure


Instructions

Markup
Markdown
Element Attributes
Slide Attributes


Configuration
Presentation Size
Dependencies
Ready Event
Auto-sliding
Keyboard Bindings
Vertical Slide Navigation
Touch Navigation
Lazy Loading
API

Slide Changed Event
Presentation State
Slide States
Slide Backgrounds
Parallax Background
Slide Transitions
Internal links
Fragments
Fragment events
Code syntax highlighting
Slide number
Overview mode
Fullscreen mode
Embedded media
Stretching elements
Resize Event
postMessage API


PDF Export
Theming
Speaker Notes

Share and Print Speaker Notes
Server Side Speaker Notes


Plugins
Multiplexing

Master presentation
Client presentation
Socket.io server


MathJax
License

More reading

Changelog: Up-to-date version history.
Examples: Presentations created with reveal.js, add your own!
Browser Support: Explanation of browser support and fallbacks.
Plugins: A list of plugins that can be used to extend reveal.js.

Online Editor
Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com.
Installation
The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.
Basic setup
The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser.

Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases
Unzip and replace the example contents in index.html with your own
Open index.html in a browser to view it

Full setup
Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code.


Install Node.js (4.0.0 or later)


Clone the reveal.js repository
$ git clone https://github.com/hakimel/reveal.js.git


Navigate to the reveal.js folder
$ cd reveal.js


Install dependencies
$ npm install


Serve the presentation and monitor source files for changes
$ npm start


Open http://localhost:8000 to view your presentation
You can change the port by using npm start -- --port=8001.


Folder Structure

css/ Core styles without which the project does not function
js/ Like above but for JavaScript
plugin/ Components that have been developed as extensions to reveal.js
lib/ All other third party assets (JavaScript, CSS, fonts)

Instructions
Markup
Here's a barebones example of a fully working reveal.js presentation:
<html>
	<head>
		<link rel=""stylesheet"" href=""css/reveal.css"">
		<link rel=""stylesheet"" href=""css/theme/white.css"">
	</head>
	<body>
		<div class=""reveal"">
			<div class=""slides"">
				<section>Slide 1</section>
				<section>Slide 2</section>
			</div>
		</div>
		<script src=""js/reveal.js""></script>
		<script>
			Reveal.initialize();
		</script>
	</body>
</html>
The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the ""root"" of the others (at the top), and will be included in the horizontal sequence. For example:
<div class=""reveal"">
	<div class=""slides"">
		<section>Single Horizontal Slide</section>
		<section>
			<section>Vertical Slide 1</section>
			<section>Vertical Slide 2</section>
		</section>
	</div>
</div>
Markdown
It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file.
This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown. Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).
<section data-markdown>
	<textarea data-template>
		## Page title

		A paragraph with some text and a [link](http://hakim.se).
	</textarea>
</section>
External Markdown
You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\r?\n---\r?\n$, a newline-bounded horizontal rule)  and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?:, so it will match both ""note:"" and ""notes:""). The data-charset attribute is optional and specifies which charset to use when loading the external file.
When used locally, this feature requires that reveal.js runs from a local web server.  The following example customises all available options:
<section data-markdown=""example.md""
         data-separator=""^\n\n\n""
         data-separator-vertical=""^\n\n""
         data-separator-notes=""^Note:""
         data-charset=""iso-8859-15"">
    <!--
        Note that Windows uses `\r\n` instead of `\n` as its linefeed character.
        For a regex that supports all operating systems, use `\r?\n` instead of `\n`.
    -->
</section>
Element Attributes
Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things.
<section data-markdown>
	<script type=""text/template"">
		- Item 1 <!-- .element: class=""fragment"" data-fragment-index=""2"" -->
		- Item 2 <!-- .element: class=""fragment"" data-fragment-index=""1"" -->
	</script>
</section>
Slide Attributes
Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown.
<section data-markdown>
	<script type=""text/template"">
	<!-- .slide: data-background=""#ff0000"" -->
		Markdown content
	</script>
</section>
Configuring marked
We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal:
Reveal.initialize({
	// Options which are passed into marked
	// See https://marked.js.org/#/USING_ADVANCED.md#options
	markdown: {
		smartypants: true
	}
});
Configuration
At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below.
Reveal.initialize({

	// Display presentation control arrows
	controls: true,

	// Help the user learn the controls by providing hints, for example by
	// bouncing the down arrow when they first encounter a vertical slide
	controlsTutorial: true,

	// Determines where controls appear, ""edges"" or ""bottom-right""
	controlsLayout: 'bottom-right',

	// Visibility rule for backwards navigation arrows; ""faded"", ""hidden""
	// or ""visible""
	controlsBackArrows: 'faded',

	// Display a presentation progress bar
	progress: true,

	// Display the page number of the current slide
	slideNumber: false,

	// Add the current slide number to the URL hash so that reloading the
	// page/copying the URL will return you to the same slide
	hash: false,

	// Push each slide change to the browser history. Implies `hash: true`
	history: false,

	// Enable keyboard shortcuts for navigation
	keyboard: true,

	// Enable the slide overview mode
	overview: true,

	// Vertical centering of slides
	center: true,

	// Enables touch navigation on devices with touch input
	touch: true,

	// Loop the presentation
	loop: false,

	// Change the presentation direction to be RTL
	rtl: false,

	// See https://github.com/hakimel/reveal.js/#navigation-mode
	navigationMode: 'default',

	// Randomizes the order of slides each time the presentation loads
	shuffle: false,

	// Turns fragments on and off globally
	fragments: true,

	// Flags whether to include the current fragment in the URL,
	// so that reloading brings you to the same fragment position
	fragmentInURL: false,

	// Flags if the presentation is running in an embedded mode,
	// i.e. contained within a limited portion of the screen
	embedded: false,

	// Flags if we should show a help overlay when the questionmark
	// key is pressed
	help: true,

	// Flags if speaker notes should be visible to all viewers
	showNotes: false,

	// Global override for autoplaying embedded media (video/audio/iframe)
	// - null: Media will only autoplay if data-autoplay is present
	// - true: All media will autoplay, regardless of individual setting
	// - false: No media will autoplay, regardless of individual setting
	autoPlayMedia: null,

	// Global override for preloading lazy-loaded iframes
	// - null: Iframes with data-src AND data-preload will be loaded when within
	//   the viewDistance, iframes with only data-src will be loaded when visible
	// - true: All iframes with data-src will be loaded when within the viewDistance
	// - false: All iframes with data-src will be loaded only when visible
	preloadIframes: null,

	// Number of milliseconds between automatically proceeding to the
	// next slide, disabled when set to 0, this value can be overwritten
	// by using a data-autoslide attribute on your slides
	autoSlide: 0,

	// Stop auto-sliding after user input
	autoSlideStoppable: true,

	// Use this method for navigation when auto-sliding
	autoSlideMethod: Reveal.navigateNext,

	// Specify the average time in seconds that you think you will spend
	// presenting each slide. This is used to show a pacing timer in the
	// speaker view
	defaultTiming: 120,

	// Enable slide navigation via mouse wheel
	mouseWheel: false,

	// Hide cursor if inactive
	hideInactiveCursor: true,

	// Time before the cursor is hidden (in ms)
	hideCursorTime: 5000,

	// Hides the address bar on mobile devices
	hideAddressBar: true,

	// Opens links in an iframe preview overlay
	// Add `data-preview-link` and `data-preview-link=""false""` to customise each link
	// individually
	previewLinks: false,

	// Transition style
	transition: 'slide', // none/fade/slide/convex/concave/zoom

	// Transition speed
	transitionSpeed: 'default', // default/fast/slow

	// Transition style for full page slide backgrounds
	backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom

	// Number of slides away from the current that are visible
	viewDistance: 3,

	// Parallax background image
	parallaxBackgroundImage: '', // e.g. ""'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'""

	// Parallax background size
	parallaxBackgroundSize: '', // CSS syntax, e.g. ""2100px 900px""

	// Number of pixels to move the parallax background per slide
	// - Calculated automatically unless specified
	// - Set to 0 to disable movement along an axis
	parallaxBackgroundHorizontal: null,
	parallaxBackgroundVertical: null,

	// The display mode that will be used to show slides
	display: 'block'

});
The configuration can be updated after initialization using the configure method:
// Turn autoSlide off
Reveal.configure({ autoSlide: 0 });

// Start auto-sliding every 5s
Reveal.configure({ autoSlide: 5000 });
Presentation Size
All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport.
See below for a list of configuration options related to sizing, including default values:
Reveal.initialize({

	// ...

	// The ""normal"" size of the presentation, aspect ratio will be preserved
	// when the presentation is scaled to fit different resolutions. Can be
	// specified using percentage units.
	width: 960,
	height: 700,

	// Factor of the display size that should remain empty around the content
	margin: 0.1,

	// Bounds for smallest/largest possible scale to apply to content
	minScale: 0.2,
	maxScale: 1.5

});
If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings:
Reveal.initialize({

	// ...

	width: ""100%"",
	height: ""100%"",
	margin: 0,
	minScale: 1,
	maxScale: 1
});
Dependencies
Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:
Reveal.initialize({
	dependencies: [
		// Interpret Markdown in <section> elements
		{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
		{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },

		// Syntax highlight for <code> elements
		{ src: 'plugin/highlight/highlight.js', async: true },

		// Zoom in and out with Alt+click
		{ src: 'plugin/zoom-js/zoom.js', async: true },

		// Speaker notes
		{ src: 'plugin/notes/notes.js', async: true },

		// MathJax
		{ src: 'plugin/math/math.js', async: true }
	]
});
You can add your own extensions using the same syntax. The following properties are available for each dependency object:

src: Path to the script to load
async: [optional] Flags if the script should load after reveal.js has started, defaults to false
callback: [optional] Function to execute when the script has loaded
condition: [optional] Function which must return true for the script to be loaded

Ready Event
A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady().
Reveal.addEventListener( 'ready', function( event ) {
	// event.currentSlide, event.indexh, event.indexv
} );
Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.
Auto-sliding
Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides:
// Slide every five seconds
Reveal.configure({
  autoSlide: 5000
});
When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing »A« on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config.
You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute:
<section data-autoslide=""2000"">
	<p>After 2 seconds the first fragment will be shown.</p>
	<p class=""fragment"" data-autoslide=""10000"">After 10 seconds the next fragment will be shown.</p>
	<p class=""fragment"">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p>
</section>
To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight.
Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.
Keyboard Bindings
If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option:
Reveal.configure({
  keyboard: {
    13: 'next', // go to the next slide when the ENTER key is pressed
    27: function() {}, // do something custom when ESC is pressed
    32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding)
  }
});
Vertical Slide Navigation
Slides can be nested within other slides to create vertical stacks (see Markup). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:

Navigation Mode
You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available:



Value
Description




default
Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical).


linear
Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical).


grid
When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index.Consider a deck with six slides ordered in two vertical stacks:1.1    2.11.2    2.21.3    2.3If you're on slide 1.3 and navigate right, you will normally move from 1.3 -> 2.1. With navigationMode set to ""grid"" the same navigation takes you from 1.3 -> 2.3.



Touch Navigation
You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js.
If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.
Lazy Loading
When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option.
To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements.
<section>
  <img data-src=""image.png"">
  <iframe data-src=""http://hakim.se""></iframe>
  <video>
    <source data-src=""video.webm"" type=""video/webm"" />
    <source data-src=""video.mp4"" type=""video/mp4"" />
  </video>
</section>
Lazy Loading Iframes
Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden.
When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background.
You can override this behavior with the data-preload attribute. The iframe below will be loaded
according to the viewDistance.
<section>
	<iframe data-src=""http://hakim.se"" data-preload></iframe>
</section>
You can also change the default globally with the preloadIframes configuration option. If set to
true ALL iframes with a data-src attribute will be preloaded when within the viewDistance
regardless of individual data-preload attributes. If set to false, all iframes will only be
loaded when they become visible.
API
The Reveal object exposes a JavaScript API for controlling navigation and reading state:
// Navigation
Reveal.slide( indexh, indexv, indexf );
Reveal.left();
Reveal.right();
Reveal.up();
Reveal.down();
Reveal.prev();
Reveal.next();
Reveal.prevFragment();
Reveal.nextFragment();

// Randomize the order of slides
Reveal.shuffle();

// Toggle presentation states, optionally pass true/false to force on/off
Reveal.toggleOverview();
Reveal.togglePause();
Reveal.toggleAutoSlide();

// Shows a help overlay with keyboard shortcuts, optionally pass true/false
// to force on/off
Reveal.toggleHelp();

// Change a config value at runtime
Reveal.configure({ controls: true });

// Returns the present configuration options
Reveal.getConfig();

// Fetch the current scale of the presentation
Reveal.getScale();

// Retrieves the previous and current slide elements
Reveal.getPreviousSlide();
Reveal.getCurrentSlide();

Reveal.getIndices();        // { h: 0, v: 0, f: 0 }
Reveal.getSlidePastCount();
Reveal.getProgress();       // (0 == first slide, 1 == last slide)
Reveal.getSlides();         // Array of all slides
Reveal.getTotalSlides();    // Total number of slides

// Returns the speaker notes for the current slide
Reveal.getSlideNotes();

// State checks
Reveal.isFirstSlide();
Reveal.isLastSlide();
Reveal.isOverview();
Reveal.isPaused();
Reveal.isAutoSliding();

// Returns the top-level DOM element
getRevealElement(); // <div class=""reveal"">...</div>
Custom Key Bindings
Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option.
Reveal.addKeyBinding( binding, callback );
Reveal.removeKeyBinding( keyCode );
For example
// The binding parameter provides the following properties
//      keyCode: the keycode for binding to the callback
//          key: the key label to show in the help overlay
//  description: the description of the action to show in the help overlay
Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() {
	// start timer
} )

// The binding parameter can also be a direct keycode without providing the help description
Reveal.addKeyBinding( 82, function() {
	// reset timer
} )
This allows plugins to add key bindings directly to Reveal so they can

make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and
be included in the help overlay (optional)

Slide Changed Event
A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.
Some libraries, like MathJax (see #226), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.
Reveal.addEventListener( 'slidechanged', function( event ) {
	// event.previousSlide, event.currentSlide, event.indexh, event.indexv
} );
Presentation State
The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire.
Reveal.slide( 1 );
// we're on slide 1

var state = Reveal.getState();

Reveal.slide( 3 );
// we're on slide 3

Reveal.setState( state );
// we're back on slide 1
Slide States
If you set data-state=""somestate"" on a slide <section>, ""somestate"" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.
Furthermore you can also listen to these changes in state via JavaScript:
Reveal.addEventListener( 'somestate', function() {
	// TODO: Sprinkle magic
}, false );
Slide Backgrounds
Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe.
Color Backgrounds
All CSS color formats are supported, including hex values, keywords, rgba() or hsl().
<section data-background-color=""#ff0000"">
	<h2>Color</h2>
</section>
Image Backgrounds
By default, background images are resized to cover the full page. Available options:



Attribute
Default
Description




data-background-image

URL of the image to show. GIFs restart when the slide opens.


data-background-size
cover
See background-size on MDN.


data-background-position
center
See background-position on MDN.


data-background-repeat
no-repeat
See background-repeat on MDN.


data-background-opacity
1
Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque.



<section data-background-image=""http://example.com/image.png"">
	<h2>Image</h2>
</section>
<section data-background-image=""http://example.com/image.png"" data-background-size=""100px"" data-background-repeat=""repeat"">
	<h2>This background image will be sized to 100px and repeated</h2>
</section>
Video Backgrounds
Automatically plays a full size video behind the slide.



Attribute
Default
Description




data-background-video

A single video source, or a comma separated list of video sources.


data-background-video-loop
false
Flags if the video should play repeatedly.


data-background-video-muted
false
Flags if the audio should be muted.


data-background-size
cover
Use cover for full screen and some cropping or contain for letterboxing.


data-background-opacity
1
Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque.



<section data-background-video=""https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm"" data-background-video-loop data-background-video-muted>
	<h2>Video</h2>
</section>
Iframe Backgrounds
Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute.
<section data-background-iframe=""https://slides.com"" data-background-interactive>
	<h2>Iframe</h2>
</section>
Background Transitions
Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.
Parallax Background
If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional).
Reveal.initialize({

	// Parallax background image
	parallaxBackgroundImage: '', // e.g. ""https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg""

	// Parallax background size
	parallaxBackgroundSize: '', // CSS syntax, e.g. ""2100px 900px"" - currently only pixels are supported (don't use % or auto)

	// Number of pixels to move the parallax background per slide
	// - Calculated automatically unless specified
	// - Set to 0 to disable movement along an axis
	parallaxBackgroundHorizontal: 200,
	parallaxBackgroundVertical: 50

});
Make sure that the background size is much bigger than screen size to allow for some scrolling. View example.
Slide Transitions
The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute:
<section data-transition=""zoom"">
	<h2>This slide will override the presentation transition and zoom!</h2>
</section>

<section data-transition-speed=""fast"">
	<h2>Choose from three transition speeds: default, fast or slow!</h2>
</section>
You can also use different in and out transitions for the same slide:
<section data-transition=""slide"">
    The train goes on …
</section>
<section data-transition=""slide"">
    and on …
</section>
<section data-transition=""slide-in fade-out"">
    and stops.
</section>
<section data-transition=""fade-in slide-out"">
    (Passengers entering and leaving)
</section>
<section data-transition=""slide"">
    And it starts again.
</section>
You can choose from none, fade, slide, convex, concave and zoom.
Internal links
It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (<section id=""some-slide"">):
<a href=""#/2/2"">Link</a>
<a href=""#/some-slide"">Link</a>
You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide.
<a href=""#"" class=""navigate-left"">
<a href=""#"" class=""navigate-right"">
<a href=""#"" class=""navigate-up"">
<a href=""#"" class=""navigate-down"">
<a href=""#"" class=""navigate-prev""> <!-- Previous vertical or horizontal slide -->
<a href=""#"" class=""navigate-next""> <!-- Next vertical or horizontal slide -->
Fragments
Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments
The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:
<section>
	<p class=""fragment grow"">grow</p>
	<p class=""fragment shrink"">shrink</p>
	<p class=""fragment fade-out"">fade-out</p>
	<p class=""fragment fade-up"">fade-up (also down, left and right!)</p>
	<p class=""fragment fade-in-then-out"">fades in, then out when we move to the next step</p>
	<p class=""fragment fade-in-then-semi-out"">fades in, then obfuscate when we move to the next step</p>
	<p class=""fragment highlight-current-blue"">blue only once</p>
	<p class=""fragment highlight-red"">highlight-red</p>
	<p class=""fragment highlight-green"">highlight-green</p>
	<p class=""fragment highlight-blue"">highlight-blue</p>
</section>
Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.
<section>
	<span class=""fragment fade-in"">
		<span class=""fragment fade-out"">I'll fade in, then out</span>
	</span>
</section>
The display order of fragments can be controlled using the data-fragment-index attribute.
<section>
	<p class=""fragment"" data-fragment-index=""3"">Appears last</p>
	<p class=""fragment"" data-fragment-index=""1"">Appears first</p>
	<p class=""fragment"" data-fragment-index=""2"">Appears second</p>
</section>
Fragment events
When a slide fragment is either shown or hidden reveal.js will dispatch an event.
Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback.
Reveal.addEventListener( 'fragmentshown', function( event ) {
	// event.fragment = the fragment DOM element
} );
Reveal.addEventListener( 'fragmenthidden', function( event ) {
	// event.fragment = the fragment DOM element
} );
Code Syntax Highlighting
By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin (plugin/highlight/highlight.js) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css).
Reveal.initialize({
	// More info https://github.com/hakimel/reveal.js#dependencies
	dependencies: [
		{ src: 'plugin/highlight/highlight.js', async: true },
	]
});
Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed.  HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element.
<section>
	<pre><code data-trim data-noescape>
(def lazy-fib
  (concat
   [0 1]
   <mark>((fn rfib [a b]</mark>
        (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))
	</code></pre>
</section>
Line Numbers & Highlights
To enable line numbers, add data-line-numbers to your <code> tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted:
<pre><code class=""hljs"" data-line-numbers=""4,8-11"">
import React, { useState } from 'react';
 
function Example() {
  const [count, setCount] = useState(0);
 
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
</code></pre>

Slide number
If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values.
// Shows the slide number using default formatting
Reveal.configure({ slideNumber: true });

// Slide number formatting can be configured using these variables:
//  ""h.v"": 	horizontal . vertical slide number (default)
//  ""h/v"": 	horizontal / vertical slide number
//    ""c"": 	flattened slide number
//  ""c/t"": 	flattened slide number / total slides
Reveal.configure({ slideNumber: 'c/t' });

// You can provide a function to fully customize the number:
Reveal.configure({ slideNumber: function() {
    // Ignore numbering of vertical slides
    return [ Reveal.getIndices().h ];
}});

// Control which views the slide number displays on using the ""showSlideNumber"" value:
//     ""all"": show on all views (default)
// ""speaker"": only show slide numbers on speaker notes view
//   ""print"": only show slide numbers when printing to PDF
Reveal.configure({ showSlideNumber: 'speaker' });
Overview mode
Press »ESC« or »O« keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides,
as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks:
Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } );
Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } );

// Toggle the overview mode programmatically
Reveal.toggleOverview();
Fullscreen mode
Just press »F« on your keyboard to show your presentation in fullscreen mode. Press the »ESC« key to exit fullscreen mode.
Embedded media
Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown:
<video data-autoplay src=""http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4""></video>
If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay.
Note that embedded HTML5 <video>/<audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.
Embedded iframes
reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.
Stretching elements
Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below:
<section>
	<h2>This video will use up the remaining space on the slide</h2>
    <video class=""stretch"" src=""http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4""></video>
</section>
Limitations:

Only direct descendants of a slide section can be stretched
Only one descendant per slide section can be stretched

Resize Event
When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly.
Reveal.addEventListener( 'resize', function( event ) {
	// event.scale, event.oldScale, event.size
} );
postMessage API
The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2:
<window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );
When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window:
window.addEventListener( 'message', function( event ) {
	var data = JSON.parse( event.data );
	if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) {
		// Slide changed, see data.state for slide number
	}
} );
This cross-window messaging can be toggled on or off using configuration flags.
Reveal.initialize({
	// ...

	// Exposes the reveal.js API through window.postMessage
	postMessage: true,

	// Dispatches all reveal.js events to the parent window through postMessage
	postMessageEvents: false
});
PDF Export
Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server.
Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.
Separate pages for fragments
Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally.
If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.
Page size
Export dimensions are inferred from the configured presentation size. Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.
Print stylesheet
To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD:
<script>
	var link = document.createElement( 'link' );
	link.rel = 'stylesheet';
	link.type = 'text/css';
	link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
	document.getElementsByTagName( 'head' )[0].appendChild( link );
</script>
Instructions

Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf.


If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true


Open the in-browser print dialog (CTRL/CMD+P).
Change the Destination setting to Save as PDF.
Change the Layout to Landscape.
Change the Margins to None.
Enable the Background graphics option.
Click Save.


Alternatively you can use the decktape project.
Theming
The framework comes with a few different themes included:

black: Black background, white text, blue links (default theme)
white: White background, black text, blue links
league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0)
beige: Beige background, dark text, brown links
sky: Blue background, thin dark text, blue links
night: Black background, thick white text, orange links
serif: Cappuccino background, gray text, brown links
simple: White background, black text, blue links
solarized: Cream-colored background, dark green text, blue links

Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html:
<link rel=""stylesheet"" href=""css/theme/black.css"" id=""theme"">
If you want to add a theme of your own see the instructions here: /css/theme/README.md.
Speaker Notes
reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the »S« key on your keyboard to open the notes window.
A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it.
Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown.
Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=""Something important""></section>.
When used locally, this feature requires that reveal.js runs from a local web server.
<section>
	<h2>Some Slide</h2>

	<aside class=""notes"">
		Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit »S« on your keyboard).
	</aside>
</section>
If you're using the external Markdown plugin, you can add notes with the help of a special delimiter:
<section data-markdown=""example.md"" data-separator=""^\n\n\n"" data-separator-vertical=""^\n\n"" data-separator-notes=""^Note:""></section>

# Title
## Sub-title

Here is some content...

Note:
This will only display in the notes window.
Share and Print Speaker Notes
Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true. Notes will appear along the bottom of the presentations.
When showNotes is enabled notes are also included when you export to PDF. By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: ""separate-page"".
Speaker notes clock and timers
The speaker notes window will also show:

Time elapsed since the beginning of the presentation.  If you hover the mouse above this section, a timer reset button will appear.
Current wall-clock time
(Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue).

The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide.  120 can be a reasonable rule of thumb.  Timings can also be given per slide <section> by setting the data-timing attribute.  Both values are in numbers of seconds.
Server Side Speaker Notes
In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies:
Reveal.initialize({
	// ...

	dependencies: [
		{ src: 'socket.io/socket.io.js', async: true },
		{ src: 'plugin/notes-server/client.js', async: true }
	]
});
Then:

Install Node.js (4.0.0 or later)
Run npm install
Run node plugin/notes-server

Plugins
Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ). Registered plugin instances can optionally expose an ""init"" function that reveal.js will call to initialize them.
When reveal.js is booted up via Reveal.initialize(), it will go through all registered plugins and invoke their ""init"" methods. If the ""init"" method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed:
let MyPlugin = {
	init: () =>  new Promise( resolve => setTimeout( resolve, 3000 ) )
};
Reveal.registerPlugin( 'myPlugin', MyPlugin );
Reveal.addEventListener( 'ready', () => console.log( 'Three seconds later...' ) );
Reveal.initialize();
If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.
Retrieving Plugins
If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ). If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ).
Multiplexing
The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/.
The multiplex plugin needs the following 3 things to operate:

Master presentation that has control
Client presentations that follow the master
Socket.io server to broadcast events from the master to the clients

Master presentation
Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation:

npm install node-static
static

If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server.
You can then access your master presentation at http://localhost:1947
Example configuration:
Reveal.initialize({
	// other options...

	multiplex: {
		// Example values. To generate your own, see the socket.io server instructions.
		secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation
		id: '1ea875674b17ca76', // Obtained from socket.io server
		url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server
	},

	// Don't forget to add the dependencies
	dependencies: [
		{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true },
		{ src: 'plugin/multiplex/master.js', async: true },

		// and if you want speaker notes
		{ src: 'plugin/notes-server/client.js', async: true }

		// other dependencies...
	]
});
Client presentation
Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html, with the configuration below causing them to connect to the socket.io server as clients.
Example configuration:
Reveal.initialize({
	// other options...

	multiplex: {
		// Example values. To generate your own, see the socket.io server instructions.
		secret: null, // null so the clients do not have control of the master presentation
		id: '1ea875674b17ca76', // id, obtained from socket.io server
		url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server
	},

	// Don't forget to add the dependencies
	dependencies: [
		{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true },
		{ src: 'plugin/multiplex/client.js', async: true }

		// other dependencies...
	]
});
Socket.io server
Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands:

npm install
node plugin/multiplex

Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/.
You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token, where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/, visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token.
You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/, but availability and stability are not guaranteed.
For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now. With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex.
socket.io server as file static server
The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/. (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.)
Example configuration:
Reveal.initialize({
	// other options...

	multiplex: {
		// Example values. To generate your own, see the socket.io server instructions.
		secret: null, // null so the clients do not have control of the master presentation
		id: '1ea875674b17ca76', // id, obtained from socket.io server
		url: 'example.com:80' // Location of your socket.io server
	},

	// Don't forget to add the dependencies
	dependencies: [
		{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true },
		{ src: 'plugin/multiplex/client.js', async: true }

		// other dependencies...
	]
It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;)
Example configuration:
Reveal.initialize({
	// other options...

	multiplex: {
		// Example values. To generate your own, see the socket.io server instructions.
		secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation
		id: '1ea875674b17ca76', // Obtained from socket.io server
		url: 'example.com:80' // Location of your socket.io server
	},

	// Don't forget to add the dependencies
	dependencies: [
		{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true },
		{ src: 'plugin/multiplex/master.js', async: true },
		{ src: 'plugin/multiplex/client.js', async: true }

		// other dependencies...
	]
});
MathJax
If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here.
The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value.
Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all.
Reveal.initialize({
	// other options ...

	math: {
		mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js',
		config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html
		// pass other options into `MathJax.Hub.Config()`
		TeX: { Macros: macros }
	},

	dependencies: [
		{ src: 'plugin/math/math.js', async: true }
	]
});
Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.
MathJax in Markdown
If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example:
`$$ J(\theta_0,\theta_1) = \sum_{i=0} $$`

License
MIT licensed
Copyright (C) 2019 Hakim El Hattab, http://hakim.se

"
62,"
socket.io
 






Features
Socket.IO enables real-time bidirectional event-based communication. It consists of:

a Node.js server (this repository)
a Javascript client library for the browser (or a Node.js client)

Some implementations in other languages are also available:

Java
C++
Swift
Dart

Its main features are:
Reliability
Connections are established even in the presence of:

proxies and load balancers.
personal firewall and antivirus software.

For this purpose, it relies on Engine.IO, which first establishes a long-polling connection, then tries to upgrade to better transports that are ""tested"" on the side, like WebSocket. Please see the Goals section for more information.
Auto-reconnection support
Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options here.
Disconnection detection
A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore.
That functionality is achieved with timers set on both the server and the client, with timeout values (the pingInterval and pingTimeout parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes.
Binary support
Any serializable data structures can be emitted, including:

ArrayBuffer and Blob in the browser
ArrayBuffer and Buffer in Node.js

Simple and convenient API
Sample code:
io.on('connection', socket => {
  socket.emit('request', /* … */); // emit an event to the socket
  io.emit('broadcast', /* … */); // emit an event to all connected sockets
  socket.on('reply', () => { /* … */ }); // listen to the event
});
Cross-browser
Browser support is tested in Saucelabs:

Multiplexing support
In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several Namespaces, which will act as separate communication channels but will share the same underlying connection.
Room support
Within each Namespace, you can define arbitrary channels, called Rooms, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it.
This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example.
Note: Socket.IO is not a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server (like ws://echo.websocket.org) either. Please see the protocol specification here.
Installation
npm install socket.io
How to use
The following example attaches socket.io to a plain Node.JS
HTTP server listening on port 3000.
const server = require('http').createServer();
const io = require('socket.io')(server);
io.on('connection', client => {
  client.on('event', data => { /* … */ });
  client.on('disconnect', () => { /* … */ });
});
server.listen(3000);
Standalone
const io = require('socket.io')();
io.on('connection', client => { ... });
io.listen(3000);
In conjunction with Express
Starting with 3.0, express applications have become request handler
functions that you pass to http or http Server instances. You need
to pass the Server to socket.io, and not the express application
function. Also make sure to call .listen on the server, not the app.
const app = require('express')();
const server = require('http').createServer(app);
const io = require('socket.io')(server);
io.on('connection', () => { /* … */ });
server.listen(3000);
In conjunction with Koa
Like Express.JS, Koa works by exposing an application as a request
handler function, but only by calling the callback method.
const app = require('koa')();
const server = require('http').createServer(app.callback());
const io = require('socket.io')(server);
io.on('connection', () => { /* … */ });
server.listen(3000);
Documentation
Please see the documentation here. Contributions are welcome!
Debug / logging
Socket.IO is powered by debug.
In order to see all the debug output, run your app with the environment variable
DEBUG including the desired scope.
To see the output from all of Socket.IO's debugging scopes you can use:
DEBUG=socket.io* node myapp

Testing
npm test

This runs the gulp task test. By default the test will be run with the source code in lib directory.
Set the environmental variable TEST_VERSION to compat to test the transpiled es5-compat version of the code.
The gulp task test will always transpile the source code into es5 and export to dist first before running the test.
Backers
Support us with a monthly donation and help us continue our activities. [Become a backer]






























Sponsors
Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor]






























License
MIT

"
63,"
Flask
Flask is a lightweight WSGI web application framework. It is designed
to make getting started quick and easy, with the ability to scale up to
complex applications. It began as a simple wrapper around Werkzeug
and Jinja and has become one of the most popular Python web
application frameworks.
Flask offers suggestions, but doesn't enforce any dependencies or
project layout. It is up to the developer to choose the tools and
libraries they want to use. There are many extensions provided by the
community that make adding new functionality easy.

Installing
Install and update using pip:
pip install -U Flask


A Simple Example
from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def hello():
    return ""Hello, World!""
$ env FLASK_APP=hello.py flask run
 * Serving Flask app ""hello""
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)


Contributing
For guidance on setting up a development environment and how to make a
contribution to Flask, see the contributing guidelines.

Donate
The Pallets organization develops and supports Flask and the libraries
it uses. In order to grow the community of contributors and users, and
allow the maintainers to devote more time to the projects, please
donate today.

Links

Website: https://palletsprojects.com/p/flask/
Documentation: https://flask.palletsprojects.com/
Releases: https://pypi.org/project/Flask/
Code: https://github.com/pallets/flask
Issue tracker: https://github.com/pallets/flask/issues
Test status: https://dev.azure.com/pallets/flask/_build
Official chat: https://discord.gg/t6rrQZH


"
64,"

Semantic UI


Semantic is a UI framework designed for theming.
Key Features

50+ UI elements
3000 + CSS variables
3 Levels of variable inheritance (similar to SublimeText)
Built with EM values for responsive design
Flexbox friendly

Semantic allows developers to build beautiful websites fast, with concise HTML, intuitive javascript, and simplified debugging, helping make front-end development a delightful experience. Semantic is responsively designed allowing your website to scale on multiple devices. Semantic is production ready and partnered with frameworks such as React, Angular, Meteor, and Ember, which means you can integrate it with any of these frameworks to organize your UI layer alongside your application logic.
2.4.0 Release (Sep 17th, 2018)
Semantic UI 2.4 is now available. Read up on what's new in the docs.
Migration info from 1.x can be found in the 2.0 release notes
User Support
Please help us keep the issue tracker organized. For technical questions that do not include a specific JSFiddle test case (bug reports), or feature request please use StackOverflow to find a solution.
Visit our contributing guide for more on what should be posted to GitHub Issues.
Install
Recommended Install
npm install semantic-ui  # Use themes, import build/watch tasks into your own gulpfile.
Semantic UI includes an interactive installer to help setup your project.

For more details on setup visit our getting started guide.
To learn more about theming please read our theming guide

Additional Versions



Environment
Install Script
Repo




CSS Only
npm install semantic-ui-css
CSS Repo


LESS Only
npm install semantic-ui-less
LESS Repo


LESS plugin
npm install less-plugin-semantic-ui
LESS Plugin Repo


EmberJS
ember install:addon semantic-ui-ember
Ember Repo


Meteor - LESS
meteor add semantic:ui
Meteor Repo


Meteor - CSS
meteor add semantic:ui-css
CSS Repo


Bower
bower install semantic-ui




Check out our integration wiki for more options.
Browser Support

Last 2 Versions FF, Chrome, Safari Mac
IE 11+
Android 4.4+, Chrome for Android 44+
iOS Safari 7+
Microsoft Edge 12+

Although some components will work in IE9, grids and other flexbox components are not supported by IE9 and may not appear correctly.
Community
Getting Help
Please do not post usage questions to GitHub Issues. For these types of questions use our [Gitter chatroom] or StackOverflow.
Submitting Bugs and Enhancements
GitHub Issues is for suggesting enhancements and reporting bugs. Before submiting a bug make sure you do the following:

Check out our contributing guide for info on our release cycle.
Fork this boilerplate JSFiddle to create a test case for your bug. If a bug is apparent in the docs, that's ok as a test case, just make it clear exactly how to reproduce the issue. Only bugs that include a test case can be triaged.

Pull Requests
When adding pull requests, be sure to merge into the next branch. If you need to demonstrate a fix in next release, you can use this JSFiddle
International

Chinese A Chinese mirror site is available at http://www.semantic-ui.cn.
Right-to-Left (RTL) An RTL version can be created using our build tools by selecting rtl from the install script.
Translation To help translate see the Wiki Guide for translations.

Resources



Resource
Description




Bugs & Feature Requests
All bug submission require a link to a test case, and a set of steps to reproduce the issue. You can make a test case by forking this JSFiddle, then submit your bug report on GitHub Issues


Live Chat
Join our Gitter.im Room


Newsletter Updates
Sign up for updates at semantic-ui.com


Additional Resources
Submit a question on StackOverflow or ask our Google Group



Places to Help



Project
How To Help
Next Step




Localization
Help us translate Semantic UI into your language
Join our Translation Community


SCSS
SASS needs PR to support variables inside @import
Add Pull Request for #739


Angular
Help develop angular bindings
Reach Out on GitHub Issues


Guides & Tutorials
Help write guides and tutorials
Join the discussion



Reaching Out
If you'd like to start a conversation about Semantic feel free to e-mail me at jack@semantic-ui.com



"
65,"

Fast, unopinionated, minimalist web framework for node.





const express = require('express')
const app = express()

app.get('/', function (req, res) {
  res.send('Hello World')
})

app.listen(3000)
Installation
This is a Node.js module available through the
npm registry.
Before installing, download and install Node.js.
Node.js 0.10 or higher is required.
Installation is done using the
npm install command:
$ npm install express
Follow our installing guide
for more information.
Features

Robust routing
Focus on high performance
Super-high test coverage
HTTP helpers (redirection, caching, etc)
View system supporting 14+ template engines
Content negotiation
Executable for generating applications quickly

Docs & Community

Website and Documentation - [website repo]
#express on freenode IRC
GitHub Organization for Official Middleware & Modules
Visit the Wiki
Google Group for discussion
Gitter for support and discussion

PROTIP Be sure to read Migrating from 3.x to 4.x as well as New features in 4.x.
Security Issues
If you discover a security vulnerability in Express, please see Security Policies and Procedures.
Quick Start
The quickest way to get started with express is to utilize the executable express(1) to generate an application as shown below:
Install the executable. The executable's major version will match Express's:
$ npm install -g express-generator@4
Create the app:
$ express /tmp/foo && cd /tmp/foo
Install dependencies:
$ npm install
Start the server:
$ npm start
View the website at: http://localhost:3000
Philosophy
The Express philosophy is to provide small, robust tooling for HTTP servers, making
it a great solution for single page applications, web sites, hybrids, or public
HTTP APIs.
Express does not force you to use any specific ORM or template engine. With support for over
14 template engines via Consolidate.js,
you can quickly craft your perfect framework.
Examples
To view the examples, clone the Express repo and install the dependencies:
$ git clone git://github.com/expressjs/express.git --depth 1
$ cd express
$ npm install
Then run whichever example you want:
$ node examples/content-negotiation
Tests
To run the test suite, first install the dependencies, then run npm test:
$ npm install
$ npm test
Contributing
Contributing Guide
People
The original author of Express is TJ Holowaychuk
The current lead maintainer is Douglas Christopher Wilson
List of all contributors
License
MIT

"
66,"


    Simple yet flexible JavaScript charting for designers & developers








Documentation

Introduction
Getting Started
General
Configuration
Charts
Axes
Developers
Popular Extensions
Samples

Contributing
Instructions on building and testing Chart.js can be found in the documentation. Before submitting an issue or a pull request, please take a moment to look over the contributing guidelines first. For support, please post questions on Stack Overflow with the chartjs tag.
License
Chart.js is available under the MIT license.

"
67,"


























English | 简体中文 | 日本語 | Spanish
Introduction
vue-element-admin is a production-ready front-end solution for admin interfaces. It is based on vue and uses the UI Toolkit element-ui.
vue-element-admin is based on the newest development stack of vue and it has a built-in i18n solution, typical templates for enterprise applications, and lots of awesome features. It helps you build large and complex Single-Page Applications. I believe whatever your needs are, this project will help you.


Preview


Documentation


Gitter


Donate


Wiki


Gitee 国内用户可访问该地址在线预览


Base template recommends using: vue-admin-template


Desktop: electron-vue-admin


Typescript: vue-typescript-admin-template (Credits: @Armour)


awesome-project


After the v4.1.0+ version, the default master branch will not support i18n. Please use i18n Branch, it will keep up with the master update
The current version is v4.0+ build on vue-cli. If you find a problem, please put issue. If you want to use the old version , you can switch branch to tag/3.11.0, it does not rely on vue-cli
This project does not support low version browsers (e.g. IE). Please add polyfill by yourself.
Preparation
You need to install node and git locally. The project is based on ES2015+, vue, vuex, vue-router, vue-cli , axios and element-ui, all request data is simulated using Mock.js.
Understanding and learning this knowledge in advance will greatly help the use of this project.



Sponsors
Become a sponsor and get your logo on our README on GitHub with a link to your site. [Become a sponsor]
Admin Dashboard Templates made with Vue, React and Angular.
Features
- Login / Logout

- Permission Authentication
  - Page permission
  - Directive permission
  - Permission configuration page
  - Two-step login

- Multi-environment build
  - dev sit stage prod

- Global Features
  - I18n
  - Multiple dynamic themes
  - Dynamic sidebar (supports multi-level routing)
  - Dynamic breadcrumb
  - Tags-view (Tab page Support right-click operation)
  - Svg Sprite
  - Mock data
  - Screenfull
  - Responsive Sidebar

- Editor
  - Rich Text Editor
  - Markdown Editor
  - JSON Editor

- Excel
  - Export Excel
  - Upload Excel
  - Visualization Excel
  - Export zip

- Table
  - Dynamic Table
  - Drag And Drop Table
  - Inline Edit Table

- Error Page
  - 401
  - 404

- Components
  - Avatar Upload
  - Back To Top
  - Drag Dialog
  - Drag Select
  - Drag Kanban
  - Drag List
  - SplitPane
  - Dropzone
  - Sticky
  - CountTo

- Advanced Example
- Error Log
- Dashboard
- Guide Page
- ECharts
- Clipboard
- Markdown to html

Getting started
# clone the project
git clone https://github.com/PanJiaChen/vue-element-admin.git

# enter the project directory
cd vue-element-admin

# install dependency
npm install

# develop
npm run dev
This will automatically open http://localhost:9527
Build
# build for test environment
npm run build:stage

# build for production environment
npm run build:prod
Advanced
# preview the release environment effect
npm run preview

# preview the release environment effect + static resource analysis
npm run preview -- --report

# code format check
npm run lint

# code format check and auto fix
npm run lint -- --fix
Refer to Documentation for more information
Changelog
Detailed changes for each release are documented in the release notes.
Online Demo
Preview
Donate
If you find this project useful, you can buy author a glass of juice 🍹

Paypal Me
Buy me a coffee
Browsers support
Modern browsers and Internet Explorer 10+.



IE / Edge
Firefox
Chrome
Safari




IE10, IE11, Edge
last 2 versions
last 2 versions
last 2 versions



License
MIT
Copyright (c) 2017-present PanJiaChen

"
68,"
Elasticsearch
A Distributed RESTful Search Engine
https://www.elastic.co/products/elasticsearch
Elasticsearch is a distributed RESTful search engine built for the cloud. Features include:

Distributed and Highly Available Search Engine.
	
Each index is fully sharded with a configurable number of shards.
Each shard can have one or more replicas.
Read / Search operations performed on any of the replica shards.

Multi Tenant.
	
Support for more than one index.
Index level configuration (number of shards, index storage, …).

Various set of APIs
	
HTTP RESTful API
Native Java API.
All APIs perform automatic node operation rerouting.

Document oriented
	
No need for upfront schema definition.
Schema can be defined for customization of the indexing process.

Reliable, Asynchronous Write Behind for long term persistency.
(Near) Real Time Search.
Built on top of Lucene
	
Each shard is a fully functional Lucene index
All the power of Lucene easily exposed through simple configuration / plugins.

Per operation consistency
	
Single document level operations are atomic, consistent, isolated and durable.


Getting Started
First of all, DON’T PANIC. It will take 5 minutes to get the gist of what Elasticsearch is all about.
Requirements
You need to have a recent version of Java installed. See the Setup page for more information.
Installation

Download and unzip the Elasticsearch official distribution.
Run bin/elasticsearch on unix, or bin\elasticsearch.bat on windows.
Run curl -X GET http://localhost:9200/.
Start more servers …

Indexing
Let’s try and index some twitter like information. First, let’s index some tweets (the twitter index will be created automatically):
curl -XPUT 'http://localhost:9200/twitter/_doc/1?pretty' -H 'Content-Type: application/json' -d '
{
    ""user"": ""kimchy"",
    ""post_date"": ""2009-11-15T13:12:00"",
    ""message"": ""Trying out Elasticsearch, so far so good?""
}'

curl -XPUT 'http://localhost:9200/twitter/_doc/2?pretty' -H 'Content-Type: application/json' -d '
{
    ""user"": ""kimchy"",
    ""post_date"": ""2009-11-15T14:12:12"",
    ""message"": ""Another tweet, will it be indexed?""
}'

curl -XPUT 'http://localhost:9200/twitter/_doc/3?pretty' -H 'Content-Type: application/json' -d '
{
    ""user"": ""elastic"",
    ""post_date"": ""2010-01-15T01:46:38"",
    ""message"": ""Building the site, should be kewl""
}'

Now, let’s see if the information was added by GETting it:
curl -XGET 'http://localhost:9200/twitter/_doc/1?pretty=true'
curl -XGET 'http://localhost:9200/twitter/_doc/2?pretty=true'
curl -XGET 'http://localhost:9200/twitter/_doc/3?pretty=true'

Searching
Mmm search…, shouldn’t it be elastic?
Let’s find all the tweets that kimchy posted:
curl -XGET 'http://localhost:9200/twitter/_search?q=user:kimchy&pretty=true'

We can also use the JSON query language Elasticsearch provides instead of a query string:
curl -XGET 'http://localhost:9200/twitter/_search?pretty=true' -H 'Content-Type: application/json' -d '
{
    ""query"" : {
        ""match"" : { ""user"": ""kimchy"" }
    }
}'

Just for kicks, let’s get all the documents stored (we should see the tweet from elastic as well):
curl -XGET 'http://localhost:9200/twitter/_search?pretty=true' -H 'Content-Type: application/json' -d '
{
    ""query"" : {
        ""match_all"" : {}
    }
}'

We can also do range search (the post_date was automatically identified as date)
curl -XGET 'http://localhost:9200/twitter/_search?pretty=true' -H 'Content-Type: application/json' -d '
{
    ""query"" : {
        ""range"" : {
            ""post_date"" : { ""from"" : ""2009-11-15T13:00:00"", ""to"" : ""2009-11-15T14:00:00"" }
        }
    }
}'

There are many more options to perform search, after all, it’s a search product no? All the familiar Lucene queries are available through the JSON query language, or through the query parser.
Multi Tenant and Indices
Man, that twitter index might get big (in this case, index size == valuation). Let’s see if we can structure our twitter system a bit differently in order to support such large amounts of data.
Elasticsearch supports multiple indices. In the previous example we used an index called twitter that stored tweets for every user.
Another way to define our simple twitter system is to have a different index per user (note, though that each index has an overhead). Here is the indexing curl’s in this case:
curl -XPUT 'http://localhost:9200/kimchy/_doc/1?pretty' -H 'Content-Type: application/json' -d '
{
    ""user"": ""kimchy"",
    ""post_date"": ""2009-11-15T13:12:00"",
    ""message"": ""Trying out Elasticsearch, so far so good?""
}'

curl -XPUT 'http://localhost:9200/kimchy/_doc/2?pretty' -H 'Content-Type: application/json' -d '
{
    ""user"": ""kimchy"",
    ""post_date"": ""2009-11-15T14:12:12"",
    ""message"": ""Another tweet, will it be indexed?""
}'

The above will index information into the kimchy index. Each user will get their own special index.
Complete control on the index level is allowed. As an example, in the above case, we might want to change from the default 1 shard with 1 replica per index, to 2 shards with 1 replica per index (because this user tweets a lot). Here is how this can be done (the configuration can be in yaml as well):
curl -XPUT http://localhost:9200/another_user?pretty -H 'Content-Type: application/json' -d '
{
    ""settings"" : {
        ""index.number_of_shards"" : 2,
        ""index.number_of_replicas"" : 1
    }
}'

Search (and similar operations) are multi index aware. This means that we can easily search on more than one
index (twitter user), for example:
curl -XGET 'http://localhost:9200/kimchy,another_user/_search?pretty=true' -H 'Content-Type: application/json' -d '
{
    ""query"" : {
        ""match_all"" : {}
    }
}'

Or on all the indices:
curl -XGET 'http://localhost:9200/_search?pretty=true' -H 'Content-Type: application/json' -d '
{
    ""query"" : {
        ""match_all"" : {}
    }
}'

{One liner teaser}: And the cool part about that? You can easily search on multiple twitter users (indices), with different boost levels per user (index), making social search so much simpler (results from my friends rank higher than results from friends of my friends).
Distributed, Highly Available
Let’s face it, things will fail….
Elasticsearch is a highly available and distributed search engine. Each index is broken down into shards, and each shard can have one or more replicas. By default, an index is created with 1 shards and 1 replica per shard (1/1). There are many topologies that can be used, including 1/10 (improve search performance), or 20/1 (improve indexing performance, with search executed in a map reduce fashion across shards).
In order to play with the distributed nature of Elasticsearch, simply bring more nodes up and shut down nodes. The system will continue to serve requests (make sure you use the correct http port) with the latest data indexed.
Where to go from here?
We have just covered a very small portion of what Elasticsearch is all about. For more information, please refer to the elastic.co website. General questions can be asked on the Elastic Discourse forum or on IRC on Freenode at #elasticsearch. The Elasticsearch GitHub repository is reserved for bug reports and feature requests only.
Building from Source
Elasticsearch uses Gradle for its build system.
In order to create a distribution, simply run the ./gradlew assemble command in the cloned directory.
The distribution for each project will be created under the build/distributions directory in that project.
See the TESTING file for more information about running the Elasticsearch test suite.
Upgrading from older Elasticsearch versions
In order to ensure a smooth upgrade process from earlier versions of Elasticsearch, please see our upgrade documentation for more details on the upgrade process.
"
69,"
Keras: Deep Learning for humans



You have just found Keras.
Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result with the least possible delay is key to doing good research.
Use Keras if you need a deep learning library that:

Allows for easy and fast prototyping (through user friendliness, modularity, and extensibility).
Supports both convolutional networks and recurrent networks, as well as combinations of the two.
Runs seamlessly on CPU and GPU.

Read the documentation at Keras.io.
Keras is compatible with: Python 2.7-3.6.

Multi-backend Keras and tf.keras:
At this time, we recommend that Keras users who use multi-backend Keras with the TensorFlow backend switch to tf.keras in TensorFlow 2.0. tf.keras is better maintained and has better integration with TensorFlow features (eager execution, distribution support and other).
Keras 2.2.5 was the last release of Keras implementing the 2.2.* API. It was the last release to only support TensorFlow 1 (as well as Theano and CNTK).
The current release is Keras 2.3.0, which makes significant API changes and add support for TensorFlow 2.0. The 2.3.0 release will be the last major release of multi-backend Keras. Multi-backend Keras is superseded by tf.keras.
Bugs present in multi-backend Keras will only be fixed until April 2020 (as part of minor releases).
For more information about the future of Keras, see the Keras meeting notes.

Guiding principles


User friendliness. Keras is an API designed for human beings, not machines. It puts user experience front and center. Keras follows best practices for reducing cognitive load: it offers consistent & simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear and actionable feedback upon user error.


Modularity. A model is understood as a sequence or a graph of standalone, fully configurable modules that can be plugged together with as few restrictions as possible. In particular, neural layers, cost functions, optimizers, initialization schemes, activation functions and regularization schemes are all standalone modules that you can combine to create new models.


Easy extensibility. New modules are simple to add (as new classes and functions), and existing modules provide ample examples. To be able to easily create new modules allows for total expressiveness, making Keras suitable for advanced research.


Work with Python. No separate models configuration files in a declarative format. Models are described in Python code, which is compact, easier to debug, and allows for ease of extensibility.



Getting started: 30 seconds to Keras
The core data structure of Keras is a model, a way to organize layers. The simplest type of model is the Sequential model, a linear stack of layers. For more complex architectures, you should use the Keras functional API, which allows to build arbitrary graphs of layers.
Here is the Sequential model:
from keras.models import Sequential

model = Sequential()
Stacking layers is as easy as .add():
from keras.layers import Dense

model.add(Dense(units=64, activation='relu', input_dim=100))
model.add(Dense(units=10, activation='softmax'))
Once your model looks good, configure its learning process with .compile():
model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])
If you need to, you can further configure your optimizer. A core principle of Keras is to make things reasonably simple, while allowing the user to be fully in control when they need to (the ultimate control being the easy extensibility of the source code).
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True))
You can now iterate on your training data in batches:
# x_train and y_train are Numpy arrays --just like in the Scikit-Learn API.
model.fit(x_train, y_train, epochs=5, batch_size=32)
Alternatively, you can feed batches to your model manually:
model.train_on_batch(x_batch, y_batch)
Evaluate your performance in one line:
loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)
Or generate predictions on new data:
classes = model.predict(x_test, batch_size=128)
Building a question answering system, an image classification model, a Neural Turing Machine, or any other model is just as fast. The ideas behind deep learning are simple, so why should their implementation be painful?
For a more in-depth tutorial about Keras, you can check out:

Getting started with the Sequential model
Getting started with the functional API

In the examples folder of the repository, you will find more advanced models: question-answering with memory networks, text generation with stacked LSTMs, etc.

Installation
Before installing Keras, please install one of its backend engines: TensorFlow, Theano, or CNTK. We recommend the TensorFlow backend.

TensorFlow installation instructions.
Theano installation instructions.
CNTK installation instructions.

You may also consider installing the following optional dependencies:

cuDNN (recommended if you plan on running Keras on GPU).
HDF5 and h5py (required if you plan on saving Keras models to disk).
graphviz and pydot (used by visualization utilities to plot model graphs).

Then, you can install Keras itself. There are two ways to install Keras:

Install Keras from PyPI (recommended):

Note: These installation steps assume that you are on a Linux or Mac environment.
If you are on Windows, you will need to remove sudo to run the commands below.
sudo pip install keras
If you are using a virtualenv, you may want to avoid using sudo:
pip install keras

Alternatively: install Keras from the GitHub source:

First, clone Keras using git:
git clone https://github.com/keras-team/keras.git
Then, cd to the Keras folder and run the install command:
cd keras
sudo python setup.py install

Configuring your Keras backend
By default, Keras will use TensorFlow as its tensor manipulation library. Follow these instructions to configure the Keras backend.

Support
You can ask questions and join the development discussion:

On the Keras Google group.
On the Keras Slack channel. Use this link to request an invitation to the channel.

You can also post bug reports and feature requests (only) in GitHub issues. Make sure to read our guidelines first.

Why this name, Keras?
Keras (κέρας) means horn in Greek. It is a reference to a literary image from ancient Greek and Latin literature, first found in the Odyssey, where dream spirits (Oneiroi, singular Oneiros) are divided between those who deceive men with false visions, who arrive to Earth through a gate of ivory, and those who announce a future that will come to pass, who arrive through a gate of horn. It's a play on the words κέρας (horn) / κραίνω (fulfill), and ἐλέφας (ivory) / ἐλεφαίρομαι (deceive).
Keras was initially developed as part of the research effort of project ONEIROS (Open-ended Neuro-Electronic Intelligent Robot Operating System).

""Oneiroi are beyond our unravelling --who can be sure what tale they tell? Not all that men look for comes to pass. Two gates there are that give passage to fleeting Oneiroi; one is made of horn, one of ivory. The Oneiroi that pass through sawn ivory are deceitful, bearing a message that will not be fulfilled; those that come out through polished horn have truth behind them, to be accomplished for men who see them."" Homer, Odyssey 19. 562 ff (Shewring translation).



"
70,"
Django
Django is a high-level Python Web framework that encourages rapid development
and clean, pragmatic design. Thanks for checking it out.
All documentation is in the ""docs"" directory and online at
https://docs.djangoproject.com/en/stable/. If you're just getting started,
here's how we recommend you read the docs:

First, read docs/intro/install.txt for instructions on installing Django.
Next, work through the tutorials in order (docs/intro/tutorial01.txt,
docs/intro/tutorial02.txt, etc.).
If you want to set up an actual deployment server, read
docs/howto/deployment/index.txt for instructions.
You'll probably want to read through the topical guides (in docs/topics)
next; from there you can jump to the HOWTOs (in docs/howto) for specific
problems, and check out the reference (docs/ref) for gory details.
See docs/README for instructions on building an HTML version of the docs.

Docs are updated rigorously. If you find any problems in the docs, or think
they should be clarified in any way, please take 30 seconds to fill out a
ticket here: https://code.djangoproject.com/newticket
To get more help:

Join the #django channel on irc.freenode.net. Lots of helpful people hang
out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're
new to IRC.
Join the django-users mailing list, or read the archives, at
https://groups.google.com/group/django-users.

To contribute to Django:

Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for
information about getting involved.

To run Django's test suite:

Follow the instructions in the ""Unit tests"" section of
docs/internals/contributing/writing-code/unit-tests.txt, published online at
https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests


"
71,"



There is an English version of README here. just click it！
我会尽力将 LeetCode 上所有的题目都用动画的形式演示出来，计划用 3 到 4 年时间去完成它，期待与你见证这一天！
文章最新首发于微信公众号 五分钟学算法 ，您可以关注获取最新的文章。
我已经将所有文章同步到了我的个人博客，如果国内访问 GitHub 较慢（图片裂开），可以访问这个地址：https://www.cxyxiaowu.com/likou/leetcode。
汇总



序号
题目&题解
动画




0
十大经典排序算法动画与解析，看我就够了！（配代码完全版）



1
两数之和



2
两数相加



3
无重复字符的最长子串



4
寻找两个有序数组的中位数



9
回文数



10
正则表达式匹配



11
盛最多水的容器



15
三数之和



19
删除链表的倒数第 N 个节点



20
有效的括号



21
合并两个有序链表



23
合并 K 个排序链表



24
两两交换链表中的节点



25
K 个一组翻转链表



26
删除排序数组中的重复项



38
报数



41
缺失的第一个正数



66
加一



75
颜色分类



86
分割链表



92
反转链表 II



94
二叉树的中序遍历



101
对称二叉树



102
二叉树的层序遍历



103
二叉树的锯齿形层次遍历



107
二叉树的层次遍历 II



118
杨辉三角



119
杨辉三角II



110
平衡二叉树



121
买卖股票的最佳时机



122
买卖股票的最佳时机II



123
买卖股票的最佳时机III



125
验证回文串



131
分割回文串



136
只出现一次的数字



138
复制带随机指针



139
单词拆分



141
环形链表



144
二叉树的前序遍历



145
二叉树的后序遍历



146
LRU缓存机制



150
逆波兰表达式求值



153
寻找旋转排序数组中的最小值



164
最大间距



167
两数之和 II - 输入有序数组



169
求众数



172
阶乘后的零



187
重复的 DNA 序列



191
位1的个数



199
二叉树的右视图



201
数字范围按位与



203
移除链表元素



206
反转链表



209
长度最小的子数组



219
存在重复元素 II



231
2的幂



237
删除链表中的节点



239
滑动窗口最大值



242
有效的字母异位词



268
缺失数字



279
完全平方数



283
移动零



295
数据流的中位数



301
删除无效的括号



319
灯泡开关



326
3 的幂



328
奇偶链表



342
4的幂



344
反转字符串



347
前K个高频元素



349
两个数组的交集



350
两个数组的交集 II



445
两数相加 II



447
回旋镖的数量



454
四数相加 II



642
设计一个搜索自动完成系统



690
员工的重要性



877
石子游戏



1025
除数博弈



1099
小于 K 的两数之和




几篇学习算法的经验贴
六千字干货文：到底要怎么去学算法？
微信大佬总结的算法学习经验
LeetCode 刷 500 道题，笔试/面试稳吗？谈谈算法的学习
邮箱：misterbigbooo@gmail.com
喜欢就 star❤️ 一下吧！
和我交流


"
72,"
 Shadowsocks for Windows

中文说明
Features

System proxy configuration
PAC mode and global mode
GFWList and user rules
Supports HTTP proxy
Supports server auto switching
Supports UDP relay (see Usage)
Supports plugins

Download
Download the latest release from release page.
Requirements
Microsoft .NET Framework 4.7.2 or higher, Microsoft Visual C++ 2015 Redistributable (x86) .
Basic

Find Shadowsocks icon in the notification tray
You can add multiple servers in servers menu
Select Enable System Proxy menu to enable system proxy. Please disable other
proxy addons in your browser, or set them to use system proxy
You can also configure your browser proxy manually if you don't want to enable
system proxy. Set Socks5 or HTTP proxy to 127.0.0.1:1080. You can change this
port in Servers -> Edit Servers

PAC

You can change PAC rules by editing the PAC file. When you save the PAC file
with any editor, Shadowsocks will notify browsers about the change automatically
You can also update PAC file from GFWList (maintained by 3rd party)
You can also use online PAC URL

For Windows10 Store and related applications, please execute the following command under Admin privilege:
netsh winhttp import proxy source=ie

Server Auto Switching

Load balance: choosing server randomly
High availability: choosing the best server (low latency and packet loss)
Choose By Total Package Loss: ping and choose. Please also enable
Availability Statistics in the menu if you want to use this
Write your own strategy by implement IStrategy interface and send us a pull request!

UDP
For UDP, you need to use SocksCap or ProxyCap to force programs you want
to be proxied to tunnel over Shadowsocks
Multiple Instances
If you want to manage multiple servers using other tools like SwitchyOmega,
you can start multiple Shadowsocks instances. To avoid configuration conflicts,
copy Shadowsocks to a new directory and choose a different local port.
Plugins
If you would like to connect to server via a plugin, please set the plugin's
path (relative or absolute) on Edit Servers form.
Note: Forward Proxy will not be used while a plugin is enabled.
Details:
Working with non SIP003 standard Plugin.
Global hotkeys
Hotkeys could be registered automatically on startup.
If you are using multiple instances of Shadowsocks,
you must set different key combination for each instance.
How to input?

Put focus in the corresponding textbox.
Press the key combination that you want to use.
Release all keys when you think it is ready.
Your input appears in the textbox.

How to change?

Put focus in the corresponding textbox.
Press BackSpace key to clear content.
Re-input new key combination.

How to deactivate?

Clear content in the textbox that you want to deactivate,
if you want to deactivate all, please clear all textboxes.
Press OK button to confirm.

Meaning of label color

Green: This key combination is not occupied by other programs and register successfully.
Yellow: This key combination is occupied by other programs and you have to change to another one.
Transparent without color: The initial status.

Server Configuration
Please visit Servers for more information.
Experimental
Experimental Features
Development

Visual Studio 2017 & .NET Framework 4.7.2 Developer Pack are required.
It is recommended to share your idea on the Issue Board before you start to work,
especially for feature development.

License
GPLv3
Open Source Components / Libraries
Caseless.Fody (MIT)    https://github.com/Fody/Caseless
Costura.Fody (MIT)     https://github.com/Fody/Costura
Fody (MIT)             https://github.com/Fody/Fody
GlobalHotKey (GPLv3)   https://github.com/kirmir/GlobalHotKey
Newtonsoft.Json (MIT)  https://www.newtonsoft.com/json
StringEx.CS ()         https://github.com/LazyMode/StringEx
ZXing.Net (Apache 2.0) https://github.com/micjahn/ZXing.Net

libsscrypto (GPLv2)    https://github.com/shadowsocks/libsscrypto
Privoxy (GPLv2)        https://www.privoxy.org
Sysproxy ()            https://github.com/Noisyfox/sysproxy


"
73,"
Apollo-11

🎌
Bahasa Indonesia,
Català,
Deutsch,
English,
Español,
Français,
Italiano,
Polski,
Português,
Русский,
Türkçe,
Română,
العربية,
हिंदी,
正體中文,
简体中文,
한국어,
日本
Original Apollo 11 guidance computer (AGC) source code for Command
Module (Comanche055) and Lunar Module (Luminary099). Digitized by
the folks at Virtual AGC and MIT Museum. The goal is to be
a repo for the original Apollo 11 source code. As such, PRs are
welcome for any issues identified between the transcriptions in this
repository and the original source scans for Luminary 099 and
Comanche 055, as well as any files I may have missed.
Contributing
Please read CONTRIBUTING.md before opening a pull request.
Compiling
If you are interested in compiling the original source code, check
out Virtual AGC.
Attribution



 
 




Copyright
Public domain


Comanche055
Part of the source code for Colossus 2A, the Command Module's (CM) Apollo Guidance Computer (AGC) for Apollo 11Assemble revision 055 of AGC program Comanche by NASA2021113-051. 10:28 APR. 1, 1969


Luminary099
Part of the source code for Luminary 1A, the Lunar Module's (LM) Apollo Guidance Computer (AGC) for Apollo 11Assemble revision 001 of AGC program LYM99 by NASA2021112-061. 16:27 JUL. 14, 1969


Assembler
yaYUL


Contact
Ron Burkey info@sandroid.org


Website
www.ibiblio.org/apollo


Digitalization
This source code has been transcribed or otherwise adapted from digitized images of a hardcopy from the MIT Museum. The digitization was performed by Paul Fjeld, and arranged for by Deborah Douglas of the Museum. Many thanks to both.



Contract and Approvals
Derived from CONTRACT_AND_APPROVALS.agc
This AGC program shall also be referred to as Colossus 2A.
This program is intended for use in the CM as specified in report R-577. This program was prepared under DSR project 55-23870, sponsored by the Manned Spacecraft Center of The National Aeronautics and Space Administration through contract NAS 9-4065 with the Instrumentation Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.



Submitted by
Role
Date




Margaret H. Hamilton
Colossus Programming LeaderApollo Guidance and Navigation
28 Mar 69






Approved by
Role
Date




Daniel J. Lickly
Director, Mission Program DevelopmentApollo Guidance and Navigation Program
28 Mar 69


Fred H. Martin
Colossus Project ManagerApollo Guidance and Navigation Program
28 Mar 69


Norman E. Sears
Director, Mission DevelopmentApollo Guidance and Navigation Program
28 Mar 69


Richard H. Battin
Director, Mission DevelopmentApollo Guidance and Navigation Program
28 Mar 69


David G. Hoag
DirectorApollo Guidance and Navigation Program
28 Mar 69


Ralph R. Ragan
Deputy DirectorInstrumentation Laboratory
28 Mar 69




"
74,"
HTTPie: a CLI, cURL-like tool for humans
HTTPie (pronounced aitch-tee-tee-pie) is a command line HTTP client.
Its goal is to make CLI interaction with web services as human-friendly
as possible. It provides a simple http command that allows for sending
arbitrary HTTP requests using a simple and natural syntax, and displays
colorized output. HTTPie can be used for testing, debugging, and
generally interacting with HTTP servers.
 
   


Contents

1   Main features
2   Installation
2.1   macOS
2.2   Linux
2.3   Windows, etc.
2.4   Python version
2.5   Unstable version


3   Usage
3.1   Examples


4   HTTP method
5   Request URL
5.1   Querystring parameters
5.2   URL shortcuts for localhost
5.3   Other default schemes


6   Request items
6.1   Escaping rules


7   JSON
7.1   Default behaviour
7.2   Explicit JSON
7.3   Non-string JSON fields


8   Forms
8.1   Regular forms
8.2   File upload forms


9   HTTP headers
9.1   Default request headers
9.2   Empty headers and header un-setting
9.3   Limiting response headers


10   Cookies
11   Authentication
11.1   Basic auth
11.2   Digest auth
11.3   Password prompt
11.4   .netrc
11.5   Auth plugins


12   HTTP redirects
12.1   Follow Location
12.2   Showing intermediary redirect responses
12.3   Limiting maximum redirects followed


13   Proxies
13.1   Environment variables
13.2   SOCKS


14   HTTPS
14.1   Server SSL certificate verification
14.2   Custom CA bundle
14.3   Client side SSL certificate
14.4   SSL version


15   Output options
15.1   What parts of the HTTP exchange should be printed
15.2   Viewing intermediary requests/responses
15.3   Conditional body download


16   Redirected Input
16.1   Request data from a filename


17   Terminal output
17.1   Colors and formatting
17.2   Binary data


18   Redirected output
19   Download mode
19.1   Downloaded filename
19.2   Piping while downloading
19.3   Resuming downloads
19.4   Other notes


20   Streamed responses
20.1   Disabling buffering
20.2   Examples use cases


21   Sessions
21.1   Named sessions
21.2   Anonymous sessions
21.3   Readonly session


22   Config
22.1   Config file directory
22.2   Configurable options
22.2.1   default_options


22.3   Un-setting previously specified options


23   Scripting
23.1   Best practices


24   Meta
24.1   Interface design
24.2   User support
24.3   Related projects
24.3.1   Dependencies
24.3.2   HTTPie friends
24.3.3   Alternatives


24.4   Contributing
24.5   Change log
24.6   Artwork
24.7   Licence
24.8   Authors





1   Main features

Expressive and intuitive syntax
Formatted and colorized terminal output
Built-in JSON support
Forms and file uploads
HTTPS, proxies, and authentication
Arbitrary request data
Custom headers
Persistent sessions
Wget-like downloads
Linux, macOS and Windows support
Plugins
Documentation
Test coverage



2   Installation

2.1   macOS
On macOS, HTTPie can be installed via Homebrew
(recommended):
$ brew install httpie
A MacPorts port is also available:
$ port install httpie

2.2   Linux
Most Linux distributions provide a package that can be installed using the
system package manager, for example:
# Debian, Ubuntu, etc.
$ apt-get install httpie
# Fedora
$ dnf install httpie
# CentOS, RHEL, ...
$ yum install httpie
# Arch Linux
$ pacman -S httpie

2.3   Windows, etc.
A universal installation method (that works on Windows, Mac OS X, Linux, …,
and always provides the latest version) is to use pip:
# Make sure we have an up-to-date version of pip and setuptools:
$ pip install --upgrade pip setuptools

$ pip install --upgrade httpie
(If pip installation fails for some reason, you can try
easy_install httpie as a fallback.)

2.4   Python version
Starting with version 2.0.0 (currently under development) Python 3.6+ is required.

2.5   Unstable version
You can also install the latest unreleased development version directly from
the master branch on GitHub.  It is a work-in-progress of a future stable
release so the experience might be not as smooth.


On macOS you can install it with Homebrew:
$ brew install httpie --HEAD
Otherwise with pip:
$ pip install --upgrade https://github.com/jakubroztocil/httpie/archive/master.tar.gz
Verify that now we have the
current development version identifier
with the -dev suffix, for example:
$ http --version
1.0.0-dev

3   Usage
Hello World:
$ http httpie.org
Synopsis:
$ http [flags] [METHOD] URL [ITEM [ITEM]]
See also http --help.

3.1   Examples
Custom HTTP method, HTTP headers and JSON data:
$ http PUT example.org X-API-Token:123 name=John
Submitting forms:
$ http -f POST example.org hello=World
See the request that is being sent using one of the output options:
$ http -v example.org
Use Github API to post a comment on an
issue
with authentication:
$ http -a USERNAME POST https://api.github.com/repos/jakubroztocil/httpie/issues/83/comments body='HTTPie is awesome! :heart:'
Upload a file using redirected input:
$ http example.org < file.json
Download a file and save it via redirected output:
$ http example.org/file > file
Download a file wget style:
$ http --download example.org/file
Use named sessions to make certain aspects or the communication persistent
between requests to the same host:
$ http --session=logged-in -a username:password httpbin.org/get API-Key:123

$ http --session=logged-in httpbin.org/headers
Set a custom Host header to work around missing DNS records:
$ http localhost:8000 Host:example.com

4   HTTP method
The name of the HTTP method comes right before the URL argument:
$ http DELETE example.org/todos/7
Which looks similar to the actual Request-Line that is sent:
DELETE /todos/7 HTTP/1.1
When the METHOD argument is omitted from the command, HTTPie defaults to
either GET (with no request data) or POST (with request data).

5   Request URL
The only information HTTPie needs to perform a request is a URL.
The default scheme is, somewhat unsurprisingly, http://,
and can be omitted from the argument – http example.org works just fine.

5.1   Querystring parameters
If you find yourself manually constructing URLs with querystring parameters
on the terminal, you may appreciate the param==value syntax for appending
URL parameters.
With that, you don't have to worry about escaping the &
separators for your shell. Additionally, any special characters in the
parameter name or value get automatically URL-escaped
(as opposed to parameters specified in the full URL, which HTTPie doesn’t
modify).
$ http https://api.github.com/search/repositories q==httpie per_page==1
GET /search/repositories?q=httpie&per_page=1 HTTP/1.1

5.2   URL shortcuts for localhost
Additionally, curl-like shorthand for localhost is supported.
This means that, for example :3000 would expand to http://localhost:3000
If the port is omitted, then port 80 is assumed.
$ http :/foo
GET /foo HTTP/1.1
Host: localhost
$ http :3000/bar
GET /bar HTTP/1.1
Host: localhost:3000
$ http :
GET / HTTP/1.1
Host: localhost

5.3   Other default schemes
When HTTPie is invoked as https then the default scheme is https://
($ https example.org will make a request to https://example.org).
You can also use the --default-scheme <URL_SCHEME> option to create
shortcuts for other protocols than HTTP (possibly supported via plugins).
Example for the httpie-unixsocket plugin:
# Before
$ http http+unix://%2Fvar%2Frun%2Fdocker.sock/info
# Create an alias
$ alias http-unix='http --default-scheme=""http+unix""'
# Now the scheme can be omitted
$ http-unix %2Fvar%2Frun%2Fdocker.sock/info

6   Request items
There are a few different request item types that provide a
convenient mechanism for specifying HTTP headers, simple JSON and
form data, files, and URL parameters.
They are key/value pairs specified after the URL. All have in
common that they become part of the actual request that is sent and that
their type is distinguished only by the separator used:
:, =, :=, ==, @, =@, and :=@. The ones with an
@ expect a file path as value.


Item Type
Description



HTTP Headers
Name:Value
Arbitrary HTTP header, e.g. X-API-Token:123.

URL parameters
name==value
Appends the given name/value pair as a query
string parameter to the URL.
The == separator is used.

Data Fields
field=value,
field=@file.txt
Request data fields to be serialized as a JSON
object (default), or to be form-encoded
(--form, -f).

Raw JSON fields
field:=json,
field:=@file.json
Useful when sending JSON and one or
more fields need to be a Boolean, Number,
nested Object, or an Array,  e.g.,
meals:='[""ham"",""spam""]' or pies:=[1,2,3]
(note the quotes).

Form File Fields
field@/dir/file
Only available with --form, -f.
For example screenshot@~/Pictures/img.png.
The presence of a file field results
in a multipart/form-data request.



Note that data fields aren't the only way to specify request data:
Redirected input is a mechanism for passing arbitrary request data.

6.1   Escaping rules
You can use \ to escape characters that shouldn't be used as separators
(or parts thereof). For instance, foo\==bar will become a data key/value
pair (foo= and bar) instead of a URL parameter.
Often it is necessary to quote the values, e.g. foo='bar baz'.
If any of the field names or headers starts with a minus
(e.g., -fieldname), you need to place all such items after the special
token -- to prevent confusion with --arguments:
$ http httpbin.org/post  --  -name-starting-with-dash=foo -Unusual-Header:bar
POST /post HTTP/1.1
-Unusual-Header: bar
Content-Type: application/json

{
    ""-name-starting-with-dash"": ""foo""
}

7   JSON
JSON is the lingua franca of modern web services and it is also the
implicit content type HTTPie uses by default.
Simple example:
$ http PUT example.org name=John email=john@example.org
PUT / HTTP/1.1
Accept: application/json, */*
Accept-Encoding: gzip, deflate
Content-Type: application/json
Host: example.org

{
    ""name"": ""John"",
    ""email"": ""john@example.org""
}

7.1   Default behaviour
If your command includes some data request items, they are serialized as a JSON
object by default. HTTPie also automatically sets the following headers,
both of which can be overwritten:


Content-Type
application/json

Accept
application/json, */*




7.2   Explicit JSON
You can use --json, -j to explicitly set Accept
to application/json regardless of whether you are sending data
(it's a shortcut for setting the header via the usual header notation:
http url Accept:'application/json, */*'). Additionally,
HTTPie will try to detect JSON responses even when the
Content-Type is incorrectly text/plain or unknown.

7.3   Non-string JSON fields
Non-string fields use the := separator, which allows you to embed raw JSON
into the resulting object. Text and raw JSON files can also be embedded into
fields using =@ and :=@:
$ http PUT api.example.com/person/1 \
    name=John \
    age:=29 married:=false hobbies:='[""http"", ""pies""]' \  # Raw JSON
    description=@about-john.txt \   # Embed text file
    bookmarks:=@bookmarks.json      # Embed JSON file
PUT /person/1 HTTP/1.1
Accept: application/json, */*
Content-Type: application/json
Host: api.example.com

{
    ""age"": 29,
    ""hobbies"": [
        ""http"",
        ""pies""
    ],
    ""description"": ""John is a nice guy who likes pies."",
    ""married"": false,
    ""name"": ""John"",
    ""bookmarks"": {
        ""HTTPie"": ""https://httpie.org"",
    }
}
Please note that with this syntax the command gets unwieldy when sending
complex data. In that case it's always better to use redirected input:
$ http POST api.example.com/person/1 < person.json

8   Forms
Submitting forms is very similar to sending JSON requests. Often the only
difference is in adding the --form, -f option, which ensures that
data fields are serialized as, and Content-Type is set to,
application/x-www-form-urlencoded; charset=utf-8. It is possible to make
form data the implicit content type instead of JSON
via the config file.

8.1   Regular forms
$ http --form POST api.example.org/person/1 name='John Smith'
POST /person/1 HTTP/1.1
Content-Type: application/x-www-form-urlencoded; charset=utf-8

name=John+Smith

8.2   File upload forms
If one or more file fields is present, the serialization and content type is
multipart/form-data:
$ http -f POST example.com/jobs name='John Smith' cv@~/Documents/cv.pdf
The request above is the same as if the following HTML form were
submitted:
<form enctype=""multipart/form-data"" method=""post"" action=""http://example.com/jobs"">
    <input type=""text"" name=""name"" />
    <input type=""file"" name=""cv"" />
</form>
Note that @ is used to simulate a file upload form field, whereas
=@ just embeds the file content as a regular text field value.

9   HTTP headers
To set custom headers you can use the Header:Value notation:
$ http example.org  User-Agent:Bacon/1.0  'Cookie:valued-visitor=yes;foo=bar'  \
    X-Foo:Bar  Referer:https://httpie.org/
GET / HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate
Cookie: valued-visitor=yes;foo=bar
Host: example.org
Referer: https://httpie.org/
User-Agent: Bacon/1.0
X-Foo: Bar

9.1   Default request headers
There are a couple of default headers that HTTPie sets:
GET / HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate
User-Agent: HTTPie/<version>
Host: <taken-from-URL>
Any of these except Host can be overwritten and some of them unset.

9.2   Empty headers and header un-setting
To unset a previously specified header
(such a one of the default headers), use Header::
$ http httpbin.org/headers Accept: User-Agent:
To send a header with an empty value, use Header;:
$ http httpbin.org/headers 'Header;'

9.3   Limiting response headers
The --max-headers=n options allows you to control the number of headers
HTTPie reads before giving up (the default 0, i.e., there’s no limit).
$ http --max-headers=100 httpbin.org/get

10   Cookies
HTTP clients send cookies to the server as regular HTTP headers. That means,
HTTPie does not offer any special syntax for specifying cookies — the usual
Header:Value notation is used:
Send a single cookie:
$ http example.org Cookie:sessionid=foo
GET / HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate
Connection: keep-alive
Cookie: sessionid=foo
Host: example.org
User-Agent: HTTPie/0.9.9
Send multiple cookies
(note the header is quoted to prevent the shell from interpreting the ;):
$ http example.org 'Cookie:sessionid=foo;another-cookie=bar'
GET / HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate
Connection: keep-alive
Cookie: sessionid=foo;another-cookie=bar
Host: example.org
User-Agent: HTTPie/0.9.9
If you often deal with cookies in your requests, then chances are you'd appreciate
the sessions feature.

11   Authentication
The currently supported authentication schemes are Basic and Digest
(see auth plugins for more). There are two flags that control authentication:


--auth, -a
Pass a username:password pair as
the argument. Or, if you only specify a username
(-a username), you'll be prompted for
the password before the request is sent.
To send an empty password, pass username:.
The username:password@hostname URL syntax is
supported as well (but credentials passed via -a
have higher priority).

--auth-type, -A
Specify the auth mechanism. Possible values are
basic and digest. The default value is
basic so it can often be omitted.




11.1   Basic auth
$ http -a username:password example.org

11.2   Digest auth
$ http -A digest -a username:password example.org

11.3   Password prompt
$ http -a username example.org

11.4   .netrc
Authentication information from your ~/.netrc
file is by default honored as well.
For example:
$ cat ~/.netrc
machine httpbin.org
login httpie
password test
$ http httpbin.org/basic-auth/httpie/test
HTTP/1.1 200 OK
[...]
This can be disabled with the --ignore-netrc option:
$ http --ignore-netrc httpbin.org/basic-auth/httpie/test
HTTP/1.1 401 UNAUTHORIZED
[...]

11.5   Auth plugins
Additional authentication mechanism can be installed as plugins.
They can be found on the Python Package Index.
Here's a few picks:

httpie-api-auth: ApiAuth
httpie-aws-auth: AWS / Amazon S3
httpie-edgegrid: EdgeGrid
httpie-hmac-auth: HMAC
httpie-jwt-auth: JWTAuth (JSON Web Tokens)
httpie-negotiate: SPNEGO (GSS Negotiate)
httpie-ntlm: NTLM (NT LAN Manager)
httpie-oauth: OAuth
requests-hawk: Hawk


12   HTTP redirects
By default, HTTP redirects are not followed and only the first
response is shown:
$ http httpbin.org/redirect/3

12.1   Follow Location
To instruct HTTPie to follow the Location header of 30x responses
and show the final response instead, use the --follow, -F option:
$ http --follow httpbin.org/redirect/3

12.2   Showing intermediary redirect responses
If you additionally wish to see the intermediary requests/responses,
then use the --all option as well:
$ http --follow --all httpbin.org/redirect/3

12.3   Limiting maximum redirects followed
To change the default limit of maximum 30 redirects, use the
--max-redirects=<limit> option:
$ http --follow --all --max-redirects=5 httpbin.org/redirect/3

13   Proxies
You can specify proxies to be used through the --proxy argument for each
protocol (which is included in the value in case of redirects across protocols):
$ http --proxy=http:http://10.10.1.10:3128 --proxy=https:https://10.10.1.10:1080 example.org
With Basic authentication:
$ http --proxy=http:http://user:pass@10.10.1.10:3128 example.org

13.1   Environment variables
You can also configure proxies by environment variables ALL_PROXY,
HTTP_PROXY and HTTPS_PROXY, and the underlying Requests library will
pick them up as well. If you want to disable proxies configured through
the environment variables for certain hosts, you can specify them in NO_PROXY.
In your ~/.bash_profile:
export HTTP_PROXY=http://10.10.1.10:3128
export HTTPS_PROXY=https://10.10.1.10:1080
export NO_PROXY=localhost,example.com

13.2   SOCKS
Homebrew-installed HTTPie comes with SOCKS proxy support out of the box.
To enable SOCKS proxy support for non-Homebrew  installations, you'll
might need to install requests[socks] manually using pip:
$ pip install -U requests[socks]
Usage is the same as for other types of proxies:
$ http --proxy=http:socks5://user:pass@host:port --proxy=https:socks5://user:pass@host:port example.org

14   HTTPS

14.1   Server SSL certificate verification
To skip the host's SSL certificate verification, you can pass --verify=no
(default is yes):
$ http --verify=no https://example.org

14.2   Custom CA bundle
You can also use --verify=<CA_BUNDLE_PATH> to set a custom CA bundle path:
$ http --verify=/ssl/custom_ca_bundle https://example.org

14.3   Client side SSL certificate
To use a client side certificate for the SSL communication, you can pass
the path of the cert file with --cert:
$ http --cert=client.pem https://example.org
If the private key is not contained in the cert file you may pass the
path of the key file with --cert-key:
$ http --cert=client.crt --cert-key=client.key https://example.org

14.4   SSL version
Use the --ssl=<PROTOCOL> to specify the desired protocol version to use.
This will default to SSL v2.3 which will negotiate the highest protocol that both
the server and your installation of OpenSSL support. The available protocols
are ssl2.3, ssl3, tls1, tls1.1, tls1.2, tls1.3. (The actually
available set of protocols may vary depending on your OpenSSL installation.)
# Specify the vulnerable SSL v3 protocol to talk to an outdated server:
$ http --ssl=ssl3 https://vulnerable.example.org

15   Output options
By default, HTTPie only outputs the final response and the whole response
message is printed (headers as well as the body). You can control what should
be printed via several options:


--headers, -h
Only the response headers are printed.

--body, -b
Only the response body is printed.

--verbose, -v
Print the whole HTTP exchange (request and response).
This option also enables --all (see below).

--print, -p
Selects parts of the HTTP exchange.



--verbose can often be useful for debugging the request and generating
documentation examples:
$ http --verbose PUT httpbin.org/put hello=world
PUT /put HTTP/1.1
Accept: application/json, */*
Accept-Encoding: gzip, deflate
Content-Type: application/json
Host: httpbin.org
User-Agent: HTTPie/0.2.7dev

{
    ""hello"": ""world""
}


HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 477
Content-Type: application/json
Date: Sun, 05 Aug 2012 00:25:23 GMT
Server: gunicorn/0.13.4

{
    […]
}

15.1   What parts of the HTTP exchange should be printed
All the other output options are under the hood just shortcuts for
the more powerful --print, -p. It accepts a string of characters each
of which represents a specific part of the HTTP exchange:


Character
Stands for



H
request headers

B
request body

h
response headers

b
response body



Print request and response headers:
$ http --print=Hh PUT httpbin.org/put hello=world

15.2   Viewing intermediary requests/responses
To see all the HTTP communication, i.e. the final request/response as
well as any possible  intermediary requests/responses, use the --all
option. The intermediary HTTP communication include followed redirects
(with --follow), the first unauthorized request when HTTP digest
authentication is used (--auth=digest), etc.
# Include all responses that lead to the final one:
$ http --all --follow httpbin.org/redirect/3
The intermediary requests/response are by default formatted according to
--print, -p (and its shortcuts described above). If you'd like to change
that, use the --history-print, -P option. It takes the same
arguments as --print, -p but applies to the intermediary requests only.
# Print the intermediary requests/responses differently than the final one:
$ http -A digest -a foo:bar --all -p Hh -P H httpbin.org/digest-auth/auth/foo/bar

15.3   Conditional body download
As an optimization, the response body is downloaded from the server
only if it's part of the output. This is similar to performing a HEAD
request, except that it applies to any HTTP method you use.
Let's say that there is an API that returns the whole resource when it is
updated, but you are only interested in the response headers to see the
status code after an update:
$ http --headers PATCH example.org/Really-Huge-Resource name='New Name'
Since we are only printing the HTTP headers here, the connection to the server
is closed as soon as all the response headers have been received.
Therefore, bandwidth and time isn't wasted downloading the body
which you don't care about. The response headers are downloaded always,
even if they are not part of the output

16   Redirected Input
The universal method for passing request data is through redirected stdin
(standard input)—piping. Such data is buffered and then with no further
processing used as the request body. There are multiple useful ways to use
piping:
Redirect from a file:
$ http PUT example.com/person/1 X-API-Token:123 < person.json
Or the output of another program:
$ grep '401 Unauthorized' /var/log/httpd/error_log | http POST example.org/intruders
You can use echo for simple data:
$ echo '{""name"": ""John""}' | http PATCH example.com/person/1 X-API-Token:123
You can also use a Bash here string:
$ http example.com/ <<<'{""name"": ""John""}'
You can even pipe web services together using HTTPie:
$ http GET https://api.github.com/repos/jakubroztocil/httpie | http POST httpbin.org/post
You can use cat to enter multiline data on the terminal:
$ cat | http POST example.com
<paste>
^D
$ cat | http POST example.com/todos Content-Type:text/plain
- buy milk
- call parents
^D
On OS X, you can send the contents of the clipboard with pbpaste:
$ pbpaste | http PUT example.com
Passing data through stdin cannot be combined with data fields specified
on the command line:
$ echo 'data' | http POST example.org more=data   # This is invalid
To prevent HTTPie from reading stdin data you can use the
--ignore-stdin option.

16.1   Request data from a filename
An alternative to redirected stdin is specifying a filename (as
@/path/to/file) whose content is used as if it came from stdin.
It has the advantage that the Content-Type
header is automatically set to the appropriate value based on the
filename extension. For example, the following request sends the
verbatim contents of that XML file with Content-Type: application/xml:
$ http PUT httpbin.org/put @/data/file.xml

17   Terminal output
HTTPie does several things by default in order to make its terminal output
easy to read.

17.1   Colors and formatting
Syntax highlighting is applied to HTTP headers and bodies (where it makes
sense). You can choose your preferred color scheme via the --style option
if you don't like the default one (see $ http --help for the possible
values).
Also, the following formatting is applied:

HTTP headers are sorted by name.
JSON data is indented, sorted by keys, and unicode escapes are converted
to the characters they represent.

One of these options can be used to control output processing:


--pretty=all
Apply both colors and formatting.
Default for terminal output.

--pretty=colors
Apply colors.

--pretty=format
Apply formatting.

--pretty=none
Disables output processing.
Default for redirected output.




17.2   Binary data
Binary data is suppressed for terminal output, which makes it safe to perform
requests to URLs that send back binary data. Binary data is suppressed also in
redirected, but prettified output. The connection is closed as soon as we know
that the response body is binary,
$ http example.org/Movie.mov
You will nearly instantly see something like this:
HTTP/1.1 200 OK
Accept-Ranges: bytes
Content-Encoding: gzip
Content-Type: video/quicktime
Transfer-Encoding: chunked

+-----------------------------------------+
| NOTE: binary data not shown in terminal |
+-----------------------------------------+

18   Redirected output
HTTPie uses a different set of defaults for redirected output than for
terminal output. The differences being:

Formatting and colors aren't applied (unless --pretty is specified).
Only the response body is printed (unless one of the output options is set).
Also, binary data isn't suppressed.

The reason is to make piping HTTPie's output to another programs and
downloading files work with no extra flags. Most of the time, only the raw
response body is of an interest when the output is redirected.
Download a file:
$ http example.org/Movie.mov > Movie.mov
Download an image of Octocat, resize it using ImageMagick, upload it elsewhere:
$ http octodex.github.com/images/original.jpg | convert - -resize 25% -  | http example.org/Octocats
Force colorizing and formatting, and show both the request and the response in
less pager:
$ http --pretty=all --verbose example.org | less -R
The -R flag tells less to interpret color escape sequences included
HTTPie`s output.
You can create a shortcut for invoking HTTPie with colorized and paged output
by adding the following to your ~/.bash_profile:
function httpless {
    # `httpless example.org'
    http --pretty=all --print=hb ""$@"" | less -R;
}

19   Download mode
HTTPie features a download mode in which it acts similarly to wget.
When enabled using the --download, -d flag, response headers are printed to
the terminal (stderr), and a progress bar is shown while the response body
is being saved to a file.
$ http --download https://github.com/jakubroztocil/httpie/archive/master.tar.gz
HTTP/1.1 200 OK
Content-Disposition: attachment; filename=httpie-master.tar.gz
Content-Length: 257336
Content-Type: application/x-gzip

Downloading 251.30 kB to ""httpie-master.tar.gz""
Done. 251.30 kB in 2.73862s (91.76 kB/s)

19.1   Downloaded filename
There are three mutually exclusive ways through which HTTPie determines
the output filename (with decreasing priority):

You can explicitly provide it via --output, -o.
The file gets overwritten if it already exists
(or appended to with --continue, -c).
The server may specify the filename in the optional Content-Disposition
response header. Any leading dots are stripped from a server-provided filename.
The last resort HTTPie uses is to generate the filename from a combination
of the request URL and the response Content-Type.
The initial URL is always used as the basis for
the generated filename — even if there has been one or more redirects.

To prevent data loss by overwriting, HTTPie adds a unique numerical suffix to the
filename when necessary (unless specified with --output, -o).

19.2   Piping while downloading
You can also redirect the response body to another program while the response
headers and progress are still shown in the terminal:
$ http -d https://github.com/jakubroztocil/httpie/archive/master.tar.gz |  tar zxf -

19.3   Resuming downloads
If --output, -o is specified, you can resume a partial download using the
--continue, -c option. This only works with servers that support
Range requests and 206 Partial Content responses. If the server doesn't
support that, the whole file will simply be downloaded:
$ http -dco file.zip example.org/file

19.4   Other notes

The --download option only changes how the response body is treated.
You can still set custom headers, use sessions, --verbose, -v, etc.
--download always implies --follow (redirects are followed).
HTTPie exits with status code 1 (error) if the body hasn't been fully
downloaded.
Accept-Encoding cannot be set with --download.


20   Streamed responses
Responses are downloaded and printed in chunks which allows for streaming
and large file downloads without using too much memory. However, when
colors and formatting is applied, the whole response is buffered and only
then processed at once.

20.1   Disabling buffering
You can use the --stream, -S flag to make two things happen:

The output is flushed in much smaller chunks without any buffering,
which makes HTTPie behave kind of like tail -f for URLs.
Streaming becomes enabled even when the output is prettified: It will be
applied to each line of the response and flushed immediately. This makes
it possible to have a nice output for long-lived requests, such as one
to the Twitter streaming API.


20.2   Examples use cases
Prettified streamed response:
$ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track='Justin Bieber'
Streamed output by small chunks alá tail -f:
# Send each new tweet (JSON object) mentioning ""Apple"" to another
# server as soon as it arrives from the Twitter streaming API:
$ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track=Apple \
| while read tweet; do echo ""$tweet"" | http POST example.org/tweets ; done

21   Sessions
By default, every request HTTPie makes is completely independent of any
previous ones to the same host.
However, HTTPie also supports persistent
sessions via the --session=SESSION_NAME_OR_PATH option. In a session,
custom HTTP headers (except for the ones starting with Content- or If-),
authentication, and cookies
(manually specified or sent by the server) persist between requests
to the same host.
# Create a new session
$ http --session=/tmp/session.json example.org API-Token:123

# Re-use an existing session — API-Token will be set:
$ http --session=/tmp/session.json example.org
All session data, including credentials, cookie data,
and custom headers are stored in plain text.
That means session files can also be created and edited manually in a text
editor—they are regular JSON. It also means that they can be read by anyone
who has access to the session file.

21.1   Named sessions
You can create one or more named session per host. For example, this is how
you can create a new session named user1 for example.org:
$ http --session=user1 -a user1:password example.org X-Foo:Bar
From now on, you can refer to the session by its name. When you choose to
use the session again, any previously specified authentication or HTTP headers
will automatically be set:
$ http --session=user1 example.org
To create or reuse a different session, simple specify a different name:
$ http --session=user2 -a user2:password example.org X-Bar:Foo
Named sessions’s data is stored in JSON files in the the sessions
subdirectory of the config directory:
~/.httpie/sessions/<host>/<name>.json
(%APPDATA%\httpie\sessions\<host>\<name>.json on Windows).

21.2   Anonymous sessions
Instead of a name, you can also directly specify a path to a session file. This
allows for sessions to be re-used across multiple hosts:
$ http --session=/tmp/session.json example.org
$ http --session=/tmp/session.json admin.example.org
$ http --session=~/.httpie/sessions/another.example.org/test.json example.org
$ http --session-read-only=/tmp/session.json example.org

21.3   Readonly session
To use an existing session file without updating it from the request/response
exchange once it is created, specify the session name via
--session-read-only=SESSION_NAME_OR_PATH instead.

22   Config
HTTPie uses a simple config.json file. The file doesn’t exist by default
but you can create it manually.

22.1   Config file directory
The default location of the configuration file is ~/.httpie/config.json
(or %APPDATA%\httpie\config.json on Windows).
The config directory can be changed by setting the $HTTPIE_CONFIG_DIR
environment variable:
$ export HTTPIE_CONFIG_DIR=/tmp/httpie
$ http example.org
To view the exact location run http --debug.

22.2   Configurable options
Currently HTTPie offers a single configurable option:

22.2.1   default_options
An Array (by default empty) of default options that should be applied to
every invocation of HTTPie.
For instance, you can use this config option to change your default color theme:
$ cat ~/.httpie/config.json
{
    ""default_options"": [
      ""--style=fruity""
    ]
}
Even though it is technically possible to include there any of HTTPie’s
options, it is not recommended to modify the default behaviour in a way
that would break your compatibility with the wider world as that can
generate a lot of confusion.

22.3   Un-setting previously specified options
Default options from the config file, or specified any other way,
can be unset for a particular invocation via --no-OPTION arguments passed
on the command line (e.g., --no-style or --no-session).

23   Scripting
When using HTTPie from shell scripts, it can be handy to set the
--check-status flag. It instructs HTTPie to exit with an error if the
HTTP status is one of 3xx, 4xx, or 5xx. The exit status will
be 3 (unless --follow is set), 4, or 5,
respectively.
#!/bin/bash

if http --check-status --ignore-stdin --timeout=2.5 HEAD example.org/health &> /dev/null; then
    echo 'OK!'
else
    case $? in
        2) echo 'Request timed out!' ;;
        3) echo 'Unexpected HTTP 3xx Redirection!' ;;
        4) echo 'HTTP 4xx Client Error!' ;;
        5) echo 'HTTP 5xx Server Error!' ;;
        6) echo 'Exceeded --max-redirects=<n> redirects!' ;;
        *) echo 'Other Error!' ;;
    esac
fi

23.1   Best practices
The default behaviour of automatically reading stdin is typically not
desirable during non-interactive invocations. You most likely want to
use the --ignore-stdin option to disable it.
It is a common gotcha that without this option HTTPie seemingly hangs.
What happens is that when HTTPie is invoked for example from a cron job,
stdin is not connected to a terminal.
Therefore, rules for redirected input apply, i.e., HTTPie starts to read it
expecting that the request body will be passed through.
And since there's no data nor EOF, it will be stuck. So unless you're
piping some data to HTTPie, this flag should be used in scripts.
Also, it might be good to set a connection --timeout limit to prevent
your program from hanging if the server never responds.

24   Meta

24.1   Interface design
The syntax of the command arguments closely corresponds to the actual HTTP
requests sent over the wire. It has the advantage  that it's easy to remember
and read. It is often possible to translate an HTTP request to an HTTPie
argument list just by inlining the request elements. For example, compare this
HTTP request:
POST /collection HTTP/1.1
X-API-Key: 123
User-Agent: Bacon/1.0
Content-Type: application/x-www-form-urlencoded

name=value&name2=value2
with the HTTPie command that sends it:
$ http -f POST example.org/collection \
  X-API-Key:123 \
  User-Agent:Bacon/1.0 \
  name=value \
  name2=value2
Notice that both the order of elements and the syntax is very similar,
and that only a small portion of the command is used to control HTTPie and
doesn't directly correspond to any part of the request (here it's only -f
asking HTTPie to send a form request).
The two modes, --pretty=all (default for terminal) and --pretty=none
(default for redirected output), allow for both user-friendly interactive use
and usage from scripts, where HTTPie serves as a generic HTTP client.
As HTTPie is still under heavy development, the existing command line
syntax and some of the --OPTIONS may change slightly before
HTTPie reaches its final version 1.0. All changes are recorded in the
change log.

24.2   User support
Please use the following support channels:

GitHub issues
for bug reports and feature requests.
Our Gitter chat room
to ask questions, discuss features, and for general discussion.
StackOverflow
to ask questions (please make sure to use the
httpie tag).
Tweet directly to @clihttp.
You can also tweet directly to @jakubroztocil.


24.3   Related projects

24.3.1   Dependencies
Under the hood, HTTPie uses these two amazing libraries:

Requests
— Python HTTP library for humans
Pygments
— Python syntax highlighter


24.3.2   HTTPie friends
HTTPie plays exceptionally well with the following tools:

jq
— CLI JSON processor that
works great in conjunction with HTTPie
http-prompt
—  interactive shell for HTTPie featuring autocomplete
and command syntax highlighting


24.3.3   Alternatives

httpcat — a lower-level sister utility
of HTTPie for constructing raw HTTP requests on the command line.
curl — a ""Swiss knife"" command line tool and
an exceptional library for transferring data with URLs.


24.4   Contributing
See CONTRIBUTING.rst.

24.5   Change log
See CHANGELOG.

24.6   Artwork

Logo by Cláudia Delgado.
Animation by Allen Smith of GitHub.


24.7   Licence
BSD-3-Clause: LICENSE.

24.8   Authors
Jakub Roztocil  (@jakubroztocil) created HTTPie and these fine people
have contributed.

"
75,"
Welcome to Rails
What's Rails?
Rails is a web-application framework that includes everything needed to
create database-backed web applications according to the
Model-View-Controller (MVC)
pattern.
Understanding the MVC pattern is key to understanding Rails. MVC divides your
application into three layers: Model, View, and Controller, each with a specific responsibility.
Model layer
The Model layer represents the domain model (such as Account, Product,
Person, Post, etc.) and encapsulates the business logic specific to
your application. In Rails, database-backed model classes are derived from
ActiveRecord::Base. Active Record allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods.
Although most Rails models are backed by a database, models can also be ordinary
Ruby classes, or Ruby classes that implement a set of interfaces as provided by
the Active Model module.
Controller layer
The Controller layer is responsible for handling incoming HTTP requests and
providing a suitable response. Usually, this means returning HTML, but Rails controllers
can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and
manipulate models, and render view templates in order to generate the appropriate HTTP response.
In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and
controller classes are derived from ActionController::Base. Action Dispatch and Action Controller
are bundled together in Action Pack.
View layer
The View layer is composed of ""templates"" that are responsible for providing
appropriate representations of your application's resources. Templates can
come in a variety of formats, but most view templates are HTML with embedded
Ruby code (ERB files). Views are typically rendered to generate a controller response
or to generate the body of an email. In Rails, View generation is handled by Action View.
Frameworks and libraries
Active Record, Active Model, Action Pack, and Action View can each be used independently outside Rails.
In addition to that, Rails also comes with Action Mailer, a library
to generate and send emails; Action Mailbox, a library to receive emails within a Rails application;
Active Job, a framework for declaring jobs and making them run on a variety of queuing
backends; Action Cable, a framework to
integrate WebSockets with a Rails application; Active Storage, a library to attach cloud
and local files to Rails applications; Action Text, a library to handle rich text content;
and Active Support, a collection
of utility classes and standard library extensions that are useful for Rails,
and may also be used independently outside Rails.
Getting Started


Install Rails at the command prompt if you haven't yet:
 $ gem install rails



At the command prompt, create a new Rails application:
 $ rails new myapp

where ""myapp"" is the application name.


Change directory to myapp and start the web server:
 $ cd myapp
 $ rails server

Run with --help or -h for options.


Go to http://localhost:3000 and you'll see:
""Yay! You’re on Rails!""


Follow the guidelines to start developing your application. You may find
the following resources handy:

Getting Started with Rails
Ruby on Rails Guides
The API Documentation



Contributing

We encourage you to contribute to Ruby on Rails! Please check out the
Contributing to Ruby on Rails guide for guidelines about how to proceed. Join us!
Trying to report a possible security vulnerability in Rails? Please
check out our security policy for
guidelines about how to proceed.
Everyone interacting in Rails and its sub-projects' codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails code of conduct.
Code Status

License
Ruby on Rails is released under the MIT License.

"
76,"
JSON Server  
Get a full fake REST API with zero coding in less than 30 seconds (seriously)
Created with <3 for front-end developers who need a quick back-end for prototyping and mocking.

Egghead.io free video tutorial - Creating demo APIs with json-server
JSONPlaceholder - Live running version
My JSON Server - no installation required, use your own data

See also:

🐶 husky - Git hooks made easy
🏨 hotel - developer tool with local .localhost domain and https out of the box

 
Gold sponsors 🥇
 





 
Bronze sponsors 🥉
 





 
Become a sponsor and have your company logo here
Table of contents

Getting started
Routes

Plural routes
Singular routes
Filter
Paginate
Sort
Slice
Operators
Full-text search
Relationships
Database
Homepage


Extras

Static file server
Alternative port
Access from anywhere
Remote schema
Generate random data
HTTPS
Add custom routes
Add middlewares
CLI usage
Module

Simple example
Custom routes example
Access control example
Custom output example
Rewriter example
Mounting JSON Server on another endpoint example
API


Deployment


Links

Video
Articles
Third-party tools


License

Getting started
Install JSON Server
npm install -g json-server

Create a db.json file with some data
{
  ""posts"": [
    { ""id"": 1, ""title"": ""json-server"", ""author"": ""typicode"" }
  ],
  ""comments"": [
    { ""id"": 1, ""body"": ""some comment"", ""postId"": 1 }
  ],
  ""profile"": { ""name"": ""typicode"" }
}
Start JSON Server
json-server --watch db.json
Now if you go to http://localhost:3000/posts/1, you'll get
{ ""id"": 1, ""title"": ""json-server"", ""author"": ""typicode"" }
Also when doing requests, it's good to know that:

If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to db.json using lowdb.
Your request body JSON should be object enclosed, just like the GET output. (for example {""name"": ""Foobar""})
Id values are not mutable. Any id value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.
A POST, PUT or PATCH request should include a Content-Type: application/json header to use the JSON in the request body. Otherwise it will result in a 200 OK but without changes being made to the data.

Routes
Based on the previous db.json file, here are all the default routes. You can also add other routes using --routes.
Plural routes
GET    /posts
GET    /posts/1
POST   /posts
PUT    /posts/1
PATCH  /posts/1
DELETE /posts/1

Singular routes
GET    /profile
POST   /profile
PUT    /profile
PATCH  /profile

Filter
Use . to access deep properties
GET /posts?title=json-server&author=typicode
GET /posts?id=1&id=2
GET /comments?author.name=typicode

Paginate
Use _page and optionally _limit to paginate returned data.
In the Link header you'll get first, prev, next and last links.
GET /posts?_page=7
GET /posts?_page=7&_limit=20

10 items are returned by default
Sort
Add _sort and _order (ascending order by default)
GET /posts?_sort=views&_order=asc
GET /posts/1/comments?_sort=votes&_order=asc

For multiple fields, use the following format:
GET /posts?_sort=user,views&_order=desc,asc

Slice
Add _start and _end or _limit (an X-Total-Count header is included in the response)
GET /posts?_start=20&_end=30
GET /posts/1/comments?_start=20&_end=30
GET /posts/1/comments?_start=20&_limit=10

Works exactly as Array.slice (i.e. _start is inclusive and _end exclusive)
Operators
Add _gte or _lte for getting a range
GET /posts?views_gte=10&views_lte=20

Add _ne to exclude a value
GET /posts?id_ne=1

Add _like to filter (RegExp supported)
GET /posts?title_like=server

Full-text search
Add q
GET /posts?q=internet

Relationships
To include children resources, add _embed
GET /posts?_embed=comments
GET /posts/1?_embed=comments

To include parent resource, add _expand
GET /comments?_expand=post
GET /comments/1?_expand=post

To get or create nested resources (by default one level, add custom routes for more)
GET  /posts/1/comments
POST /posts/1/comments

Database
GET /db

Homepage
Returns default index file or serves ./public directory
GET /

Extras
Static file server
You can use JSON Server to serve your HTML, JS and CSS, simply create a ./public directory
or use --static to set a different static files directory.
mkdir public
echo 'hello world' > public/index.html
json-server db.json
json-server db.json --static ./some-other-dir
Alternative port
You can start JSON Server on other ports with the --port flag:
$ json-server --watch db.json --port 3004
Access from anywhere
You can access your fake API from anywhere using CORS and JSONP.
Remote schema
You can load remote schemas.
$ json-server http://example.com/file.json
$ json-server http://jsonplaceholder.typicode.com/db
Generate random data
Using JS instead of a JSON file, you can create data programmatically.
// index.js
module.exports = () => {
  const data = { users: [] }
  // Create 1000 users
  for (let i = 0; i < 1000; i++) {
    data.users.push({ id: i, name: `user${i}` })
  }
  return data
}
$ json-server index.js
Tip use modules like Faker, Casual, Chance or JSON Schema Faker.
HTTPS
There are many ways to set up SSL in development. One simple way is to use hotel.
Add custom routes
Create a routes.json file. Pay attention to start every route with /.
{
  ""/api/*"": ""/$1"",
  ""/:resource/:id/show"": ""/:resource/:id"",
  ""/posts/:category"": ""/posts?category=:category"",
  ""/articles\\?id=:id"": ""/posts/:id""
}
Start JSON Server with --routes option.
json-server db.json --routes routes.json
Now you can access resources using additional routes.
/api/posts # → /posts
/api/posts/1  # → /posts/1
/posts/1/show # → /posts/1
/posts/javascript # → /posts?category=javascript
/articles?id=1 # → /posts/1
Add middlewares
You can add your middlewares from the CLI using --middlewares option:
// hello.js
module.exports = (req, res, next) => {
  res.header('X-Hello', 'World')
  next()
}
json-server db.json --middlewares ./hello.js
json-server db.json --middlewares ./first.js ./second.js
CLI usage
json-server [options] <source>

Options:
  --config, -c       Path to config file           [default: ""json-server.json""]
  --port, -p         Set port                                    [default: 3000]
  --host, -H         Set host                             [default: ""localhost""]
  --watch, -w        Watch file(s)                                     [boolean]
  --routes, -r       Path to routes file
  --middlewares, -m  Paths to middleware files                           [array]
  --static, -s       Set static files directory
  --read-only, --ro  Allow only GET requests                           [boolean]
  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]
  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]
  --snapshots, -S    Set snapshots directory                      [default: "".""]
  --delay, -d        Add delay to responses (ms)
  --id, -i           Set database id property (e.g. _id)         [default: ""id""]
  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)
                                                                 [default: ""Id""]
  --quiet, -q        Suppress log messages from output                 [boolean]
  --help, -h         Show help                                         [boolean]
  --version, -v      Show version number                               [boolean]

Examples:
  json-server db.json
  json-server file.js
  json-server http://example.com/db.json

https://github.com/typicode/json-server

You can also set options in a json-server.json configuration file.
{
  ""port"": 3000
}
Module
If you need to add authentication, validation, or any behavior, you can use the project as a module in combination with other Express middlewares.
Simple example
$ npm install json-server --save-dev
// server.js
const jsonServer = require('json-server')
const server = jsonServer.create()
const router = jsonServer.router('db.json')
const middlewares = jsonServer.defaults()

server.use(middlewares)
server.use(router)
server.listen(3000, () => {
  console.log('JSON Server is running')
})
$ node server.js
The path you provide to the jsonServer.router function  is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:
const path = require('path')
const router = jsonServer.router(path.join(__dirname, 'db.json'))
For an in-memory database, simply pass an object to jsonServer.router().
Please note also that jsonServer.router() can be used in existing Express projects.
Custom routes example
Let's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.
const jsonServer = require('json-server')
const server = jsonServer.create()
const router = jsonServer.router('db.json')
const middlewares = jsonServer.defaults()

// Set default middlewares (logger, static, cors and no-cache)
server.use(middlewares)

// Add custom routes before JSON Server router
server.get('/echo', (req, res) => {
  res.jsonp(req.query)
})

// To handle POST, PUT and PATCH you need to use a body-parser
// You can use the one used by JSON Server
server.use(jsonServer.bodyParser)
server.use((req, res, next) => {
  if (req.method === 'POST') {
    req.body.createdAt = Date.now()
  }
  // Continue to JSON Server router
  next()
})

// Use default router
server.use(router)
server.listen(3000, () => {
  console.log('JSON Server is running')
})
Access control example
const jsonServer = require('json-server')
const server = jsonServer.create()
const router = jsonServer.router('db.json')
const middlewares = jsonServer.defaults()

server.use(middlewares)
server.use((req, res, next) => {
 if (isAuthorized(req)) { // add your authorization logic here
   next() // continue to JSON Server router
 } else {
   res.sendStatus(401)
 }
})
server.use(router)
server.listen(3000, () => {
  console.log('JSON Server is running')
})
Custom output example
To modify responses, overwrite router.render method:
// In this example, returned resources will be wrapped in a body property
router.render = (req, res) => {
  res.jsonp({
    body: res.locals.data
  })
}
You can set your own status code for the response:
// In this example we simulate a server side error response
router.render = (req, res) => {
  res.status(500).jsonp({
    error: ""error message here""
  })
}
Rewriter example
To add rewrite rules, use jsonServer.rewriter():
// Add this before server.use(router)
server.use(jsonServer.rewriter({
  '/api/*': '/$1',
  '/blog/:resource/:id/show': '/:resource/:id'
}))
Mounting JSON Server on another endpoint example
Alternatively, you can also mount the router on /api.
server.use('/api', router)
API
jsonServer.create()
Returns an Express server.
jsonServer.defaults([options])
Returns middlewares used by JSON Server.

options

static path to static files
logger enable logger middleware (default: true)
bodyParser enable body-parser middleware (default: true)
noCors disable CORS (default: false)
readOnly accept only GET requests (default: false)



jsonServer.router([path|object])
Returns JSON Server router.
Deployment
You can deploy JSON Server. For example, JSONPlaceholder is an online fake API powered by JSON Server and running on Heroku.
Links
Video

Creating Demo APIs with json-server on egghead.io

Articles

Node Module Of The Week - json-server
Mock up your REST API with JSON Server
ng-admin: Add an AngularJS admin GUI to any RESTful API
Fast prototyping using Restangular and Json-server
Create a Mock REST API in Seconds for Prototyping your Frontend
No API? No Problem! Rapid Development via Mock APIs
Zero Code REST With json-server

Third-party tools

Grunt JSON Server
Docker JSON Server
JSON Server GUI
JSON file generator
JSON Server extension

License
MIT
Supporters ✨

"
77,"
Spring Boot  



Spring Boot makes it easy to create Spring-powered, production-grade applications and
services with absolute minimum fuss. It takes an opinionated view of the Spring platform
so that new and existing users can quickly get to the bits they need.


You can use Spring Boot to create stand-alone Java applications that can be started using
java -jar or more traditional WAR deployments. We also provide a command line tool
that runs spring scripts.


Our primary goals are:




Provide a radically faster and widely accessible getting started experience for all
Spring development


Be opinionated out of the box, but get out of the way quickly as requirements start to
diverge from the defaults


Provide a range of non-functional features that are common to large classes of projects
(e.g. embedded servers, security, metrics, health checks, externalized configuration)


Absolutely no code generation and no requirement for XML configuration






Installation and Getting Started


The reference documentation includes detailed
installation
instructions as well as a comprehensive
getting started
guide.


Here is a quick teaser of a complete Spring Boot application in Java:



import org.springframework.boot.*;
import org.springframework.boot.autoconfigure.*;
import org.springframework.web.bind.annotation.*;

@RestController
@SpringBootApplication
public class Example {

	@RequestMapping(""/"")
	String home() {
		return ""Hello World!"";
	}

	public static void main(String[] args) {
		SpringApplication.run(Example.class, args);
	}

}





Getting help


Having trouble with Spring Boot? We’d like to help!




Check the reference documentation, especially the
How-to’s — they provide solutions to the most common
questions.


Learn the Spring basics — Spring Boot builds on many other Spring projects, check
the spring.io web-site for a wealth of reference documentation. If
you are just starting out with Spring, try one of the guides.


If you are upgrading, read the release notes for upgrade instructions and
""new and noteworthy"" features.


Ask a question - we monitor stackoverflow.com for questions
tagged with spring-boot. You can also chat
with the community on Gitter.


Report bugs with Spring Boot at github.com/spring-projects/spring-boot/issues.






Reporting Issues


Spring Boot uses GitHub’s integrated issue tracking system to record bugs and feature
requests. If you want to raise an issue, please follow the recommendations below:




Before you log a bug, please search the issue tracker to see if someone
has already reported the problem.


If the issue doesn’t already exist, create a new issue.


Please provide as much information as possible with the issue report, we like to know
the version of Spring Boot that you are using, as well as your Operating System and
JVM version.


If you need to paste code, or include a stack trace use Markdown ``` escapes
before and after your text.


If possible try to create a test-case or project that replicates the problem and attach
it to the issue.






Building from Source


You don’t need to build from source to use Spring Boot (binaries in
repo.spring.io), but if you want to try out the latest and
greatest, Spring Boot can be easily built with the
maven wrapper. You also need JDK 1.8.



$ ./mvnw clean install



If you want to build with the regular mvn command, you will need
Maven v3.5.0 or above.





Note


You may need to increase the amount of memory available to Maven by setting
a MAVEN_OPTS environment variable with the value -Xmx512m. Remember
to set the corresponding property in your IDE as well if you are building and running
tests there (e.g. in Eclipse go to Preferences→Java→Installed JREs and edit the
JRE definition so that all processes are launched with those arguments). This property
is automatically set if you use the maven wrapper.





Also see CONTRIBUTING.adoc if you wish to submit pull requests,
and in particular please fill out the
Contributor’s Agreement
before your first change, however trivial.


Building reference documentation

First of all, make sure you have built the project:



$ ./mvnw clean install



The reference documentation requires the documentation of the Maven plugin to be
available so you need to build that first since it’s not generated by default.



$ ./mvnw clean install -pl spring-boot-project/spring-boot-tools/spring-boot-maven-plugin -Pdefault,full



The documentation also includes auto-generated information about the starters. You might
have that in your local repository already (per the first step) but if you want to refresh
it:



$ ./mvnw clean install -f spring-boot-project/spring-boot-starters



Once this is done, you can build the reference documentation with the command below:



$ ./mvnw clean prepare-package -pl spring-boot-project/spring-boot-docs -Pdefault,full






Tip


The generated documentation is available from spring-boot-project/spring-boot-docs/target/generated-docs/reference/html








Modules


There are a number of modules in Spring Boot, here is a quick overview:


spring-boot

The main library providing features that support the other parts of Spring Boot,
these include:




The SpringApplication class, providing static convenience methods that make it easy
to write a stand-alone Spring Application. Its sole job is to create and refresh an
appropriate Spring ApplicationContext


Embedded web applications with a choice of container (Tomcat, Jetty or Undertow)


First class externalized configuration support


Convenience ApplicationContext initializers, including support for sensible logging
defaults





spring-boot-autoconfigure

Spring Boot can configure large parts of common applications based on the content
of their classpath. A single @EnableAutoConfiguration annotation triggers
auto-configuration of the Spring context.


Auto-configuration attempts to deduce which beans a user might need. For example, if
HSQLDB is on the classpath, and the user has not configured any database connections,
then they probably want an in-memory database to be defined. Auto-configuration will
always back away as the user starts to define their own beans.



spring-boot-starters

Starters are a set of convenient dependency descriptors that you can include in
your application. You get a one-stop-shop for all the Spring and related technology
that you need without having to hunt through sample code and copy paste loads of
dependency descriptors. For example, if you want to get started using Spring and JPA for
database access just include the spring-boot-starter-data-jpa dependency in your
project, and you are good to go.



spring-boot-cli

The Spring command line application compiles and runs Groovy source, making it super
easy to write the absolute minimum of code to get an application running. Spring CLI
can also watch files, automatically recompiling and restarting when they change.



spring-boot-actuator

Actuator endpoints let you monitor and interact with your application.
Spring Boot Actuator provides the infrastructure required for actuator endpoints. It contains
annotation support for actuator endpoints. Out of the box, this module provides a number of endpoints
including the HealthEndpoint, EnvironmentEndpoint, BeansEndpoint and many more.



spring-boot-actuator-autoconfigure

This provides auto-configuration for actuator endpoints based on the content of the classpath and a set of properties.
For instance, if Micrometer is on the classpath, it will auto-configure the MetricsEndpoint.
It contains configuration to expose endpoints over HTTP or JMX.
Just like Spring Boot AutoConfigure, this will back away as the user starts to define their own beans.



spring-boot-test

This module contains core items and annotations that can be helpful when testing your application.



spring-boot-test-autoconfigure

Like other Spring Boot auto-configuration modules, spring-boot-test-autoconfigure, provides auto-configuration
for tests based on the classpath. It includes a number of annotations that can be used to automatically
configure a slice of your application that needs to be tested.



spring-boot-loader

Spring Boot Loader provides the secret sauce that allows you to build a single jar file
that can be launched using java -jar. Generally you will not need to use
spring-boot-loader directly, but instead work with the
Gradle or
Maven plugin.



spring-boot-devtools

The spring-boot-devtools module provides additional development-time features such as automatic restarts,
for a smoother application development experience. Developer tools are automatically disabled when
running a fully packaged application.





Samples


Groovy samples for use with the command line application are available in
spring-boot-cli/samples. To run the CLI samples type
spring run <sample>.groovy from samples directory.




Guides


The spring.io site contains several guides that show how to use Spring
Boot step-by-step:




Building an Application with Spring Boot is a
very basic guide that shows you how to create a simple application, run it and add some
management services.


Building a RESTful Web Service with Spring
Boot Actuator is a guide to creating a REST web service and also shows how the server
can be configured.


Converting a Spring Boot JAR Application
to a WAR shows you how to run applications in a web server as a WAR file.






License


Spring Boot is Open Source software released under the
Apache 2.0 license.



"
78,"





Build bulletproof UI components faster


































Storybook is a development environment for UI components.
It allows you to browse a component library, view the different states of each component, and interactively develop and test components.


  View README for:



Intro
Storybook runs outside of your app. This allows you to develop UI components in isolation, which can improve component reuse, testability, and development speed. You can build quickly without having to worry about application-specific dependencies.
Here are some featured examples that you can reference to see how Storybook works: https://storybook.js.org/examples/
Storybook comes with a lot of addons for component design, documentation, testing, interactivity, and so on. Storybook's API makes it possible to configure and extend in various ways. It has even been extended to support React Native development for mobile.
Table of contents

🚀Getting Started
📒Projects

🛠Supported Frameworks & Examples
🚇Sub Projects
🔗Addons


🏅Badges & Presentation materials
👥Community
👏Contributing

👨‍💻Development scripts
💵Backers
💸Sponsors


📝License

Getting Started
First install storybook:
cd my-react-app
npx -p @storybook/cli sb init
If you'd rather set up your project manually, take a look at our Slow Start Guide.
Once it's installed, you can npm run storybook and it will run the development server on your local machine, and give you a URL to browse some sample stories.
Storybook v2.x migration note:
If you're using Storybook v2.x and want to shift to 4.x version the easiest way is:
cd my-storybook-v2-app
npx -p @storybook/cli sb init
It runs a codemod to update all package names. Read all migration details in our Migration Guide
For full documentation on using Storybook visit: storybook.js.org
For additional help, join us in our Discord or Slack
Projects
Supported Frameworks



Framework
Demo





React
v5.1.0



React Native
-



Vue
v5.1.0



Angular
v5.1.0



Polymer
v5.1.0



Mithril
v5.1.0



Marko
v5.1.0



HTML
v5.1.0



Svelte
v5.1.0



Riot
v5.1.0



Ember
v5.1.0



Preact
v5.1.0




Sub Projects

CLI - Streamlined installation for a variety of app types
examples - Code examples to illustrate different Storybook use cases

Addons



Addons





a11y
Test components for user accessibility in Storybook


actions
Log actions as users interact with components in the Storybook UI


backgrounds
Let users choose backgrounds in the Storybook UI


centered
Center the alignment of your components within the Storybook UI


contexts
Interactively inject component contexts for stories in the Storybook UI


cssresources
Dynamically add/remove css resources to the component iframe


design assets
View images, videos, weblinks alongside your story


events
Interactively fire events to components that respond to EventEmitter


graphql
Query a GraphQL server within Storybook stories


google-analytics
Reports google analytics on stories


info
Annotate stories with extra component usage information


jest
View the results of components' unit tests in Storybook


knobs
Interactively edit component prop data in the Storybook UI


links
Create links between stories


notes
Annotate Storybook stories with notes


options
Customize the Storybook UI in code


storyshots
Snapshot testing for components in Storybook


storysource
View the code of your stories within the Storybook UI


viewport
Change display sizes and layouts for responsive components using Storybook



See Addon / Framework Support Table
Badges & Presentation materials
We have a badge! Link it to your live Storybook example.

[![Storybook](https://cdn.jsdelivr.net/gh/storybookjs/brand@master/badge/badge-storybook.svg)](link to site)
If you're looking for material to use in your presentation about storybook, like logo's video material and the colors we use etc, you can find all of that at our brand repo.
Community

Tweeting via @storybookjs
Blogging at Medium
Chatting on Slack
Discussions on Discord
Streaming saved at Youtube

Contributing
We welcome contributions to Storybook!

📥 Pull requests and 🌟 Stars are always welcome.
Read our contributing guide to get started.
or find us on Discord, we're will take the time to guide you

Looking for a first issue to tackle?

We tag issues with  when we think they are well suited for people who are new to the codebase or OSS in general.
Talk to us, we'll find something to suits your skills and learning interest.

Development scripts
Storybook is organized as a monorepo using Lerna. Useful scripts include:
yarn bootstrap

Installs package dependencies and links packages together - using lerna

yarn run publish

Push a release to git and npm
will ask for version in interactive mode - using lerna.

yarn lint

boolean check if code conforms to linting rules - uses remark & eslint



yarn lint:js - will check js


yarn lint:md - will check markdown + code samples


yarn lint:js --fix - will automatically fix js


yarn test

boolean check if unit tests all pass - uses jest


yarn run test --core --watch - will run core tests in watch-mode

Sponsors
Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor]






























Backers
Support us with a monthly donation and help us continue our activities. [Become a backer]






























License
MIT
-the end-

"
79,"
HTML5 Boilerplate





HTML5 Boilerplate is a professional front-end template for building
fast, robust, and adaptable web apps or sites.
This project is the product of years of iterative development and
community knowledge. It does not impose a specific development
philosophy or framework, so you're free to architect your code in the
way that you want.

Homepage: https://html5boilerplate.com/
Source: https://github.com/h5bp/html5-boilerplate
Twitter: @h5bp

Quick start
Choose one of the following options:


Download the latest stable release from
html5boilerplate.com. This zip file is a snapshot of the dist folder. On Windows, Mac and from the file manager on Linux unzipping this folder will output to a folder named something like html5-boilerplate_v7.3.0. From the command line will need to create a folder and unzip the contents into that folder.
mkdir html5-boilerplate
unzip html5-boilerplate*.zip -d html5-boilerplate


Clone the git repo — git clone https://github.com/h5bp/html5-boilerplate.git - and checkout the
tagged release
you'd like to use. The dist folder represents the latest version of the project for end users.


Install with npm: npm install html5-boilerplate or yarn: yarn add html5-boilerplate. The resulting node_modules/html5-boilerplate/dist folder represents the latest version of the project for end users. Depending on what you want to use and how you want to use it, you may have to copy and paste the contents of that folder into your project directory.


Features

HTML5 ready. Use the new elements with confidence.
Designed with progressive enhancement in mind.
Includes:

Normalize.css
for CSS normalizations and common bug fixes
jQuery via CDN with SRI Hash and a local fallback
A custom build of Modernizr for feature
detection
Apache Server Configs
that, among other, improve the web site's performance and security


Placeholder CSS Media Queries.
Useful CSS helper classes.
Default print styles, performance optimized.
An optimized version of the Google Universal Analytics snippet.
Protection against any stray console statements causing JavaScript
errors in older browsers.
""Delete-key friendly."" Easy to strip out parts you don't need.
Extensive inline and accompanying documentation.

Browser support

Chrome (latest 2)
Edge (latest 2)
Firefox (latest 2)
Internet Explorer 11
Opera (latest 2)
Safari (latest 2)

This doesn't mean that HTML5 Boilerplate cannot be used in older browsers,
just that we'll ensure compatibility with the ones mentioned above.
If you need legacy browser support you can use HTML5 Boilerplate v6 (IE9/IE10)
or HTML5 Boilerplate v5 (IE 8). They are no longer actively developed.
Documentation
Take a look at the documentation table of contents.
This documentation is bundled with the project which makes it
available for offline reading and provides a useful starting point for
any documentation you want to write about your project.
Contributing
Hundreds of developers have helped to make the HTML5 Boilerplate. Anyone is welcome to contribute,
however, if you decide to get involved, please take a moment to review
the guidelines:

Bug reports
Feature requests
Pull requests

License
The code is available under the MIT license.

"
